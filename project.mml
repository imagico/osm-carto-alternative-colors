# This is generated code, do not change this file manually.
#
# To change these definitions, alter layers/*.mml and run:
#
#   ./scripts/assemble_project.py
#
# Content subject to AGPL v3.0/CC BY-SA 4.0 - see LICENSE.txt for details
#
scale: 1
metatile: 2
name: OSM-Carto alternative colors
description: An experimental fork of OSM-Carto
license: AGPL v3.0/CC BY-SA 4.0 - see LICENSE.txt for details
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 0
  - 0
  - 4
format: png
interactivity: false
minzoom: 0
maxzoom: 22
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

# Various parts to be included later on
_parts:
  # Extents are used for tilemill, and don't actually make it to the generated XML
  extents: &extents
    extent: *world
    srs-name: "3857"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "gis"
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
Stylesheet:
  - style/style.mss
  - style/fonts.mss
  - style/landcover.mss
  - style/shapefiles.mss
  - style/water.mss
  - style/barriers.mss
  - style/roads.mss
  - style/water-features.mss
  - style/buildings.mss
  - style/ferry-routes.mss
  - style/road-colors-generated.mss
  - style/line-widths-generated.mss
  - style/entrances.mss
  - style/golf.mss
  - style/aerialways.mss
  - style/admin.mss
  - style/amenity-points.mss
  - style/power.mss
  - style/placenames.mss
  - style/symbols-labels-generated.mss
  - style/addressing.mss
Layer:
  - id: landcover-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, way_pixels,
            COALESCE(wetland, landuse, "natural") AS feature
          FROM (SELECT
              way,                                                  
              ('landuse_' || (CASE WHEN landuse IN ('forest', 'farmland', 'residential', 'commercial', 'retail', 'industrial',
                                                    'meadow', 'grass', 'village_green', 'vineyard', 'orchard', 'plant_nursery', 'allotments', 'railway', 'quarry') THEN landuse END)) AS landuse,
              ('natural_' || (CASE WHEN "natural" IN ('wood', 'sand', 'scree', 'shingle', 'bare_rock', 'beach', 'heath', 'grassland', 'scrub') THEN "natural" ELSE NULL END)) AS "natural",
              ('wetland_' || (CASE WHEN "natural" IN ('wetland', 'mud') THEN (CASE WHEN "natural" IN ('mud') THEN "natural" ELSE tags->'wetland' END) ELSE NULL END)) AS wetland,
              way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
            FROM planet_osm_polygon
            WHERE (landuse IN ('forest', 'farmland', 'residential', 'commercial', 'retail', 'industrial', 'meadow', 'grass', 'village_green', 'vineyard', 'orchard', 'plant_nursery', 'allotments', 'railway', 'quarry')
              OR "natural" IN ('wood', 'wetland', 'mud', 'sand', 'scree', 'shingle', 'bare_rock', 'beach', 'heath', 'grassland', 'scrub'))
              AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
              AND building IS NULL
            ORDER BY COALESCE(layer,0), way_area DESC
          ) AS features
        ) AS landcover_low_zoom
    properties:
      cache-features: true
      minzoom: 5
      maxzoom: 9
  - id: landcover
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            religion,
            crop,
            surface,
            sport,
            int_parking_space,
            CASE WHEN int_parking_space = 'private' THEN 'ðŸ›‡' ELSE capacity END AS int_parking_label,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            feature
          FROM (SELECT
              way,
              religion,
              crop,
              CASE WHEN amenity IN ('aeroway_apron', 'amenity_parking', 'amenity_bicycle_parking', 'amenity_motorcycle_parking', 'amenity_parking_space') THEN
                CASE
                  WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                   'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'::text
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                   'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'::text
                  ELSE 'unknown'::text
                END
              ELSE
                surface
              END AS surface,
              sport,
              int_parking_space,
              capacity,
              way_area,
              layer,
              COALESCE(aeroway, golf, amenity, wetland, power, landuse, leisure, "natural", tourism, highway, railway) AS feature
            FROM (SELECT
                way, carto_label_name(way, name, tags, E'\n') AS name_label,
                ('aeroway_' || (CASE WHEN aeroway IN ('apron', 'aerodrome') THEN aeroway ELSE NULL END)) AS aeroway,
                ('golf_' || (CASE WHEN (tags->'golf') IN ('rough', 'fairway', 'driving_range', 'water_hazard', 'green', 'bunker') THEN tags->'golf' ELSE NULL END)) AS golf,
                ('amenity_' || (CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'parking_space', 'university', 'college', 'school',
                                                      'hospital', 'kindergarten', 'grave_yard', 'prison', 'place_of_worship', 'clinic')
                                                      THEN amenity ELSE NULL END)) AS amenity,
                ('landuse_' || (CASE WHEN landuse IN ('quarry', 'vineyard', 'orchard', 'cemetery', 'residential', 'garages', 'meadow', 'grass',
                                                      'allotments', 'forest', 'farmyard', 'farmland', 'flowerbed', 'greenhouse_horticulture',
                                                      'recreation_ground', 'village_green', 'retail', 'industrial', 'railway', 'commercial',
                                                      'brownfield', 'landfill', 'construction', 'plant_nursery', 'salt_pond') THEN landuse ELSE NULL END)) AS landuse,
                ('leisure_' || (CASE WHEN leisure IN ('swimming_pool', 'playground', 'park', 'recreation_ground', 'common', 'garden',
                                                      'golf_course', 'miniature_golf', 'picnic_table', 'fitness_centre', 'sports_centre', 'stadium', 'pitch',
                                                      'track', 'dog_park') THEN leisure ELSE NULL END)) AS leisure,
                ('natural_' || (CASE WHEN "natural" IN ('beach', 'shoal', 'heath', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub') THEN "natural" ELSE NULL END)) AS "natural",
                ('wetland_' || (CASE WHEN "natural" IN ('wetland', 'mud') THEN (CASE WHEN "natural" IN ('mud') THEN "natural" ELSE tags->'wetland' END) ELSE NULL END)) AS wetland,
                ('power_' || (CASE WHEN power IN ('station', 'sub_station', 'substation', 'generator') THEN power ELSE NULL END)) AS power,
                ('tourism_' || (CASE WHEN tourism IN ('attraction', 'camp_site', 'caravan_site', 'picnic_site') THEN tourism ELSE NULL END)) AS tourism,
                ('highway_' || (CASE WHEN highway IN ('services', 'rest_area') THEN highway ELSE NULL END)) AS highway,
                ('railway_' || (CASE WHEN railway = 'station' THEN railway ELSE NULL END)) AS railway,
                CASE WHEN religion IN ('christian', 'jewish', 'muslim') THEN religion ELSE 'INT-generic'::text END AS religion,
                CASE WHEN landuse IN ('farmland') THEN tags->'crop' ELSE tags->'trees' END AS crop,
                CASE WHEN amenity IN ('parking_space') AND surface IS NULL AND z(!scale_denominator!) >= 19 THEN
                  -- this determines the surface of the enclosing parking area because we need that for the backfill single symbol pattern
                  (SELECT surface FROM planet_osm_polygon AS p2 WHERE ST_Intersects(p1.way,p2.way) AND amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking') AND surface IS NOT NULL ORDER BY way_area ASC LIMIT 1)
                ELSE surface
                END AS surface,
                (tags->'sport') AS sport,
                (tags->'parking') AS parking,
                CASE WHEN amenity IN ('parking_space') AND z(!scale_denominator!) >= 19 THEN
                  CASE 
                    WHEN (tags->'parking_space' IN('disabled')) OR (tags->'capacity:disabled' IN('yes')) OR ((tags->'capacity:disabled' ~ '^[0-9]{1,8}$') AND (tags->'capacity:disabled')::INTEGER > 0) THEN 'disabled'
                    WHEN tags->'parking_space' IN('bus') THEN 'bus'
                    WHEN tags->'parking_space' IN('charging') THEN 'charging'
                    WHEN (tags->'parking_space' IN('customers')) OR (access IN ('customers')) THEN 'shopping'
                    WHEN (tags->'parking_space' IN('private')) OR (access IN ('private', 'no')) THEN 'private'
                    WHEN (tags->'capacity' ~ '^[0-9]{1,4}$') AND ((tags->'capacity')::INTEGER > 1) THEN 'capacity'
                    ELSE NULL
                  END
                ELSE NULL
                END AS int_parking_space,
                (tags->'capacity') AS capacity,
                way_area, layer
              FROM planet_osm_polygon AS p1
              WHERE way && !bbox! AND (landuse IS NOT NULL
                OR leisure IS NOT NULL
                OR (tags->'golf') IS NOT NULL
                OR aeroway IN ('apron', 'aerodrome')
                OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'parking_space', 'university', 'college', 'school',
                               'hospital', 'kindergarten', 'grave_yard', 'place_of_worship', 'prison', 'clinic')
                OR "natural" IN ('beach', 'shoal', 'heath', 'mud', 'wetland', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub')
                OR power IN ('station', 'sub_station', 'substation', 'generator')
                OR tourism IN ('attraction', 'camp_site', 'caravan_site', 'picnic_site')
                OR highway IN ('services', 'rest_area')
                OR railway = 'station')
                AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
            ) AS landcover
            WHERE amenity != 'amenity_parking' OR parking IS NULL OR parking != 'lane' -- lane parking is rendered separately in the roads layer
          ) AS landcover_all
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS features
    properties:
      cache-features: true
      minzoom: 10
  - id: landcover-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE man_made = 'cutline'
        ) AS landcover_line
    properties:
    minzoom: 14
  - id: icesheet-poly
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM icesheet_polygons
        ) AS icesheet_polygons
    properties:
      minzoom: 4
  - id: water-lines-casing
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
          FROM planet_osm_line
          WHERE waterway IN ('stream', 'drain', 'ditch')
        ) AS water_lines_casing
    properties:
      minzoom: 12
  - id: water-areas-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            tags->'salt' as salt,
            tags->'glacier:type' as glacier_type,
            landuse,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock', 'riverbank')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('water', 'glacier'))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS water_areas_low_zoom
    properties:
      minzoom: 5
      maxzoom: 6
  - id: water-areas
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            tags->'salt' as salt,
            tags->'glacier:type' as glacier_type,
            landuse,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock', 'riverbank')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('water', 'glacier'))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS water_areas
    properties:
      minzoom: 7
  - id: ocean-low-zoom
    class: "ocean"
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM simplified_water_polygons
        ) AS ocean_low_zoom
    properties:
      minzoom: 5
      maxzoom: 6
  - id: ocean-lz
    class: "ocean"
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM simplified_water_polygons
        ) AS ocean_lz
    properties:
      minzoom: 7
      maxzoom: 9
  - id: ocean
    class: "ocean"
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM water_polygons
        ) AS ocean
    properties:
      minzoom: 10
  - id: landcover-water
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            surface,
            "natural",
            CASE WHEN "natural" IN ('mud') 
                THEN "natural" 
                ELSE CASE WHEN ("natural" = 'wetland' AND NOT tags ? 'wetland') 
                  THEN 'wetland' 
                  ELSE CASE WHEN ("natural" = 'wetland')
                    THEN tags->'wetland'
                    ELSE NULL
                    END 
                END
            END AS int_wetland,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE "natural" IN ('mud', 'wetland', 'beach', 'shoal', 'scree', 'shingle', 'bare_rock')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS landcover_water
    properties:
      minzoom: 7
  - id: water-lines-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal
          FROM planet_osm_line
          WHERE waterway = 'river'
        ) AS water_lines_low_zoom
    properties:
      minzoom: 8
      maxzoom: 11
  - id: water-lines
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            ('waterway_' || waterway) AS feature,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
            'no' AS int_bridge
          FROM planet_osm_line
          WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch')
            AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))
            ORDER BY
              COALESCE(layer,0),
              CASE WHEN waterway IN ('drain', 'ditch') THEN 1 WHEN waterway IN ('canal') THEN 2 ELSE 3 END
        ) AS water_lines
    properties:
      minzoom: 12
  - id: ocean-lz-backdrop
    class: "ocean-backdrop"
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM simplified_water_polygons
        ) AS ocean_lz
    properties:
      minzoom: 7
      maxzoom: 9
  - id: ocean-backdrop
    class: "ocean-backdrop"
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM water_polygons
        ) AS ocean
    properties:
      minzoom: 10
  - id: river-areas-backdrop
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('riverbank')
              OR ("natural" IN ('water') AND water IN ('river', 'canal')))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS river_areas_backdrop
    properties:
      minzoom: 7
  - id: saltwater-areas-backdrop
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            tags->'salt' as salt,
            landuse,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('water'))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            -- water = ocean is for testing only
            AND ((tags @> 'salt=>yes') OR water = 'ocean')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS saltwater_areas
    properties:
      minzoom: 7
  - id: water-areas-backdrop
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            ST_MakeEnvelope(-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244, 3857) AS way
        ) AS water_areas_backdrop
    properties:
      minzoom: 7
  - id: landcover-area-symbols
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE WHEN ("natural" in ('reef')) THEN tags->'reef' ELSE surface END AS surface,
            COALESCE(CASE WHEN landuse = 'forest' THEN 'wood' ELSE NULL END, "natural") AS "natural",
            CASE WHEN "natural" IN ('mud') 
                THEN "natural" 
                ELSE CASE WHEN ("natural" = 'wetland' AND NOT tags ? 'wetland') 
                  THEN 'wetland' 
                  ELSE CASE WHEN ("natural" = 'wetland')
                    THEN tags->'wetland'
                    ELSE NULL
                    END
                END
            END AS int_wetland,
            tags->'leaf_type' AS leaf_type,
            tags->'leaf_cycle' AS leaf_cycle,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE ("natural" IN ('mud', 'wetland', 'wood', 'scrub', 'reef') OR landuse = 'forest')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS landcover_area_symbols
    properties:
      cache-features: true
      minzoom: 7
  - id: icesheet-outlines
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            ice_edge
          FROM icesheet_outlines
        ) AS icesheet_outlines
    properties:
      minzoom: 4
  - id: crevasse-area-lz
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_polygon
          WHERE "natural" IN ('crevasse')
        ) AS crevasse_area_lz
    properties:
      minzoom: 11
      maxzoom: 12
  - id: crevasse-line-lz
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE "natural" IN ('crevasse')
        ) AS crevasse_line_lz
    properties:
      minzoom: 11
      maxzoom: 12
  - id: crevasse
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_line
      table: |-
        (SELECT
            way,
            crevasse_class
          FROM
          (
            WITH lines_raw AS
            (SELECT
                way,
                osm_id,
                CASE
                  WHEN (width_px < 3.5) THEN 'tiny'
                  WHEN (width_px < 5.0) THEN 'small'
                  WHEN (width_px < 7.0) THEN 'medium'
                  WHEN (width_px < 12.0) THEN 'large'
                  ELSE 'huge'
                END AS crevasse_class,
                CASE
                  WHEN ST_Distance(ST_StartPoint(way), ST_EndPoint(way))/len < 0.666 THEN 3.0
                  WHEN (width_px > 7.0) THEN 5.0
                  ELSE 10.0
                END AS seg_len,
                width_px,
                (CASE WHEN (width_px < 7.0) THEN width_px ELSE (width_px-1.5) END)*NULLIF(!scale_denominator!*0.001*0.28,0) AS width,
                len
              FROM
                (SELECT
                    way,
                    osm_id,
                    carto_crevasse_drawing_width (width_tagged, !bbox!, len, !scale_denominator!) AS width_px,
                    len
                  FROM
                    (SELECT
                        way,
                        osm_id,
                        ST_Length(way)::numeric AS len,
                        tags->'width' AS width_tagged
                      FROM planet_osm_line
                      WHERE "natural" IN ('crevasse') AND (way && !bbox!)
                    ) AS _
                ) AS _
            ), -- line_raw
            points_offset AS
            (SELECT -- the outlines of the constructed polygons
                osm_id,
                MAX(crevasse_class) AS crevasse_class,
                ST_MakeLine(ST_LineInterpolatePoint(ST_OffsetCurve(way, carto_crevasse_profile_curve((CASE WHEN f <= 0.5 THEN 1.0-(f*2.0) ELSE f*2.0-1.0 END)::numeric)*width*0.5), f)) AS line1,
                ST_MakeLine(ST_LineInterpolatePoint(ST_OffsetCurve(way, -carto_crevasse_profile_curve((CASE WHEN f <= 0.5 THEN 1.0-(f*2.0) ELSE f*2.0-1.0 END)::numeric)*width*0.5), f)) AS line2
              FROM
                (SELECT
                    way,
                    osm_id,
                    ST_LineLocatePoint(way, (way_points).geom) AS f,
                    crevasse_class,
                    width
                  FROM
                    (SELECT
                        way,
                        osm_id,
                        ST_DumpPoints(way) AS way_points,
                        crevasse_class,
                        width
                      FROM
                        (SELECT
                            ST_Segmentize(way, seg_len*NULLIF(!scale_denominator!*0.001*0.28,0)) AS way,
                            osm_id,
                            crevasse_class,
                            width
                          FROM lines_raw
                          WHERE crevasse_class != 'tiny'
                        ) AS line_resampled
                    ) AS line_mod
                    ORDER BY osm_id, f
                ) AS line_points
              GROUP BY osm_id
            ), -- end points_offset
            crevasse_polygons_raw AS
            (SELECT -- the constructed polygons
                CASE WHEN crevasse_class IN ('large', 'huge') THEN
                  ST_Buffer(ST_BuildArea(ST_Collect(line1, line2)), 0.75*NULLIF(!scale_denominator!*0.001*0.28,0))
                ELSE
                  ST_BuildArea(ST_Collect(line1, line2))
                END AS way,
                osm_id,
                crevasse_class
              FROM points_offset
            UNION ALL
            SELECT -- the mapped polygons
                way,
                osm_id,
                CASE
                  WHEN (len_ref < 18.0) THEN 'polygon_medium'
                  WHEN (len_ref < 36.0) THEN 'polygon_large'
                  ELSE 'polygon_huge'
                END AS crevasse_class
              FROM
                (SELECT
                    way,
                    osm_id,
                    ST_Length(ST_Boundary(way)) / NULLIF(!scale_denominator!*0.001*0.28,0) AS len_ref
                  FROM planet_osm_polygon
                  WHERE "natural" IN ('crevasse') AND (way && !bbox!)
                ) AS _
            ), -- crevasse_polygons_raw
            crevasse_polygons_oriented AS
            (SELECT 
                ST_ForcePolygonCCW(way) AS way,
                osm_id,
                crevasse_class
              FROM crevasse_polygons_raw
            ) -- crevasse_polygons_oriented
            SELECT --  the non-isolated crevasse polygon outlines - clipped with the others
                CASE -- this distinction is done to keep the isolated crevasses as polygons (so the outline has no end artefact where it closes as it would as a linear way)
                  WHEN way_others IS NULL THEN
                    way
                  ELSE
                    ST_Difference(
                      ST_LineMerge(ST_Boundary(way)),
                      way_others
                    )
                END AS way,
                crevasse_class
              FROM
                (SELECT
                    way,
                    (SELECT
                        ST_Union(way)
                      FROM crevasse_polygons_oriented c2 WHERE c2.osm_id != c1.osm_id AND ST_Intersects(c2.way, c1.way)
                    ) AS way_others,
                    crevasse_class
                  FROM crevasse_polygons_oriented c1) AS _
            UNION ALL
            SELECT -- the centerlines
                way,
                'center_' || crevasse_class AS crevasse_class
              FROM lines_raw
          ) AS _
        ) AS crevasse
    properties:
      minzoom: 13
  - id: cliffs
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(int_natural, man_made) AS feature
          FROM
            (SELECT
                CASE
                  WHEN "natural" IN ('cliff') THEN
                    ST_OffsetCurve(
                      ST_OffsetCurve(way, 1.0*NULLIF(!scale_denominator!*0.001*0.28,0)),
                      -2.0*NULLIF(!scale_denominator!*0.001*0.28,0)
                    )
                  ELSE
                    way
                END AS way,
                ('natural_' || 
                  (CASE WHEN "natural" IN ('cliff', 'earth_bank') THEN
                    (CASE
                      WHEN "natural" IN ('cliff') THEN (CASE WHEN surface = 'ice' THEN 'icecliff' ELSE 'cliff' END)
                      WHEN "natural" IN ('earth_bank') THEN (CASE WHEN tags @> 'earth_bank=>grassy_steep_slope' THEN 'earth_bank_grass' ELSE 'earth_bank' END)
                      ELSE "natural" END
                    )
                  ELSE NULL END)
                ) AS int_natural,
                ('man_made_' || (CASE WHEN man_made IN ('embankment') THEN man_made ELSE NULL END)) AS man_made
              FROM planet_osm_line
              WHERE ("natural" IN ('cliff', 'crevasse', 'earth_bank') OR man_made = 'embankment')
                AND way && !bbox!
             UNION ALL
             SELECT
                ST_OffsetCurve(
                  ST_Difference(
                    ST_OffsetCurve(way, 0.5*(width_px-0.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                    COALESCE(
                      (SELECT ST_Union(ST_Buffer(way, 0.5*(width_px-0.49)*NULLIF(!scale_denominator!*0.001*0.28,0)))
                         FROM planet_osm_line l2
                         WHERE "natural" IN ('gully')
                           AND ST_DWithin(l1.way, l2.way, 0.1)
                           AND l1.osm_id != l2.osm_id
                      ),
                      ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                    )
                  ),
                  -(0.5*(width_px-0.5)-2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)
                ) AS way,
                'natural_gully_left' AS int_natural,
                NULL AS man_made
              FROM
                (SELECT
                  way,
                  carto_barrier_line_width("natural", z(!scale_denominator!)) AS width_px,
                  osm_id
                  FROM planet_osm_line
                  WHERE "natural" IN ('gully')
                    AND way && !bbox!
                ) AS l1
             UNION ALL
             SELECT
                ST_OffsetCurve(
                  ST_Difference(
                    ST_OffsetCurve(way, -0.5*(width_px-0.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                    COALESCE(
                      (SELECT ST_Union(ST_Buffer(way, 0.5*(width_px-0.49)*NULLIF(!scale_denominator!*0.001*0.28,0)))
                         FROM planet_osm_line l2
                         WHERE "natural" IN ('gully')
                           AND ST_DWithin(l1.way, l2.way, 0.1)
                           AND l1.osm_id != l2.osm_id
                      ),
                      ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                    )
                  ),
                  (0.5*(width_px-0.5)-2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)
                ) AS way,
                'natural_gully_right' AS int_natural,
                NULL AS man_made
              FROM
                (SELECT
                  way,
                  carto_barrier_line_width("natural", z(!scale_denominator!)) AS width_px,
                  osm_id
                  FROM planet_osm_line
                  WHERE "natural" IN ('gully')
                    AND way && !bbox!
                ) AS l1
             UNION ALL
             SELECT
                ST_Difference(
                  CASE WHEN "natural" IN ('arete') THEN
                    ST_OffsetCurve(
                      ST_OffsetCurve(
                        ST_OffsetCurve(way, 2.0*NULLIF(!scale_denominator!*0.001*0.28,0), 'quad_segs=16 join=round'),
                        -4.0*NULLIF(!scale_denominator!*0.001*0.28,0), 'quad_segs=16 join=round'
                      ),
                      2.0*NULLIF(!scale_denominator!*0.001*0.28,0), 'quad_segs=16 join=round'
                    )
                  ELSE
                    way
                  END,
                  COALESCE(
                    (SELECT ST_Union(ST_Buffer(way, 6*NULLIF(!scale_denominator!*0.001*0.28,0)))
                       FROM planet_osm_point p
                       WHERE ("natural" IN ('peak', 'volcano', 'saddle') OR (tags @> 'mountain_pass=>yes'))
                         AND ST_DWithin(l.way, p.way, 6*NULLIF(!scale_denominator!*0.001*0.28,0))
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                ) AS way,
                ('natural_' || "natural") AS int_natural,
                NULL AS man_made
              FROM planet_osm_line l
              WHERE "natural" IN ('ridge', 'arete')
                AND l.way && !bbox!
            ) AS _
        ) AS cliffs
    properties:
      minzoom: 13
  - id: natural-linecaps
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            ST_StartPoint(way) AS way,
            DEGREES(ST_Azimuth(ST_PointN(way, 2), ST_StartPoint(way)))+90.0 AS angle,
            'natural_gully_start' AS feature
          FROM planet_osm_line l1
          WHERE "natural" IN ('gully')
            AND l1.way && !bbox!
            AND ST_StartPoint(l1.way) && !bbox!
            AND NOT EXISTS (SELECT 1 FROM planet_osm_line l2 WHERE "natural" IN ('gully') AND ST_DWithin(l2.way, ST_StartPoint(l1.way), 0.1) AND l1.osm_id != l2.osm_id)
        UNION ALL
        SELECT
            ST_StartPoint(way) AS way,
            DEGREES(ST_Azimuth(ST_PointN(way, 2), ST_StartPoint(way)))+90.0 AS angle,
            'natural_ridge_start' AS feature
          FROM planet_osm_line l1
          WHERE "natural" IN ('ridge')
            AND l1.way && !bbox!
            AND ST_StartPoint(l1.way) && !bbox!
            AND NOT EXISTS (SELECT 1 FROM planet_osm_line l2 WHERE "natural" IN ('ridge', 'arete') AND ST_DWithin(l2.way, ST_StartPoint(l1.way), 0.1) AND l1.osm_id != l2.osm_id)
            AND NOT EXISTS
              (SELECT 1 FROM planet_osm_point p
                WHERE ("natural" IN ('peak', 'volcano', 'saddle') OR (tags @> 'mountain_pass=>yes'))
                  AND ST_DWithin(ST_StartPoint(l1.way), p.way, 6*NULLIF(!scale_denominator!*0.001*0.28,0)))
        UNION ALL
        SELECT
            ST_EndPoint(way) AS way,
            DEGREES(ST_Azimuth(ST_PointN(way, -2), ST_EndPoint(way)))-90.0 AS angle,
            'natural_ridge_end' AS feature
          FROM planet_osm_line l1
          WHERE "natural" IN ('ridge')
            AND l1.way && !bbox!
            AND ST_EndPoint(l1.way) && !bbox!
            AND NOT EXISTS (SELECT 1 FROM planet_osm_line l2 WHERE "natural" IN ('ridge', 'arete') AND ST_DWithin(l2.way, ST_EndPoint(l1.way), 0.1) AND l1.osm_id != l2.osm_id)
            AND NOT EXISTS
              (SELECT 1 FROM planet_osm_point p
                WHERE (p."natural" IN ('peak', 'volcano', 'saddle') OR (p.tags @> 'mountain_pass=>yes'))
                  AND ST_DWithin(ST_EndPoint(l1.way), p.way, 6*NULLIF(!scale_denominator!*0.001*0.28,0)))
        ) AS natural_linecaps
    properties:
      minzoom: 13
  - id: highway-embankments
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_line
      table: |-
        (SELECT
            ST_Difference(
              l.oline,
              -- this clips the embankment/cutting outlines with the adjacent lines that are not embankment/cutting
              (SELECT
                  COALESCE(
                    ST_Union(
                      CASE WHEN (side_widths[1] = side_widths[2]) THEN
                        ST_Buffer(ST_Intersection(o.way, l.way), (0.5*o.width_px_base + o.side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      ELSE -- separate buffering of both sides with different width
                        ST_Union(
                          ST_Intersection(
                            ST_Buffer(ST_Intersection(o.way, l.way), (0.5*o.width_px_base + o.side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(o.way, -0.25*width_px_base*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*o.width_px_base + GREATEST(o.side_widths[1],o.side_widths[2]) + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          ),
                          ST_Intersection(
                            ST_Buffer(ST_Intersection(o.way, l.way), (0.5*o.width_px_base + o.side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(o.way, 0.25*o.width_px_base*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*o.width_px_base + GREATEST(o.side_widths[1],o.side_widths[2]) + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          )
                        )
                      END
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                FROM 
                  (SELECT
                      o.way AS way,
                      CASE WHEN o.barrier = 'hedge' THEN
                        GREATEST(
                          carto_highway_line_width(COALESCE(o.highway, o.railway, o.waterway, o.man_made, o.barrier), o.service, z(!scale_denominator!)),
                          LEAST(carto_treerow_line_width_mapped(o.barrier, o.tags->'width', o.tags->'height', !bbox!, !scale_denominator!), 60)
                        )
                      ELSE
                        GREATEST(
                          carto_highway_line_width(COALESCE(o.highway, o.railway, o.waterway, o.man_made, o.barrier), o.service, z(!scale_denominator!)),
                          carto_highway_line_width_mapped(
                            o.highway, 
                            CASE WHEN o.man_made = 'dyke' THEN NULL ELSE o.tags->'width:carriageway' END,
                            CASE WHEN o.man_made = 'dyke' THEN NULL ELSE o.tags->'width' END,
                            o.tags->'lanes',
                            o.tags->'parking:both',
                            o.tags->'parking:right',
                            o.tags->'parking:left',
                            !bbox!, 
                            !scale_denominator!
                          )
                        )
                      END AS width_px_base,
                      CASE WHEN o.highway IS NOT NULL AND z(!scale_denominator!) >= 18 THEN
                        carto_highway_side_widths(o.way, o.tags, CASE WHEN o.oneway IN ('yes', '-1') THEN oneway ELSE 'no' END, z(!scale_denominator!))
                      ELSE
                        ARRAY[0.0, 0.0]
                      END AS side_widths
                    FROM planet_osm_line o
                    WHERE (o.highway IS NOT NULL OR o.railway IS NOT NULL OR o.man_made = 'dyke' OR o.barrier = 'hedge' OR o.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')) AND
                      carto_highway_line_width(COALESCE(o.highway, o.railway, o.waterway, o.man_made, o.barrier), o.service, z(!scale_denominator!)) > 0.0 AND
                      ST_DWithin(l.cline, o.way, 0.1) AND
                      o.way && ST_Expand(!bbox!, (0.5*carto_highway_line_width('motorway', z(!scale_denominator!)) + 10.0)*NULLIF(!scale_denominator!*0.001*0.28,0)) AND
                      (
                        (l.type = 'cutting' AND NOT(o.tags @> 'cutting=>yes')) OR
                        (l.type = 'embankment' AND NOT(o.tags @> 'embankment=>yes')) OR
                        (l.type = 'hedge_bank' AND NOT(o.tags @> 'hedge=>hedge_bank')) OR
                        ((l.type = 'dyke_left' OR l.type = 'dyke_right') AND 
                         (
                           (o.man_made IS NULL OR o.man_made NOT IN ('dyke')) OR
                           (l.embankment_width != (CASE WHEN o.man_made = 'dyke' THEN carto_dyke_side_width_mapped (o.tags->'width', !bbox!, !scale_denominator!) ELSE NULL END))
                         )
                        )
                      )
                  ) AS o
              )
            ) AS way,
            "type",
            (CASE 
              WHEN "type" = 'dyke_left' THEN ROUND(2.0*embankment_width-0.5*width_px-1.0 - GREATEST(1.0, embankment_width*0.16))
              WHEN "type" = 'dyke_right' THEN ROUND(2.0*embankment_width-0.5*width_px-1.0 + GREATEST(1.0, embankment_width*0.16))
              ELSE NULL 
            END) AS width
          FROM
            -- this queries the lines with embankment/cutting and buffers + aggregates them separately for embankment and cutting
            (WITH embankments AS
            (SELECT
                way AS cline,
                CASE
                  WHEN (width_px_base + GREATEST(side_widths[1],side_widths[2])) > 0.0 THEN
                    CASE
                      WHEN (side_widths[1] = side_widths[2]) THEN
                        ST_Buffer(way, (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      WHEN (side_widths[1] > side_widths[2]) THEN
                        ST_Union(
                          ST_Intersection(
                            ST_Buffer(way, (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(way, -(0.5*width_px_base + (side_widths[2] + (((0.5*width_px_base + side_widths[1])-(0.5*width_px_base + side_widths[2]))/((0.5*width_px_base + side_widths[1])+(0.5*width_px_base + side_widths[2])))*(side_widths[1]-side_widths[2])))*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          ),
                          ST_Buffer(way, (0.5*width_px_base + side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))
                        )
                      WHEN (side_widths[1] < side_widths[2]) THEN
                        ST_Union(
                          ST_Buffer(way, (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                          ST_Intersection(
                            ST_Buffer(way, (0.5*width_px_base + side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(way, (0.5*width_px_base + (side_widths[1] + (((0.5*width_px_base + side_widths[2])-(0.5*width_px_base + side_widths[1]))/((0.5*width_px_base + side_widths[1])+(0.5*width_px_base + side_widths[2])))*(side_widths[2]-side_widths[1])))*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*width_px_base + side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          )
                        )
                    END
                ELSE
                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                END AS way,
                width_px_base + 2.0*GREATEST(side_widths[1], side_widths[2]) AS width_px,
                "type",
                width_tagged
              FROM 
                (SELECT
                    way,
                    GREATEST(
                      carto_highway_line_width(COALESCE(highway, railway, waterway, man_made, barrier), service, z(!scale_denominator!)),
                      -- dykes have a width dependent pattern so the tagged width goes in there and not here
                      carto_highway_line_width_mapped(
                        highway,
                        CASE WHEN man_made = 'dyke' THEN NULL ELSE tags->'width:carriageway' END,
                        CASE WHEN man_made = 'dyke' THEN NULL ELSE tags->'width' END,
                        tags->'lanes',
                        tags->'parking:both',
                        tags->'parking:right',
                        tags->'parking:left',
                        !bbox!,
                        !scale_denominator!
                      )
                    ) AS width_px_base,
                    CASE WHEN z(!scale_denominator!) >= 18 THEN
                      carto_highway_side_widths(way, tags, CASE WHEN oneway IN ('yes', '-1') THEN 'yes' ELSE 'no' END, !scale_denominator!)
                    ELSE
                      ARRAY[0.0, 0.0]
                    END AS side_widths,
                    (CASE
                       WHEN (tags @> 'cutting=>yes') THEN 'cutting'
                       WHEN (man_made = 'dyke') THEN 'dyke'
                       WHEN (barrier = 'hedge') THEN 'hedge_bank'
                       ELSE 'embankment'
                    END) AS "type",
                    tags->'width' AS width_tagged
                  FROM planet_osm_line
                  WHERE ((man_made = 'dyke') OR (barrier = 'hedge' AND (tags @> 'hedge=>hedge_bank')) OR
                    ((highway IS NOT NULL OR railway IS NOT NULL OR (man_made = 'dyke') OR waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
                    AND ((tags @> 'embankment=>yes') OR (tags @> 'cutting=>yes'))))
                    AND way && ST_Expand(!bbox!, (0.5*carto_highway_line_width('motorway', z(!scale_denominator!)) + 10.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                ) AS _
            )
            SELECT -- the normal implicit embankments/cuttings
                way,
                ST_Boundary(way) AS oline,
                cline,
                "type",
                NULL AS width_px,
                NULL AS embankment_width
              FROM
                (SELECT
                    ST_Union(way) AS way,
                    ST_Collect(cline) AS cline,
                    "type"
                  FROM embankments
                  WHERE "type" != 'dyke' AND width_px > 0.0
                  GROUP BY "type"
                ) AS _
            UNION ALL
            SELECT -- dykes left side
                ST_Union(way) AS way,
                ST_Collect(ST_OffsetCurve(cline, (0.5*width_px + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))) AS oline,
                ST_Collect(cline) AS cline,
                'dyke_left' AS "type",
                width_px,
                carto_dyke_side_width_mapped (width_tagged, !bbox!, !scale_denominator!) AS embankment_width
              FROM embankments
              WHERE "type" = 'dyke' AND width_px > 0.0
              GROUP BY "type", embankment_width, width_px
            UNION ALL
            SELECT -- dykes right side
                ST_Union(way) AS way,
                ST_Collect(ST_Reverse(ST_OffsetCurve(cline, -(0.5*width_px + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)))) AS oline,
                ST_Collect(cline) AS cline,
                'dyke_right' AS "type",
                width_px,
                carto_dyke_side_width_mapped (width_tagged, !bbox!, !scale_denominator!) AS embankment_width
              FROM embankments
              WHERE "type" = 'dyke' AND width_px > 0.0
              GROUP BY "type", embankment_width, width_px
            ) AS l
        ) AS highway_embankments
    properties:
      minzoom: 16
  - id: marinas-area
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_polygon
          WHERE leisure = 'marina'
        ) AS marinas_area
    properties:
      minzoom: 14
  - id: water-barriers-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (-- All of this assumes a metric coordinate system, won't work with geographic coordinates
         -- This is the full complexity version of the water-barrier rendering which is relatively slow
         -- First query: barriers mapped using ways not intersecting a waterway
         SELECT
            way,
            waterway,
            'line' AS wtype
          FROM planet_osm_line b
          WHERE waterway IN ('dam', 'weir', 'lock_gate') AND (b.way && !bbox!)
          AND NOT EXISTS
            (SELECT 1 FROM planet_osm_line l WHERE ST_Intersects(b.way, l.way)
              AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
         UNION ALL
         -- Second query: barriers mapped using ways intersecting a waterway
         SELECT
            way,
            waterway,
            wtype
          FROM
          ( -- This aggregates all barrier ways intersecting at a common point
            WITH barriers_grouped AS
            (SELECT DISTINCT ON (osm_id)
                barrier,
                ST_LineSubstring(
                  line,
                  GREATEST(0.0, ST_LineLocatePoint(line, point)-1.0/ST_Length(line)),
                  LEAST(1.0, ST_LineLocatePoint(line, point)+1.0/ST_Length(line))) AS line,
                point,
                waterway,
                wtype,
                contructed_width,
                mapped_width,
                angle
              FROM
                (SELECT
                    MIN(b.osm_id) AS osm_id,
                    ST_LineMerge(ST_Collect(b.way)) AS barrier,
                    l.way AS line,
                    ST_PointOnSurface(ST_Intersection(ST_LineMerge(ST_Collect(b.way)), l.way)) AS point,
                    MIN(b.waterway) AS waterway,
                    MIN(l.waterway) AS wtype,
                    MAX(carto_waterway_line_width(l.waterway, z(!scale_denominator!)) +
                      (CASE WHEN l.waterway IN ('river', 'canal') THEN 0 ELSE 0.5 END)) *
                        NULLIF(!scale_denominator!*0.001*0.28,0) AS contructed_width,
                    SUM(ST_Length(b.way)) AS mapped_width,
                    (CASE WHEN MIN(b.waterway) = 'lock_gate' THEN pi()/2.3 ELSE pi()/2 END) AS angle
                  FROM planet_osm_line b
                  JOIN planet_osm_line l ON ST_Intersects(b.way, l.way)
                  WHERE b.waterway IN ('dam', 'weir', 'lock_gate') AND (b.way && !bbox!)
                    AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                  GROUP BY ST_Intersection(b.way, l.way), l.way
                ) AS barriers
                ORDER BY osm_id, contructed_width DESC,
                  ST_LineLocatePoint(line, point) ASC -- this gives downstream waterways priority
            ) -- end barriers_grouped
            -- directly render the way if the mapped size is larger than the contrcted alternative (high zoom)
            SELECT
                barrier AS way,
                waterway,
                wtype
              FROM barriers_grouped WHERE contructed_width <= mapped_width
            UNION ALL
            -- render the barrier line contructed from intersection point (low zoom)
            SELECT
                ST_MakeLine(ARRAY[
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 3857), -angle, point),
                  point,
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 3857), angle, point)
                ]) AS way,
                waterway,
                wtype
              FROM barriers_grouped WHERE contructed_width > mapped_width
          ) AS blines
         UNION ALL
         -- Third query: barriers mapped using polygons not intersecting a waterway
         SELECT
            way,
            waterway,
            'polygon' AS wtype
          FROM planet_osm_polygon b
          WHERE waterway IN ('dam', 'weir', 'lock_gate') AND (b.way && !bbox!)
          AND NOT EXISTS
            (SELECT 1 FROM planet_osm_line l WHERE ST_Intersects(b.way, l.way)
              AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
         UNION ALL
         -- Fourth query: barriers mapped using polygons intersecting a waterway
         SELECT
            way,
            waterway,
            wtype
          FROM
          (
            WITH barriers_grouped AS
            (SELECT DISTINCT ON (osm_id)
                osm_id,
                barrier,
                waterarea,
                ST_LineSubstring(
                  line,
                  GREATEST(0.0, ST_LineLocatePoint(line, point)-1.0/ST_Length(line)),
                  LEAST(1.0, ST_LineLocatePoint(line, point)+1.0/ST_Length(line))) AS line,
                line AS line_orig,
                point,
                waterway,
                wtype,
                contructed_width,
                -- ST_Length(ST_Intersection(ST_Boundary(barrier), waterarea)) AS linear_width,
                polygon_width,
                angle
              FROM
                (SELECT
                    MIN(b.osm_id) AS osm_id,
                    ST_Collect(b.way) AS barrier,
                    (SELECT
                        ST_Union(w.way)
                      FROM planet_osm_polygon w
                      WHERE
                        (w.waterway IN ('dock', 'riverbank')
                          OR w.landuse IN ('reservoir', 'basin')
                          OR w."natural" IN ('water', 'glacier'))
                        AND w.building IS NULL
                        AND ST_Intersects(w.way, ST_Collect(b.way))
                    ) AS waterarea,
                    l.way AS line,
                    (ST_Dump(ST_Intersection(ST_Boundary(b.way), l.way))).geom AS point,
                    MIN(b.waterway) AS waterway,
                    MIN(l.waterway) AS wtype,
                    MAX(carto_waterway_line_width(l.waterway, z(!scale_denominator!)) +
                      (CASE WHEN l.waterway IN ('river', 'canal') THEN 0 ELSE 0.5 END)) *
                        NULLIF(!scale_denominator!*0.001*0.28,0) AS contructed_width,
                    MAX(ST_Length(ST_BoundingDiagonal(b.way))) AS polygon_width,
                    (CASE WHEN MIN(b.waterway) = 'lock_gate' THEN pi()/2.3 ELSE pi()/2 END) AS angle
                  FROM planet_osm_polygon b
                  JOIN planet_osm_line l ON ST_Intersects(ST_Boundary(b.way), l.way)
                  WHERE b.waterway IN ('dam') AND (b.way && !bbox!)
                    AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                  GROUP BY ST_Intersection(ST_Boundary(b.way), l.way), l.way
                ) AS barriers
                ORDER BY osm_id, contructed_width DESC,
                  ST_LineLocatePoint(line, point) ASC
            ) -- end barriers_grouped
            -- large enough polygon - render directly
            SELECT
                barrier AS way,
                waterway,
                'polygon' AS wtype
              FROM barriers_grouped
              WHERE polygon_width >= 2.5*contructed_width
            UNION ALL
            -- has intersecting water areas and medium size polygon - render linear representation
            (SELECT DISTINCT ON (osm_id)
                way,
                waterway,
                wtype
              FROM
                (SELECT
                    osm_id,
                    (ST_Dump(ST_CollectionExtract(ST_Intersection(way, line_orig), 1))).geom AS point,
                    line_orig,
                    way,
                    waterway,
                    wtype
                  FROM
                    (SELECT
                        osm_id,
                        (ST_Dump(ST_CollectionExtract(ST_Intersection(ST_Boundary(barrier), waterarea), 2))).geom AS way,
                        line_orig,
                        waterway,
                        wtype
                      FROM barriers_grouped
                      WHERE (waterarea IS NOT NULL AND polygon_width < 2.5*contructed_width AND polygon_width >= contructed_width)
                    ) AS bparts
                ) AS bparts2
              -- this selects the first part of the intersection between barrier polygon and water area
              -- in waterway direction
              ORDER BY osm_id, ST_LineLocatePoint(line_orig, point) ASC)
            UNION ALL
            -- no intersecting water areas and polygon medium or small - treat as node
            -- has intersecting water areas and polygon small - treat as node
            SELECT
                ST_MakeLine(ARRAY[
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 3857), -angle, point),
                  point,
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 3857), angle, point)
                ]) AS way,
                waterway,
                wtype
              FROM barriers_grouped
                WHERE (waterarea IS NULL AND polygon_width < 2.5*contructed_width)
                  OR (waterarea IS NOT NULL AND polygon_width < contructed_width)
          ) AS bpolys
         UNION ALL
         -- Fifth query: barriers mapped using nodes on a waterway
         SELECT
             ST_MakeLine(ARRAY[
               ST_Rotate(
                 ST_SetSRID(ST_MakePoint(
                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
               ), 3857), -angle, point),
               point,
               ST_Rotate(
                 ST_SetSRID(ST_MakePoint(
                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
               ), 3857), angle, point)
             ]) AS way,
             waterway,
             wtype
           FROM
             -- outer query: points with either nominal contructed waterway width or riverbank width
             (SELECT
                 point,
                 line,
                 waterway,
                 wtype,
                 GREATEST(
                   contructed_width,
                   -- this selects only the center part of the multilinestring returned
                   -- by the inner select (in case of large and complex water polygons)
                   (SELECT
                       ST_Length(geom)
                     FROM
                       -- this selects the part of a line orthogonal to the waterway
                       -- ten times the nominal contructed waterway width that intersects
                       -- the water polygon intersecting the barrier point
                       (SELECT
                           (ST_Dump(ST_Intersection(
                             ST_Union(poly.way),
                             ST_MakeLine(ARRAY[
                               ST_Rotate(
                                 ST_SetSRID(ST_MakePoint(
                                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*5/ST_Length(line),
                                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*5/ST_Length(line)
                               ), 3857), -pi()/2, point),
                               ST_Rotate(
                                 ST_SetSRID(ST_MakePoint(
                                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*5/ST_Length(line),
                                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*5/ST_Length(line)
                               ), 3857), pi()/2, point)
                             ])))).geom AS geom
                         FROM planet_osm_polygon poly
                         WHERE (waterway IN ('dock', 'riverbank') OR landuse IN ('reservoir', 'basin') OR "natural" IN ('water'))
                           AND ST_Intersects(poly.way, point) AND (poly.way && !bbox!)
                       ) AS line_segments
                     WHERE ST_DWithin(geom, point, 0.1) ORDER BY ST_Length(geom) DESC LIMIT 1
                   )
                 ) AS contructed_width,
                 angle
               FROM
                 -- inner query: points with nominal contructed waterway width
                 (SELECT DISTINCT ON (p.osm_id)
                     p.way AS point,
                     ST_LineSubstring(
                       l.way,
                       GREATEST(0.0, ST_LineLocatePoint(l.way, p.way)-1.0/ST_Length(l.way)),
                       LEAST(1.0, ST_LineLocatePoint(l.way, p.way)+1.0/ST_Length(l.way))) AS line,
                     p.waterway AS waterway,
                     l.waterway AS wtype,
                     (carto_waterway_line_width(l.waterway, z(!scale_denominator!)) +
                       (CASE WHEN p.waterway =  'waterfall' THEN 2 ELSE 0 END) +
                       (CASE WHEN l.waterway IN ('river', 'canal') THEN 0 ELSE 0.5 END)) *
                         NULLIF(!scale_denominator!*0.001*0.28,0) AS contructed_width,
                     (CASE WHEN p.waterway =  'lock_gate' THEN pi()/2.3 ELSE pi()/2 END) AS angle
                   FROM planet_osm_point p
                   JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 0.1)
                   WHERE p.waterway IN ('dam', 'weir', 'lock_gate', 'waterfall') AND (p.way && !bbox!)
                     AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                   ORDER BY p.osm_id, contructed_width DESC,
                     ST_LineLocatePoint(l.way, p.way) ASC -- this gives downstream waterways priority
                 ) AS plines
             ) AS plines2
          WHERE line IS NOT NULL
        ) AS water_barriers_line
    properties:
      minzoom: 11
  - id: springs-connected
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
          ST_Difference(ST_Buffer(point, (0.5*width + 1.0*(CASE WHEN width > 4.2 THEN 1.5 ELSE 1 END))*NULLIF(!scale_denominator!*0.001*0.28,0)), ST_Buffer(line, 0.5*width*NULLIF(!scale_denominator!*0.001*0.28,0))) AS way
          FROM ( -- subselect to avoid duplicating the line width
            SELECT
              p.way AS point,
              l.way AS line,
              carto_waterway_line_width(l.waterway, z(!scale_denominator!)) + 1.5 AS width
            FROM planet_osm_point p
            JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 0.1)
            WHERE p.natural IN ('spring', 'hot_spring') AND (p.way && !bbox!)
              AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
            ) AS features
        ) AS springs
    properties:
      minzoom: 14
  - id: piers-poly
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_polygon
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers_poly
    properties:
      minzoom: 12
  - id: piers-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_line
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers_line
    properties:
      minzoom: 12
  - id: bridge
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            man_made
          FROM planet_osm_polygon
          WHERE man_made = 'bridge'
        ) AS bridge
    properties:
      minzoom: 12
  - id: buildings
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            building,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE building IS NOT NULL
            AND building != 'no'
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS buildings
    properties:
      minzoom: 13
  - id: landuse-overlay-lz
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('landuse_' || landuse),
              ('military_' || military)
            ) AS feature,
            -- we use width for way_pixels here so it is identical to the column name 
            -- used in the roads layer where the higher zoom levels are rendered
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS width
          FROM planet_osm_polygon
          WHERE (landuse = 'military' OR military = 'danger_area')
            AND building IS NULL
        ) AS landuse_overlay
    properties:
      minzoom: 7
      maxzoom: 9
  - id: ferry-routes-lz
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE route = 'ferry'
        ) AS ferry_routes
    properties:
      minzoom: 7
      maxzoom: 9
  - id: roads-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_roads
      table: |-
        (SELECT
            way,
            road_layer,
            feature,
            int_surface,
            int_tunnel,
            int_bridge,
            link,
            width_nominal,
            width
          FROM
            (WITH roads_all AS
              (SELECT
                  way,
                  COALESCE(
                    ('highway_' || (CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway end)),
                    ('railway_' || (CASE WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' 
                                         WHEN railway IN ('rail', 'tram', 'light_rail', 'funicular', 'narrow_gauge') THEN railway ELSE NULL END))
                  ) AS feature,
                  CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                        'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                    WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                        'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                    ELSE NULL
                  END AS int_surface,
                  CASE WHEN tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes' THEN 'yes' ELSE 'no' END AS int_tunnel,
                  CASE WHEN bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct') THEN 'yes' ELSE 'no' END AS int_bridge,
                  CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes' ELSE 'no' END AS link,
                  carto_highway_line_width(COALESCE(highway, railway), z(!scale_denominator!)) AS width_nominal,
                  z_order,
                  osm_id
                FROM planet_osm_roads
                WHERE highway IS NOT NULL
                  OR (railway IS NOT NULL AND railway != 'preserved'
                    AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard'))))
              SELECT
                  way,
                  'casing' AS road_layer,
                  feature,
                  int_surface,
                  int_tunnel,
                  int_bridge,
                  link,
                  width_nominal,
                  0.0 AS width,
                  0.0 AS casing_width,
                  z_order,
                  osm_id
                FROM roads_all
              UNION ALL
              SELECT
                  way,
                  'fill' AS road_layer,
                  feature,
                  int_surface,
                  int_tunnel,
                  int_bridge,
                  link,
                  width_nominal,
                  0.0 AS width,
                  0.0 AS casing_width,
                  z_order,
                  osm_id
                FROM roads_all) AS features
          ORDER BY
            z_order,
            osm_id
        ) AS roads_low_zoom
    properties:
      minzoom: 5
      maxzoom: 9
  - id: roads
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_line
      # This is one of the most complex layers, so it bears explaining in some detail
      # It is necessary to
      # - Have roads and railways in the same layer to get ordering right
      # - Return two linestrings for ways which are both a road and railway
      # - Compute z_order here, rather than rely on osm2pgsql z_order
      table: &roads_sql |-
        (SELECT
            way,
            road_layer,
            feature,
            path_type,
            intermittent,
            seasonal,
            int_surface,
            int_tunnel,
            int_bridge,
            int_lanes,
            int_access,
            construction,
            service,
            link,
            tc_type,
            width_lane,
            width_nominal,
            width_max,
            width,
            casing_width
          FROM ( -- this wraps all the different road sublayers, most of which are mostly sourced from the same CTEs (roads_all, road_areas_all, tc_all)
            WITH roads_all AS -- roads_all is based on the classic roads-casing/roads-fill/bridges layers + junction polygons
            (SELECT
                way,
                (CASE WHEN substr(feature, length(feature)-4, 5) = '_link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
                path_type,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lane,
                int_lanes,
                int_junction,
                int_access,
                construction,
                service,
                link,
                width_lane,
                width_nominal,
                GREATEST(width_nominal, width_tagged) AS width_max,
                CASE WHEN (width_tagged > width_nominal) THEN width_tagged ELSE 0.0 END AS width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM ( -- begin "features" subselect that contains both roads and rail/aero
                WITH highways_raw AS
                -- this queries all roads from the database together with the corresponding width values
                -- to be used both directly and for the sidewalk geometries
                (
                  SELECT
                      way,
                      feature,
                      highway,
                      path_type,
                      int_surface,
                      int_tunnel,
                      int_bridge,
                      lanes_sides[1] AS int_lane_right,
                      lanes_sides[2] AS int_lane_left,
                      COALESCE(steps_type, (lanes_num+lanes_parking)::text || lane_markings) AS int_lanes,
                      lanes_sides[3] AS int_side_right,
                      lanes_sides[4] AS int_side_left,
                      int_access,
                      construction,
                      service,
                      link,
                      width_lane_cycle,
                      CASE WHEN z(!scale_denominator!) >= 18 THEN
                        LEAST(width_lane, GREATEST(width_nominal, width_tagged)/(lanes_num+lanes_parking) - 2.0*carto_casing_line_width(highway, int_bridge, z(!scale_denominator!)))
                      ELSE
                        0.0
                      END AS width_lane,
                      width_nominal,
                      width_tagged,
                      layernotnull,
                      osm_id,
                      z_order
                    FROM
                       (SELECT
                           way,
                           -- sidewalks and lanes are only rendered at z18+
                           CASE WHEN z(!scale_denominator!) >= 18 THEN
                             carto_highway_lanes_sides(way, tags, CASE WHEN oneway IN ('yes', '-1') THEN oneway ELSE 'no' END)
                           ELSE
                             ARRAY[NULL, NULL, NULL, NULL]
                           END AS lanes_sides,
                           ('highway_' || highway) AS feature, -- only motorway to tertiary links are accepted later on
                           highway,
                           carto_path_type(foot, bicycle, horse) AS path_type,
                           CASE
                             WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                              'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'::text
                             WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                              'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'::text
                             ELSE NULL
                           END AS int_surface,
                           CASE
                             WHEN (tunnel IN ('yes', 'building_passage', 'avalanche_protector') OR covered = 'yes') THEN 'yes'::text
                             WHEN (covered = 'yes') THEN 'yes'::text
                             ELSE 'no'::text
                           END AS int_tunnel,
                           CASE
                             WHEN (bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')) THEN 'yes'::text
                             WHEN (tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones') THEN 'ford'::text
                             ELSE 'no'::text
                           END AS int_bridge,
                           CASE
                             WHEN highway IN ('steps') THEN
                               CASE
                                 WHEN (tags @> 'ramp:bicycle=>yes') THEN 'ramp_bicycle'::text
                                 WHEN (tags @> 'ramp:stroller=>yes') THEN 'ramp_stroller'::text
                                 WHEN (tags @> 'ramp:wheelchair=>yes') THEN 'ramp_wheelchair'::text
                                 WHEN (tags @> 'handrail:center=>yes') THEN 'handrail'::text
                               ELSE ''::text END
                             ELSE
                               NULL
                           END AS steps_type,
                           CASE
                             WHEN (tags->'lanes') IN ('1', '2', '3', '4', '5', '6') THEN 
                               (tags->'lanes')::numeric
                             ELSE
                               CASE
                                 WHEN highway IN ('motorway', 'trunk') THEN 2
                                 WHEN oneway IN ('yes', '-1') THEN 1
                                 WHEN highway IN ('residential', 'tertiary', 'secondary', 'primary') THEN 2
                                 ELSE 1
                               END
                           END AS lanes_num,
                           CASE WHEN z(!scale_denominator!) >= 18 THEN
                             carto_highway_num_parking_lanes (tags->'parking:both', tags->'parking:right', tags->'parking:left')
                           ELSE
                             0
                           END AS lanes_parking,
                           CASE WHEN (tags @> 'lane_markings=>no') THEN 'u'::text ELSE ''::text END AS lane_markings,
                           carto_road_access(highway, access, tags->'vehicle', tags->'motor_vehicle', tags->'motorcar', bicycle, horse, foot, tags->'bus', tags->'psv') AS int_access,
                           construction,
                           CASE
                             WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text
                             ELSE 'INT-normal'::text
                           END AS service,
                           CASE
                             WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes'
                             ELSE 'no'
                           END AS link,
                           CASE WHEN z(!scale_denominator!) >= 18 THEN
                             GREATEST(carto_ground_to_px(2.5, !bbox!, !scale_denominator!), carto_highway_line_width('sidewalk', z(!scale_denominator!)))
                           ELSE
                             0.0
                           END AS width_lane,
                           CASE WHEN z(!scale_denominator!) >= 18 THEN
                             GREATEST(carto_ground_to_px(1.5, !bbox!, !scale_denominator!), carto_highway_line_width('sidewalk', z(!scale_denominator!)))
                           ELSE
                             0.0
                           END AS width_lane_cycle,
                           carto_highway_line_width(highway, service, z(!scale_denominator!)) AS width_nominal,
                           carto_highway_line_width_mapped(
                             highway,
                             tags->'width:carriageway',
                             tags->'width',
                             tags->'lanes',
                             tags->'parking:both',
                             tags->'parking:right',
                             tags->'parking:left',
                             !bbox!,
                             !scale_denominator!
                           ) AS width_tagged,
                           COALESCE(layer,0) AS layernotnull,
                           osm_id,
                           z_order
                         FROM planet_osm_line
                         WHERE way && !bbox!
                          AND
                          CASE
                            WHEN z(!scale_denominator!) <= 10 THEN
                              highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction')
                            WHEN z(!scale_denominator!) <= 11 THEN
                              highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction')
                            WHEN z(!scale_denominator!) <= 12 THEN
                              highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 'busway', 'bus_guideway', 'raceway')
                            WHEN z(!scale_denominator!) <= 13 THEN
                              highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 'cycleway', 'bridleway', 'steps')
                            ELSE highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 'cycleway', 'bridleway', 'steps', 'platform')
                          END
                      ) AS _
                ), -- end highways_raw CTE
                junctions AS
                (SELECT
                    -- for clipping away sidewalks not to be rendered
                    ST_Difference(junction_poly, junction_cut) AS clip,
                    -- for trimming the road line
                    bounds,
                    -- the remaining component to be rendered, clipped with extended bounds
                    CASE
                      WHEN feature in ('highway_steps') THEN ST_Buffer(ST_Intersection(junction_cut, bounds_ext), -casing_width)
                      ELSE ST_Intersection(junction_cut, bounds_ext)
                    END AS way,
                    feature,
                    path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    int_lane_right,
                    int_lane_left,
                    int_lanes,
                    int_side_right,
                    int_side_left,
                    int_access,
                    construction,
                    service,
                    link,
                    width_nominal,
                    width_tagged,
                    casing_width,
                    layernotnull,
                    osm_id,
                    z_order
                  FROM
                    (SELECT
                        way,
                        -- the extended bounds to clip the junction polygon with
                        -- ST_Buffer(center, width_max*0.75*NULLIF(!scale_denominator!*0.001*0.28,0)) AS bounds_ext,
                        ST_Intersection(
                          COALESCE(
                            ST_Buffer(ways_other, width_max*0.75*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                          ),
                          ST_Buffer(center, width_max*1.5*NULLIF(!scale_denominator!*0.001*0.28,0))
                        ) AS bounds_ext,
                        -- the bounds to trim the road line for rendering
                        ST_Intersection(
                          COALESCE(
                            ST_Buffer(ways_other, width_max*0.5*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                          ),
                          ST_Buffer(center, width_max*NULLIF(!scale_denominator!*0.001*0.28,0))
                        ) AS bounds,
                        junction_poly,
                        -- cut the Multipolygon (if this is a junction that needs special processing)
                        -- into its components
                        (ST_Dump(junction_poly)).geom AS junction_cut,
                        feature,
                        path_type,
                        int_surface,
                        int_tunnel,
                        int_bridge,
                        int_lane_right,
                        int_lane_left,
                        int_lanes,
                        int_side_right,
                        int_side_left,
                        int_access,
                        construction,
                        service,
                        link,
                        width_nominal,
                        width_tagged,
                        width_max,
                        casing_width,
                        layernotnull,
                        osm_id,
                        z_order
                      FROM
                        (SELECT
                            center,
                            way,
                            (SELECT
                                -- all intersection roads
                                ST_Union(h2x.way)
                               FROM highways_raw h2x 
                               WHERE ST_DWithin(junctions_raw.center, h2x.way, 0.1)
                                 AND (junctions_raw.width_tagged > h2x.width_tagged)
                                 AND (junctions_raw.width_tagged > h2x.width_nominal)
                            ) AS ways_other,
                            -- the buffered way minus the buffered (more narrow) intersecting ways form the base of the junction polygon
                            ST_Difference(
                              ST_Buffer(way, (width_max - 2.0*casing_width)*0.5*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              COALESCE(
                                (SELECT
                                    -- the cut is thinner than the buffered line to avoid agg rendering artefacts at the edge
                                    ST_Union(ST_Buffer(h2x.way, GREATEST(1.0, GREATEST(h2x.width_nominal, h2x.width_tagged)-1.5)*0.5*NULLIF(!scale_denominator!*0.001*0.28,0)))
                                  FROM highways_raw h2x 
                                  WHERE ST_DWithin(junctions_raw.center, h2x.way, 0.1)
                                    AND (junctions_raw.width_tagged > h2x.width_tagged)
                                    AND (junctions_raw.width_tagged > h2x.width_nominal)
                                ),
                                ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                              )
                            ) AS junction_poly,
                            ('highway_' || highway) AS feature,
                            path_type,
                            int_surface,
                            int_tunnel,
                            int_bridge,
                            int_lane_right,
                            int_lane_left,
                            int_lanes,
                            int_side_right,
                            int_side_left,
                            int_access,
                            construction,
                            service,
                            link,
                            width_nominal,
                            width_tagged,
                            width_max,
                            casing_width,
                            layernotnull,
                            osm_id,
                            z_order
                          FROM
                            (SELECT
                                ST_StartPoint(way) AS center,
                                way,
                                highway,
                                path_type,
                                int_surface,
                                int_tunnel,
                                int_bridge,
                                int_lane_right,
                                int_lane_left,
                                int_lanes,
                                int_side_right,
                                int_side_left,
                                int_access,
                                construction,
                                service,
                                link,
                                width_nominal,
                                width_tagged,
                                GREATEST(width_nominal, width_tagged) AS width_max,
                                carto_casing_line_width(highway, int_bridge, z(!scale_denominator!)) AS casing_width,
                                layernotnull,
                                osm_id,
                                z_order
                              FROM highways_raw h1
                              WHERE
                                -- either one way connecting not at the ends or two ways connecting at the ends
                                -- and no way connecting at end with the same highway class
                               (SELECT
                                   SUM(
                                     CASE
                                       WHEN (ST_DWithin(ST_StartPoint(h1.way), ST_StartPoint(h2.way), 0.1) OR
                                             ST_DWithin(ST_StartPoint(h1.way), ST_EndPoint(h2.way), 0.1)) THEN
                                         CASE
                                           WHEN (h1.highway = h2.highway) AND (h1.osm_id != h2.osm_id) THEN 3
                                           WHEN (h1.width_tagged > h2.width_tagged)
                                            AND (h1.width_tagged > h2.width_nominal) THEN 1
                                           ELSE 0
                                         END
                                       WHEN (h1.width_tagged > h2.width_tagged)
                                        AND (h1.width_tagged > h2.width_nominal) THEN 2
                                       ELSE 0
                                     END)
                                 FROM highways_raw h2 WHERE ST_DWithin(ST_StartPoint(h1.way), h2.way, 0.1)) = 2
                              UNION ALL
                              SELECT
                                ST_EndPoint(way) AS center,
                                way,
                                highway,
                                path_type,
                                int_surface,
                                int_tunnel,
                                int_bridge,
                                int_lane_right,
                                int_lane_left,
                                int_lanes,
                                int_side_right,
                                int_side_left,
                                int_access,
                                construction,
                                service,
                                link,
                                width_nominal,
                                width_tagged,
                                GREATEST(width_nominal, width_tagged) AS width_max,
                                carto_casing_line_width(highway, int_bridge, z(!scale_denominator!)) AS casing_width,
                                layernotnull,
                                osm_id,
                                z_order
                              FROM highways_raw h1
                              WHERE
                                -- either one way connecting not at the ends or two ways connecting at the ends
                                -- and no way connecting at end with the same highway class
                               (SELECT
                                   SUM(
                                     CASE
                                       WHEN (ST_DWithin(ST_EndPoint(h1.way), ST_StartPoint(h2.way), 0.1) OR
                                             ST_DWithin(ST_EndPoint(h1.way), ST_EndPoint(h2.way), 0.1)) THEN
                                         CASE
                                           WHEN (h1.highway = h2.highway) AND (h1.osm_id != h2.osm_id) THEN 3
                                           WHEN (h1.width_tagged > h2.width_tagged)
                                            AND (h1.width_tagged > h2.width_nominal) THEN 1
                                           ELSE 0
                                         END
                                       WHEN (h1.width_tagged > h2.width_tagged)
                                        AND (h1.width_tagged > h2.width_nominal) THEN 2
                                       ELSE 0
                                     END)
                                 FROM highways_raw h2 WHERE ST_DWithin(ST_EndPoint(h1.way), h2.way, 0.1)) = 2
                            ) AS junctions_raw
                          WHERE (width_tagged > width_nominal)
                            -- we simply assume that the previous conditions and the need to render junctions
                            -- are not met at z<14 - that simplifies mss code (because it is the same as for hw areas)
                            AND z(!scale_denominator!) >= 14
                        ) AS junctions2
                      WHERE ST_NumGeometries(junction_poly) > 1
                    ) AS junctions_flat
                  WHERE ST_Intersects(junction_cut, way)
                ), -- end junctions CTE
                highways_all AS
                (SELECT
                    ST_Difference(
                      h.way,
                      COALESCE(
                        j.bounds,
                        ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                      )
                    ) AS way,
                    h.way AS way_orig,
                    j.clip AS clip,
                    h.feature AS feature,
                    h.highway AS highway,
                    h.path_type AS path_type,
                    h.int_surface AS int_surface,
                    h.int_tunnel AS int_tunnel,
                    h.int_bridge AS int_bridge,
                    h.int_lane_right AS int_lane_right,
                    h.int_lane_left AS int_lane_left,
                    h.int_lanes AS int_lanes,
                    h.int_side_right AS int_side_right,
                    h.int_side_left AS int_side_left,
                    h.int_access AS int_access,
                    h.construction AS construction,
                    h.service AS service,
                    h.link AS link,
                    h.width_lane AS width_lane,
                    h.width_lane_cycle AS width_lane_cycle,
                    h.width_nominal AS width_nominal,
                    h.width_tagged AS width_tagged,
                    carto_casing_line_width(h.highway, h.int_bridge, z(!scale_denominator!)) AS casing_width,
                    h.layernotnull AS layernotnull,
                    h.osm_id AS osm_id,
                    h.z_order AS z_order
                  FROM highways_raw h
                  LEFT JOIN
                    (SELECT
                        ST_Union(bounds) AS bounds,
                        ST_Union(clip) AS clip,
                        osm_id
                      FROM junctions GROUP BY osm_id
                    ) AS j
                    ON j.osm_id = h.osm_id
                ), -- end highways_all CTE
                sidewalks_raw AS
                (SELECT
                    CASE WHEN feature = 'highway_side_parking' THEN
                      ST_Buffer(line, 0.5*line_width*NULLIF(!scale_denominator!*0.001*0.28,0), 'endcap=flat join=round')
                    ELSE
                      CASE
                        WHEN int_side_right IS NULL AND int_side_left IS NOT NULL THEN
                          ST_Intersection(
                            buffer,
                            ST_Buffer(
                              ST_OffsetCurve(way, (0.5*width_max + 0.5*side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*width_max + side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          )
                        WHEN int_side_left IS NULL AND int_side_right IS NOT NULL THEN
                          ST_Intersection(
                            buffer,
                            ST_Buffer(
                              ST_OffsetCurve(way, -(0.5*width_max + 0.5*side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                             (0.5*width_max + side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          )
                        ELSE
                          buffer
                      END
                    END AS buffer,
                    buffer_base,
                    -- this generates a buffer outline (either both or one sided)
                    -- for all rows with some kind of sidewalk
                    CASE
                      WHEN int_side_right IS NULL AND int_side_left IS NULL THEN
                        NULL
                      WHEN feature = 'highway_side_parking' THEN
                        -- parking geometries are already supplied as line geometries here
                        line
                      WHEN int_side_right IS NULL THEN
                        ST_Intersection(
                          ST_Boundary(buffer),
                          ST_Buffer(
                            ST_OffsetCurve(way, (0.5*width_max + 0.5*side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            (0.5*width_max + side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)
                          )
                        )
                      WHEN int_side_left IS NULL THEN
                        ST_Intersection(
                          ST_Boundary(buffer),
                          ST_Buffer(
                            ST_OffsetCurve(way, -(0.5*width_max + 0.5*side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            (0.5*width_max + side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)
                          )
                        )
                      ELSE ST_Boundary(buffer)
                    END AS line,
                    way,
                    way_orig,
                    feature,
                    path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    int_access,
                    construction,
                    service,
                    link,
                    width_nominal,
                    width_tagged,
                    line_width AS casing_width,
                    layernotnull,
                    osm_id,
                    z_order-1 AS z_order -- we lower this for consistent odering and to render the parking casing behind the main road casing
                  FROM
                    (SELECT
                        CASE WHEN side_type = 'parking' THEN
                          NULL
                        ELSE
                          -- this is the buffer that forms the basis for the sidewalk geometries and their clipping
                          ST_Difference(
                            ST_Buffer(
                              way_orig,
                              (0.5*width_max + side_offset)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            ),
                            COALESCE(
                              ST_Buffer(clip, (side_offset + 1.0)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                            )
                          )
                        END AS buffer,
                          ST_Difference(
                            ST_Buffer(
                              way_orig,
                              (0.5*width_max + casing_width*2.0 + sidewalk_width)*NULLIF(!scale_denominator!*0.001*0.28,0),
                              'endcap=flat join=round'
                            ),
                            COALESCE(
                              ST_Buffer(clip, (side_offset + 1.0)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                            )
                          ) AS buffer_base,
                        CASE WHEN side_type = 'parking' THEN
                          CASE
                            WHEN int_side_right IS NULL THEN
                              ST_OffsetCurve(way, (0.5*width_max + side_offset - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))
                            WHEN int_side_left IS NULL THEN
                              ST_OffsetCurve(way, -(0.5*width_max + side_offset - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))
                            ELSE
                              ST_Union(
                                ST_OffsetCurve(way, (0.5*width_max + side_offset - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                ST_OffsetCurve(way, -(0.5*width_max + side_offset - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))
                              )
                          END
                        ELSE
                          NULL
                        END AS line,
                        way,
                        way_orig,
                        ('highway_side_' || COALESCE(int_side_right,int_side_left)) AS feature,
                        path_type,
                        int_surface,
                        int_tunnel,
                        int_bridge,
                        int_side_right,
                        int_side_left,
                        int_access,
                        construction,
                        service,
                        link,
                        width_nominal,
                        width_tagged,
                        width_max,
                        line_width,
                        side_offset,
                        layernotnull,
                        osm_id,
                        z_order
                      FROM
                        -- roads_side are the roads with sidewalks or street_side parkings
                        (WITH roads_side AS
                          (SELECT
                              way,
                              way_orig,
                              clip,
                              feature,
                              path_type,
                              int_surface,
                              int_tunnel,
                              int_bridge,
                              int_side_right,
                              int_side_left,
                              reverse(split_part(reverse(int_side_right), '+', 1)) AS int_sidewalk_right,
                              reverse(split_part(reverse(int_side_left), '+', 1)) AS int_sidewalk_left,
                              CASE WHEN split_part(int_side_right, '+', 1) = 'parking' THEN 'parking' ELSE NULL END int_parking_right,
                              CASE WHEN split_part(int_side_left, '+', 1) = 'parking' THEN 'parking' ELSE NULL END int_parking_left,
                              int_access,
                              construction,
                              highway AS service, -- we use this to store the original highway value to be able to use that in MSS code
                              link,
                              width_nominal,
                              width_tagged,
                              GREATEST(width_nominal, width_tagged) AS width_max,
                              carto_casing_line_width('sidewalk', int_bridge, z(!scale_denominator!)) AS casing_width,
                              carto_highway_line_width('sidewalk', z(!scale_denominator!)) AS sidewalk_width,
                              GREATEST(
                                carto_highway_line_width('parking', z(!scale_denominator!)),
                                carto_ground_to_px(2.5, way_orig, !scale_denominator!)
                              ) AS parking_width,
                              layernotnull,
                              osm_id,
                              z_order
                            FROM highways_all
                            WHERE (int_side_right IS NOT NULL OR int_side_left IS NOT NULL)
                              AND width_nominal > 0.0
                              AND z(!scale_denominator!) >= 18
                          ),
                        -- this are all other roads without sidewalks the sidewalks need to be clipped with
                        roads_noside AS
                          (SELECT
                              way,
                              way_orig,
                              clip,
                              feature,
                              path_type,
                              int_surface,
                              int_tunnel,
                              int_bridge,
                              NULL AS int_sidewalk_right,
                              NULL AS int_sidewalk_left,
                              int_access,
                              construction,
                              service,
                              link,
                              width_nominal,
                              width_tagged,
                              GREATEST(width_nominal, width_tagged) AS width_max,
                              carto_casing_line_width('sidewalk', int_bridge, z(!scale_denominator!)) AS casing_width,
                              carto_highway_line_width('sidewalk', z(!scale_denominator!)) AS sidewalk_width,
                              layernotnull,
                              osm_id,
                              z_order
                            FROM highways_all
                            WHERE (int_side_right IS NULL AND int_side_left IS NULL)
                              AND width_nominal > 0.0
                              AND z(!scale_denominator!) >= 18
                          ),
                        -- roads_sidewalk are the roads with sidewalks
                        roads_sidewalk AS
                          (SELECT
                              way,
                              way_orig,
                              clip,
                              feature,
                              path_type,
                              int_surface,
                              int_tunnel,
                              int_bridge,
                              int_side_right,
                              int_side_left,
                              CASE WHEN int_sidewalk_right IN ('', 'parking') THEN NULL ELSE int_sidewalk_right END AS int_sidewalk_right,
                              CASE WHEN int_sidewalk_left IN ('', 'parking') THEN NULL ELSE int_sidewalk_left END AS int_sidewalk_left,
                              int_parking_right,
                              int_parking_left,
                              int_access,
                              construction,
                              service,
                              link,
                              width_nominal,
                              width_tagged,
                              width_max,
                              casing_width,
                              sidewalk_width,
                              parking_width,
                              layernotnull,
                              osm_id,
                              z_order
                            FROM roads_side
                            WHERE ((int_sidewalk_right IS NOT NULL AND int_sidewalk_right NOT IN ('', 'parking')) OR (int_sidewalk_left IS NOT NULL AND int_sidewalk_left NOT IN ('', 'parking')))
                          )
                        -- this are the roads with either just one or two identical sidewalks
                        SELECT
                            'sidewalk' AS side_type,
                            way,
                            way_orig,
                            clip,
                            feature,
                            path_type,
                            int_surface,
                            int_tunnel,
                            int_bridge,
                            int_sidewalk_right AS int_side_right,
                            int_sidewalk_left AS int_side_left,
                            int_access,
                            construction,
                            service,
                            link,
                            width_nominal,
                            width_tagged,
                            width_max,
                            casing_width,
                            sidewalk_width,
                            casing_width AS line_width,
                            CASE WHEN int_parking_right IS NOT NULL OR int_parking_left IS NOT NULL THEN casing_width + parking_width ELSE 0.0 END +
                            casing_width*2.0 + sidewalk_width AS side_offset,
                            layernotnull,
                            osm_id,
                            z_order
                          FROM roads_sidewalk
                          WHERE (int_side_right = int_side_left OR int_side_right IS NULL OR int_side_left IS NULL)
                        UNION ALL
                        -- this are (separately) the roads with two different sidewalks
                        SELECT
                            'sidewalk' AS side_type,
                            way,
                            way_orig,
                            clip,
                            feature,
                            path_type,
                            int_surface,
                            int_tunnel,
                            int_bridge,
                            int_sidewalk_right AS int_side_right,
                            NULL AS int_side_left,
                            int_access,
                            construction,
                            service,
                            link,
                            width_nominal,
                            width_tagged,
                            width_max,
                            casing_width,
                            sidewalk_width,
                            casing_width AS line_width,
                            CASE WHEN int_parking_right IS NOT NULL THEN casing_width + parking_width ELSE 0.0 END +
                            casing_width*2.0 + sidewalk_width AS side_offset,
                            layernotnull,
                            osm_id,
                            z_order
                          FROM roads_sidewalk
                          WHERE NOT(int_side_right = int_side_left OR int_side_right IS NULL OR int_side_left IS NULL)
                            AND int_sidewalk_right IS NOT NULL
                        UNION ALL
                        SELECT
                            'sidewalk' AS side_type,
                            way,
                            way_orig,
                            clip,
                            feature,
                            path_type,
                            int_surface,
                            int_tunnel,
                            int_bridge,
                            NULL AS int_side_right,
                            int_sidewalk_left AS int_side_left,
                            int_access,
                            construction,
                            service,
                            link,
                            width_nominal,
                            width_tagged,
                            width_max,
                            casing_width,
                            sidewalk_width,
                            casing_width AS line_width,
                            CASE WHEN int_parking_left IS NOT NULL THEN casing_width + parking_width ELSE 0.0 END +
                            casing_width*2.0 + sidewalk_width AS side_offset,
                            layernotnull,
                            osm_id,
                            z_order
                          FROM roads_sidewalk
                          WHERE NOT(int_side_right = int_side_left OR int_side_right IS NULL OR int_side_left IS NULL)
                            AND int_sidewalk_left IS NOT NULL
                        UNION ALL
                        -- this are the roads with either just one or two identical parkings
                        -- (which is the case for all parkings atm. - could be extended for differentiated parkings just like with sidewalks)
                        SELECT
                            'parking' AS side_type,
                            way,
                            way_orig,
                            clip,
                            feature,
                            path_type,
                            int_surface,
                            int_tunnel,
                            int_bridge,
                            int_parking_right AS int_side_right,
                            int_parking_left AS int_side_left,
                            int_access,
                            construction,
                            service,
                            link,
                            width_nominal,
                            width_tagged,
                            width_max,
                            casing_width,
                            sidewalk_width,
                            parking_width AS line_width,
                            casing_width + parking_width*0.5 AS side_offset,
                            layernotnull,
                            osm_id,
                            z_order
                          FROM roads_side
                          WHERE (int_parking_right IS NOT NULL OR int_parking_left IS NOT NULL) AND
                            (int_parking_right = int_parking_left OR int_parking_right IS NULL OR int_parking_left IS NULL)
                        UNION ALL
                        -- this are all other roads without sidewalks/parkings the sidewalks/parkings need to be clipped with
                        SELECT
                            'noside' AS side_type,
                            way,
                            way_orig,
                            clip,
                            feature,
                            path_type,
                            int_surface,
                            int_tunnel,
                            int_bridge,
                            int_sidewalk_right AS int_side_right,
                            int_sidewalk_left AS int_side_left,
                            int_access,
                            construction,
                            service,
                            link,
                            width_nominal,
                            width_tagged,
                            width_max,
                            casing_width,
                            sidewalk_width,
                            casing_width AS line_width,
                            casing_width*2.0 + sidewalk_width AS side_offset,
                            layernotnull,
                            osm_id,
                            z_order
                          FROM roads_noside
                        ) AS sidewalks
                    ) AS l -- end of sidewalks select
                ) -- end sidewalks_raw CTE
                SELECT -- begin of sidewalks select
                    way,
                    feature,
                    path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    'no' AS int_lane,
                    NULL AS int_lanes,
                    'no' AS int_junction,
                    int_access,
                    construction,
                    service,
                    link,
                    0 AS width_lane,
                    width_nominal,
                    width_tagged,
                    casing_width,
                    layernotnull,
                    osm_id,
                    z_order
                  FROM
                    (SELECT -- begin of sidewalks select
                        ST_Difference(
                          CASE WHEN feature = 'highway_side_parking' THEN
                            ST_Difference(
                              buffer,
                              -- this clips the sidewalk outlines with all adjacent roads
                              (SELECT
                                  COALESCE(
                                    ST_Union(
                                      CASE
                                        WHEN o.feature = 'highway_side_parking' THEN
                                          ST_Union(buffer_base, ST_Buffer(buffer, 1.5*NULLIF(!scale_denominator!*0.001*0.28,0)))
                                        -- WHEN line IS NOT NULL THEN
                                        --   buffer
                                        ELSE
                                          buffer_base
                                      END
                                    ),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                FROM sidewalks_raw o
                                WHERE
                                  -- intersect at ends or in equal layer
                                  ((ST_DWithin(l.way_orig, o.way_orig, 0.1) AND
                                    (o.layernotnull = l.layernotnull OR (l.int_bridge = 'no' AND l.int_tunnel = 'no')) AND
                                    o.int_bridge = l.int_bridge AND
                                    o.int_tunnel = l.int_tunnel) OR
                                   ST_DWithin(
                                     ST_Collect(ST_StartPoint(l.way_orig), ST_EndPoint(l.way_orig)),
                                     ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                  )
                                  AND o.osm_id != l.osm_id
                              )
                            )
                          ELSE
                            ST_Difference(
                              line,
                              -- this clips the sidewalk outlines with all adjacent roads
                              (SELECT
                                  COALESCE(
                                    ST_Union(
                                      CASE WHEN o.feature = 'highway_side_parking' THEN
                                        -- ST_Buffer(buffer, 1.0*NULLIF(!scale_denominator!*0.001*0.28,0))
                                        ST_Union(buffer_base, ST_Buffer(buffer, 1.5*NULLIF(!scale_denominator!*0.001*0.28,0)))
                                      ELSE
                                        ST_Union(buffer_base, buffer)
                                      END
                                    ),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                FROM sidewalks_raw o
                                WHERE
                                  -- intersect at ends or in equal layer
                                  ((ST_DWithin(l.way_orig, o.way_orig, 0.1) AND
                                    (o.layernotnull = l.layernotnull OR (l.int_bridge = 'no' AND l.int_tunnel = 'no')) AND
                                    o.int_bridge = l.int_bridge AND
                                    o.int_tunnel = l.int_tunnel) OR
                                   ST_DWithin(
                                     ST_Collect(ST_StartPoint(l.way_orig), ST_EndPoint(l.way_orig)),
                                     ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                  )
                                  AND o.osm_id != l.osm_id
                              )
                            )
                          END,
                          -- this clips the sidewalk outlines with a possible junction clip polygon
                          (SELECT
                              COALESCE(
                                ST_Union(ST_Buffer(j.clip, 6.0*GREATEST(j.casing_width, l.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                              )
                            FROM junctions j
                            WHERE
                              j.int_bridge = l.int_bridge AND
                              j.int_tunnel = l.int_tunnel AND
                              j.osm_id = l.osm_id
                          )
                        ) AS way,
                        feature,
                        path_type,
                        int_surface,
                        int_tunnel,
                        int_bridge,
                        int_access,
                        construction,
                        service,
                        link,
                        width_nominal,
                        width_tagged,
                        casing_width,
                        layernotnull,
                        osm_id,
                        z_order
                      FROM sidewalks_raw l
                      WHERE line IS NOT NULL
                        AND int_tunnel = 'no') AS _
                  -- end of sidewalks select
                UNION ALL
                SELECT -- begin of lanes select
                    line AS way,
                    ('highway_lane_' || int_lane) AS feature,
                    int_lane AS path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    int_lane,
                    NULL AS int_lanes,
                    'no' AS int_junction,
                    int_access,
                    construction,
                    service,
                    link,
                    width_lane,
                    width_nominal,
                    width_tagged,
                    casing_width,
                    layernotnull,
                    osm_id,
                    z_order
                  FROM
                    -- roads_lane are the roads with special function lanes (either parking, cycle or bus)
                    (WITH roads_lane AS
                      (SELECT
                          way,
                          way_orig,
                          clip,
                          feature,
                          path_type,
                          int_surface,
                          int_tunnel,
                          int_bridge,
                          int_lane_right,
                          int_lane_left,
                          string_to_array(int_lane_right, '+') AS int_lane_types_right,
                          string_to_array(int_lane_left, '+') AS int_lane_types_left,
                          int_access,
                          construction,
                          service,
                          link,
                          width_lane,
                          width_lane_cycle,
                          width_nominal,
                          width_tagged,
                          GREATEST(width_nominal, width_tagged) AS width_max,
                          carto_casing_line_width('sidewalk', int_bridge, z(!scale_denominator!)) AS casing_width,
                          layernotnull,
                          osm_id,
                          z_order
                        FROM highways_all
                        WHERE (int_lane_right IS NOT NULL OR int_lane_left IS NOT NULL)
                          AND width_nominal > 0.0
                      ),
                    -- all roads the lanes need to be clipped with
                    roads_other AS
                      (SELECT
                          way,
                          way_orig,
                          clip,
                          ST_Buffer(
                            way_orig,
                            (GREATEST(width_nominal, width_tagged)*0.5 - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0),
                            'endcap=flat join=round'
                          ) AS buffer,
                          ST_Buffer(
                            way_orig,
                            (GREATEST(width_nominal, width_tagged)*0.5 - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)
                          ) AS buffer_round,
                          feature,
                          path_type,
                          int_surface,
                          int_tunnel,
                          int_bridge,
                          int_access,
                          construction,
                          service,
                          link,
                          layernotnull,
                          osm_id,
                          z_order
                        FROM highways_all
                        WHERE width_nominal > 0.0
                      ),
                    -- this are the roads with parking lane - either on one or both sides
                    roads_parking AS
                      (SELECT
                          way,
                          way_orig,
                          clip,
                          buffer,
                          ST_Difference(
                            ST_Difference(
                              -- this generates a buffer outline (either both or one sided)
                              -- for all rows with a parking lane and clips them - as necessary - to a single side
                              CASE WHEN lane_clip IS NULL THEN
                                ST_Boundary(buffer)
                              ELSE
                                ST_Intersection(
                                  ST_Boundary(buffer),
                                  lane_clip
                                )
                              END,
                              -- this clips the lane outlines with all adjacent roads
                              (SELECT
                                  COALESCE(
                                    ST_Union(
                                      buffer
                                    ),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                FROM roads_other o
                                WHERE
                                  -- intersect at ends or in equal layer
                                  ((ST_DWithin(l.way_orig, o.way_orig, 0.1) AND
                                    (o.layernotnull = l.layernotnull OR (l.int_bridge = 'no' AND l.int_tunnel = 'no')) AND
                                    o.int_bridge = l.int_bridge AND
                                    o.int_tunnel = l.int_tunnel) OR
                                   ST_DWithin(
                                     ST_Collect(ST_StartPoint(l.way_orig), ST_EndPoint(l.way_orig)),
                                     ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                  )
                                  AND o.osm_id != l.osm_id
                              )
                            ),
                            -- this clips the lane outlines with a possible junction clip polygon
                            (SELECT
                                COALESCE(
                                  ST_Union(ST_Buffer(j.clip, 6.0*GREATEST(j.casing_width, l.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                )
                              FROM junctions j
                              WHERE
                                j.int_bridge = l.int_bridge AND
                                j.int_tunnel = l.int_tunnel AND
                                j.osm_id = l.osm_id
                            )
                          ) AS line,
                          feature,
                          path_type,
                          int_surface,
                          int_tunnel,
                          int_bridge,
                          COALESCE(int_lane_right, int_lane_left) AS int_lane,
                          int_lane_right,
                          int_lane_left,
                          int_access,
                          construction,
                          service,
                          link,
                          width_lane,
                          width_nominal,
                          width_tagged,
                          width_max,
                          casing_width,
                          layernotnull,
                          osm_id,
                          z_order
                        FROM
                          (SELECT
                              way,
                              way_orig,
                              clip,
                              ST_Difference(
                                ST_Buffer(
                                  way_orig,
                                  (width_max*0.5 - width_lane*0.5 - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)
                                ),
                                COALESCE(
                                  ST_Buffer(clip, (width_max*0.5 - width_lane*0.5 - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                )
                              ) AS buffer,
                              CASE
                                WHEN int_lane_right IS NULL AND int_lane_left IS NULL THEN
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                WHEN int_lane_right IS NULL THEN
                                  ST_Buffer(
                                    ST_OffsetCurve(way, 0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  )
                                WHEN int_lane_left IS NULL THEN
                                  ST_Buffer(
                                    ST_OffsetCurve(way, -0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  )
                                ELSE
                                  NULL
                              END AS lane_clip,
                              feature,
                              path_type,
                              int_surface,
                              int_tunnel,
                              int_bridge,
                              int_lane_right,
                              int_lane_left,
                              int_access,
                              construction,
                              service,
                              link,
                              width_lane,
                              width_nominal,
                              width_tagged,
                              width_max,
                              casing_width,
                              layernotnull,
                              osm_id,
                              z_order
                            FROM
                              (SELECT
                                  way,
                                  way_orig,
                                  clip,
                                  feature,
                                  path_type,
                                  int_surface,
                                  int_tunnel,
                                  int_bridge,
                                  CASE WHEN int_lane_types_right[1] = 'parking' THEN 'parking' ELSE NULL END AS int_lane_right,
                                  CASE WHEN int_lane_types_left[1] = 'parking' THEN 'parking' ELSE NULL END int_lane_left,
                                  int_access,
                                  construction,
                                  service,
                                  link,
                                  width_lane,
                                  width_nominal,
                                  width_tagged,
                                  width_max,
                                  casing_width,
                                  layernotnull,
                                  osm_id,
                                  z_order
                                FROM roads_lane
                                WHERE (int_lane_types_right[1] = 'parking' OR int_lane_types_left[1] = 'parking')
                              ) AS lp
                          ) AS l
                      ), -- end or roads_parking CTE
                    -- this are the roads with cycle lane - either on one or both sides
                    roads_cycle AS
                      (SELECT
                          way,
                          way_orig,
                          clip,
                          buffer,
                          ST_Difference(
                            ST_Difference(
                              -- this generates a buffer outline (either both or one sided)
                              -- for all rows with a parking lane and clips them - as necessary - to a single side
                              CASE WHEN lane_clip IS NULL THEN
                                ST_Boundary(buffer)
                              ELSE
                                ST_Intersection(
                                  ST_Boundary(buffer),
                                  lane_clip
                                )
                              END,
                              -- this clips the lane outlines with all adjacent roads
                              -- using a compound buffer of flat and round end caps
                              -- with the round caps minus the parkings (to avoid gaps in cycle lane display)
                              (SELECT
                                  COALESCE(
                                    ST_Union(
                                      ST_Union(
                                        buffer,
                                        ST_Buffer(ST_Difference(buffer_round, parkings_buffer), -l.width_lane*0.5)
                                      )
                                    ),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                FROM roads_other o
                                WHERE
                                  -- intersect at ends or in equal layer
                                  ((ST_DWithin(l.way_orig, o.way_orig, 0.1) AND
                                    (o.layernotnull = l.layernotnull OR (l.int_bridge = 'no' AND l.int_tunnel = 'no')) AND
                                    o.int_bridge = l.int_bridge AND
                                    o.int_tunnel = l.int_tunnel) OR
                                   ST_DWithin(
                                     ST_Collect(ST_StartPoint(l.way_orig), ST_EndPoint(l.way_orig)),
                                     ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                  )
                                  AND o.osm_id != l.osm_id
                              )
                            ),
                            -- this clips the lane outlines with a possible junction clip polygon
                            (SELECT
                                COALESCE(
                                  ST_Union(ST_Buffer(j.clip, 6.0*GREATEST(j.casing_width, l.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                )
                              FROM junctions j
                              WHERE
                                j.int_bridge = l.int_bridge AND
                                j.int_tunnel = l.int_tunnel AND
                                j.osm_id = l.osm_id
                            )
                          ) AS line,---
                          feature,
                          path_type,
                          int_surface,
                          int_tunnel,
                          int_bridge,
                          COALESCE(int_lane_right, int_lane_left) AS int_lane,
                          int_lane_right,
                          int_lane_left,
                          int_access,
                          construction,
                          service,
                          link,
                          width_lane,
                          width_nominal,
                          width_tagged,
                          width_max,
                          casing_width,
                          layernotnull,
                          osm_id,
                          z_order
                        FROM
                          (SELECT
                              way,
                              way_orig,
                              clip,
                              ST_Difference(
                                ST_Difference(
                                  ST_Buffer(
                                    way_orig,
                                    (0.5*width_max - 0.5*width_lane - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  ),
                                  COALESCE(
                                    ST_Buffer(clip, (0.5*width_max - 0.5*width_lane - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                ),
                                parkings_buffer
                              ) AS buffer,
                              parkings_buffer,
                              CASE
                                WHEN int_lane_right IS NULL AND int_lane_left IS NULL THEN
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                WHEN int_lane_right IS NULL THEN
                                  ST_Buffer(
                                    ST_OffsetCurve(way, 0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  )
                                WHEN int_lane_left IS NULL THEN
                                  ST_Buffer(
                                    ST_OffsetCurve(way, -0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  )
                                ELSE
                                  NULL
                              END AS lane_clip,
                              feature,
                              path_type,
                              int_surface,
                              int_tunnel,
                              int_bridge,
                              int_lane_right,
                              int_lane_left,
                              int_access,
                              construction,
                              service,
                              link,
                              width_lane,
                              width_nominal,
                              width_tagged,
                              width_max,
                              casing_width,
                              layernotnull,
                              osm_id,
                              z_order
                            FROM
                              (SELECT
                                  way,
                                  way_orig,
                                  clip,
                                  (SELECT
                                      COALESCE(
                                        ST_Union(ST_Buffer(o.line, (0.5*o.width_lane + 0.5*roads_lane.width_lane_cycle + roads_lane.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                        ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                      )
                                    FROM roads_parking o
                                    WHERE
                                      ST_DWithin(
                                        ST_Collect(ST_StartPoint(roads_lane.way_orig), ST_EndPoint(roads_lane.way_orig)),
                                        ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                  ) AS parkings_buffer,
                                  feature,
                                  path_type,
                                  int_surface,
                                  int_tunnel,
                                  int_bridge,
                                  CASE WHEN int_lane_types_right[1] = 'cycle' OR int_lane_types_right[2] = 'cycle' THEN 'cycle' ELSE NULL END AS int_lane_right,
                                  CASE WHEN int_lane_types_left[1] = 'cycle' OR int_lane_types_left[2] = 'cycle' THEN 'cycle' ELSE NULL END int_lane_left,
                                  int_access,
                                  construction,
                                  service,
                                  link,
                                  width_lane_cycle AS width_lane,
                                  width_nominal,
                                  width_tagged,
                                  width_max,
                                  casing_width,
                                  layernotnull,
                                  osm_id,
                                  z_order
                                FROM roads_lane
                                WHERE (int_lane_types_right[1] = 'cycle'
                                   OR int_lane_types_left[1] = 'cycle'
                                   OR int_lane_types_right[2] = 'cycle'
                                   OR int_lane_types_left[2] = 'cycle')
                              ) AS lc
                          ) AS l
                      ), -- end or roads_cycle CTE
                    -- this are the roads with bus lane - either on one or both sides
                    roads_bus AS
                      (SELECT
                          way,
                          way_orig,
                          clip,
                          buffer,
                          ST_Difference(
                            ST_Difference(
                              -- this generates a buffer outline (either both or one sided)
                              -- for all rows with a parking lane and clips them - as necessary - to a single side
                              CASE WHEN lane_clip IS NULL THEN
                                ST_Boundary(buffer)
                              ELSE
                                ST_Intersection(
                                  ST_Boundary(buffer),
                                  lane_clip
                                )
                              END,


                              -- this clips the lane outlines with all adjacent roads
                              -- using a compound buffer of flat and round end caps
                              -- with the round caps minus the parkings/cyclelanes (to avoid gaps in bus lane display)
                              (SELECT
                                  COALESCE(
                                    ST_Union(
                                      ST_Union(
                                        buffer,
                                        ST_Buffer(ST_Difference(buffer_round, cycle_buffer), -l.width_lane*0.5)
                                      )
                                    ),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                FROM roads_other o
                                WHERE
                                  -- intersect at ends or in equal layer
                                  ((ST_DWithin(l.way_orig, o.way_orig, 0.1) AND
                                    (o.layernotnull = l.layernotnull OR (l.int_bridge = 'no' AND l.int_tunnel = 'no')) AND
                                    o.int_bridge = l.int_bridge AND
                                    o.int_tunnel = l.int_tunnel) OR
                                   ST_DWithin(
                                     ST_Collect(ST_StartPoint(l.way_orig), ST_EndPoint(l.way_orig)),
                                     ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                  )
                                  AND o.osm_id != l.osm_id
                              )
                            ),
                            -- this clips the lane outlines with a possible junction clip polygon
                            (SELECT
                                COALESCE(
                                  ST_Union(ST_Buffer(j.clip, 6.0*GREATEST(j.casing_width, l.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                )
                              FROM junctions j
                              WHERE
                                j.int_bridge = l.int_bridge AND
                                j.int_tunnel = l.int_tunnel AND
                                j.osm_id = l.osm_id
                            )
                          ) AS line,
                          feature,
                          path_type,
                          int_surface,
                          int_tunnel,
                          int_bridge,
                          COALESCE(int_lane_right, int_lane_left) AS int_lane,
                          int_lane_right,
                          int_lane_left,
                          int_access,
                          construction,
                          service,
                          link,
                          width_lane,
                          width_nominal,
                          width_tagged,
                          width_max,
                          casing_width,
                          layernotnull,
                          osm_id,
                          z_order
                        FROM
                          (SELECT
                              way,
                              way_orig,
                              clip,

                              ST_Difference(
                                ST_Difference(
                                  ST_Buffer(
                                    way_orig,
                                    (0.5*width_max - 0.5*width_lane - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  ),
                                  COALESCE(
                                    ST_Buffer(clip, (0.5*width_max - 0.5*width_lane - casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                  )
                                ),
                                cycle_buffer
                              ) AS buffer,
                              cycle_buffer,
                              CASE
                                WHEN int_lane_right IS NULL AND int_lane_left IS NULL THEN
                                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                WHEN int_lane_right IS NULL THEN
                                  ST_Buffer(
                                    ST_OffsetCurve(way, 0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  )
                                WHEN int_lane_left IS NULL THEN
                                  ST_Buffer(
                                    ST_OffsetCurve(way, -0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)),
                                    0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0)
                                  )
                                ELSE
                                  NULL
                              END AS lane_clip,
                              feature,
                              path_type,
                              int_surface,
                              int_tunnel,
                              int_bridge,
                              int_lane_right,
                              int_lane_left,
                              int_access,
                              construction,
                              service,
                              link,
                              width_lane,
                              width_nominal,
                              width_tagged,
                              width_max,
                              casing_width,
                              layernotnull,
                              osm_id,
                              z_order
                            FROM
                              (SELECT
                                  way,
                                  way_orig,
                                  clip,
                                  ST_Union(
                                    (SELECT
                                        COALESCE(
                                          ST_Union(ST_Buffer(o.line, (0.5*o.width_lane + 0.5*roads_lane.width_lane + roads_lane.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                          ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                        )
                                      FROM roads_parking o
                                      WHERE
                                        ST_DWithin(
                                          ST_Collect(ST_StartPoint(roads_lane.way_orig), ST_EndPoint(roads_lane.way_orig)),
                                          ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                    ),
                                    (SELECT
                                        COALESCE(
                                          ST_Union(ST_Buffer(o.line, (0.5*o.width_lane + 0.5*roads_lane.width_lane + roads_lane.casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))),
                                          ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                                        )
                                      FROM roads_cycle o
                                      WHERE
                                        ST_DWithin(
                                          ST_Collect(ST_StartPoint(roads_lane.way_orig), ST_EndPoint(roads_lane.way_orig)),
                                          ST_Collect(ST_StartPoint(o.way_orig), ST_EndPoint(o.way_orig)), 0.1)
                                    )
                                  ) AS cycle_buffer,
                                  feature,
                                  path_type,
                                  int_surface,
                                  int_tunnel,
                                  int_bridge,
                                  CASE WHEN int_lane_types_right[1] = 'bus' OR int_lane_types_right[2] = 'bus' OR int_lane_types_right[3] = 'bus' THEN 'bus' ELSE NULL END AS int_lane_right,
                                  CASE WHEN int_lane_types_left[1] = 'bus' OR int_lane_types_left[2] = 'bus' OR int_lane_types_left[3] = 'bus' THEN 'bus' ELSE NULL END int_lane_left,
                                  int_access,
                                  construction,
                                  service,
                                  link,
                                  width_lane,
                                  width_nominal,
                                  width_tagged,
                                  width_max,
                                  casing_width,
                                  layernotnull,
                                  osm_id,
                                  z_order
                                FROM roads_lane
                                WHERE (int_lane_types_right[1] = 'bus'
                                   OR int_lane_types_left[1] = 'bus'
                                   OR int_lane_types_right[2] = 'bus'
                                   OR int_lane_types_left[2] = 'bus'
                                   OR int_lane_types_right[3] = 'bus'
                                   OR int_lane_types_left[3] = 'bus')
                              ) AS lc
                          ) AS l
                      ) -- end or roads_bus CTE
                    -- these are the parking, cycle and bus lanes together
                    SELECT
                        'parking' AS lane_type,
                        buffer,
                        line,
                        way,
                        way_orig,
                        clip,
                        feature,
                        path_type,
                        int_surface,
                        int_tunnel,
                        int_bridge,
                        int_lane,
                        int_lane_right,
                        int_lane_left,
                        int_access,
                        construction,
                        service,
                        link,
                        width_lane,
                        width_nominal,
                        width_tagged,
                        width_max,
                        casing_width,
                        layernotnull,
                        osm_id,
                        z_order
                      FROM roads_parking
                    UNION ALL
                    SELECT
                        'cycle' AS lane_type,
                        buffer,
                        ST_Difference(
                          line,
                          (SELECT ST_Union(ST_Buffer(buffer, -width_lane*0.1)) FROM roads_cycle)
                        ) AS line,
                        way,
                        way_orig,
                        clip,
                        feature,
                        path_type,
                        int_surface,
                        int_tunnel,
                        int_bridge,
                        int_lane,
                        int_lane_right,
                        int_lane_left,
                        int_access,
                        construction,
                        service,
                        link,
                        GREATEST(casing_width, width_lane-casing_width*1.5) AS width_lane,
                        width_nominal,
                        width_tagged,
                        width_max,
                        casing_width,
                        layernotnull,
                        osm_id,
                        z_order
                      FROM roads_cycle
                    UNION ALL
                    SELECT
                        'bus' AS lane_type,
                        buffer,
                        ST_Difference(
                          line,
                          (SELECT ST_Union(ST_Buffer(buffer, -width_lane*0.1)) FROM roads_bus)
                        ) AS line,
                        way,
                        way_orig,
                        clip,
                        feature,
                        path_type,
                        int_surface,
                        int_tunnel,
                        int_bridge,
                        int_lane,
                        int_lane_right,
                        int_lane_left,
                        int_access,
                        construction,
                        service,
                        link,
                        GREATEST(casing_width, width_lane-casing_width*1.5) AS width_lane,
                        width_nominal,
                        width_tagged,
                        width_max,
                        casing_width,
                        layernotnull,
                        osm_id,
                        z_order
                      FROM roads_bus
                    ) AS lanes
                  WHERE int_tunnel = 'no'
                    AND z(!scale_denominator!) >= 18
                  -- end of lanes select
                UNION ALL
                SELECT -- begin of main road select
                    way,
                    feature,
                    path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    'no' AS int_lane,
                    int_lanes,
                    'no' AS int_junction,
                    int_access,
                    construction,
                    service,
                    link,
                    width_lane,
                    width_nominal,
                    width_tagged,
                    casing_width,
                    layernotnull,
                    osm_id,
                    z_order
                  FROM highways_all
                  -- end of main road select
                UNION ALL
                SELECT -- begin of junction polygons select
                    way,
                    feature,
                    path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    'no' AS int_lane,
                    int_lanes,
                    'yes' AS int_junction,
                    int_access,
                    construction,
                    service,
                    link,
                    0 AS width_lane,
                    width_nominal,
                    width_tagged,
                    casing_width,
                    layernotnull,
                    osm_id,
                    z_order
                  FROM junctions
                  -- end of junction polygons select
                UNION ALL
                SELECT -- begin of ford/mountain_pass point pseudo-line select
                    ST_LineSubstring(way, GREATEST(0, position-length*0.5*pass_length), LEAST(1, position+length*0.5*pass_length)) AS way,
                    feature,
                    path_type,
                    int_surface,
                    int_tunnel,
                    int_bridge,
                    'no' AS int_lane,
                    NULL AS int_lanes,
                    'no' AS int_junction,
                    int_access,
                    construction,
                    service,
                    link,
                    0 AS width_lane,
                    width_nominal,
                    width_tagged,
                    carto_casing_line_width(highway, int_bridge, z(!scale_denominator!)) AS casing_width,
                    layernotnull,
                    osm_id,
                    z_order
                    FROM
                      (SELECT
                          l.way AS way, -- this is the highway intersecting the ford node
                          ST_LineLocatePoint(l.way, p.way) AS position, -- this is the position along the way
                          NULLIF(!scale_denominator!*0.001*0.28,0)/ST_Length(l.way) AS length, -- this is the pixel size as a fraction of the way length
                          CASE WHEN (p.tags @> 'mountain_pass=>yes') THEN GREATEST(7, carto_highway_line_width(
                            l.highway, l.service, z(!scale_denominator!))) ELSE 5 END AS pass_length,
                          ('highway_' || l.highway) AS feature,
                          l.highway AS highway,
                          carto_path_type(l.foot, l.bicycle, l.horse) AS path_type,
                          CASE
                            WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                             'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'::text
                            WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                             'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'::text
                            ELSE NULL
                          END AS int_surface,
                          CASE
                            WHEN (tunnel IN ('yes', 'building_passage', 'avalanche_protector') OR covered = 'yes') THEN 'yes'::text
                            WHEN (covered = 'yes') THEN 'yes'::text
                            ELSE 'no'::text
                          END AS int_tunnel,
                          CASE WHEN (p.tags @> 'mountain_pass=>yes') THEN 'mountain_pass' ELSE 'ford_node' END AS int_bridge,
                          carto_road_access(l.highway, l.access, l.tags->'vehicle', l.tags->'motor_vehicle', l.tags->'motorcar', l.bicycle, l.horse, l.foot, l.tags->'bus', l.tags->'psv') AS int_access,
                          l.construction AS construction,
                          CASE
                            WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                            ELSE 'INT-normal'::text
                          END AS service,
                          CASE
                            WHEN substr(l.highway, length(l.highway)-4, 5) = '_link' THEN 'yes'
                            ELSE 'no'
                          END AS link,
                          carto_highway_line_width(l.highway, l.service, z(!scale_denominator!)) AS width_nominal,
                          carto_highway_line_width_mapped(
                            l.highway,
                            l.tags->'width:carriageway',
                            l.tags->'width',
                            l.tags->'lanes',
                            l.tags->'parking:both',
                            l.tags->'parking:right',
                            l.tags->'parking:left',
                            !bbox!,
                            !scale_denominator!
                          ) AS width_tagged,
                          COALESCE(l.layer,0) AS layernotnull,
                          l.osm_id AS osm_id,
                          l.z_order AS z_order
                        FROM planet_osm_point p
                          JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator
                        WHERE (p.tags @> 'ford=>yes' OR p.tags @> 'ford=>stepping_stones' OR p.tags @> 'mountain_pass=>yes')
                          AND p.way && !bbox!
                          AND
                          CASE
                            WHEN z(!scale_denominator!) <= 10 THEN
                              l.highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction')
                            WHEN z(!scale_denominator!) <= 11 THEN
                              l.highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction')
                            WHEN z(!scale_denominator!) <= 12 THEN
                              l.highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 'busway', 'bus_guideway', 'raceway')
                            WHEN z(!scale_denominator!) <= 13 THEN
                              l.highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 'cycleway', 'bridleway', 'steps')
                            ELSE l.highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 'cycleway', 'bridleway', 'steps', 'platform')
                          END
                      ) AS fords
                  -- end of ford/mountain_pass point pseudo-line select
                UNION ALL
                SELECT -- begin of rail/aero select
                    way,
                    COALESCE(
                      ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text 
                                           WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  
                                           WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                      ('aeroway_' || aeroway)
                    ) AS feature,
                    'null' AS path_type,
                    CASE
                      WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                       'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'::text
                      WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                       'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'::text
                      ELSE NULL
                    END AS int_surface,
                    CASE
                      WHEN (tunnel IN ('yes', 'building_passage', 'avalanche_protector') OR covered = 'yes') THEN 'yes'::text
                      WHEN (covered = 'yes') THEN 'yes'::text
                      ELSE 'no'::text
                    END AS int_tunnel,
                    CASE
                      WHEN (bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')) THEN 'yes'::text
                      WHEN (tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones') THEN 'ford'::text
                      ELSE 'no'::text
                    END AS int_bridge,
                    'no' AS int_lane,
                    NULL AS int_lanes,
                    'no' AS int_junction,
                    NULL AS int_access,
                    construction,
                    CASE
                      WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text
                      ELSE 'INT-normal'::text
                    END AS service,
                    'no' AS link,
                    0 AS width_lane,
                    carto_highway_line_width(COALESCE(railway, aeroway), z(!scale_denominator!)) AS width_nominal,
                    CASE
                      WHEN aeroway IS NOT NULL THEN
                        carto_aeroway_line_width_mapped(aeroway, tags->'width', way, !bbox!, !scale_denominator!)
                      ELSE
                        carto_railway_line_width_mapped(railway, tags->'width', !bbox!, !scale_denominator!)
                    END AS width_tagged,
                    carto_casing_line_width(
                       COALESCE(railway, aeroway),
                       CASE
                         WHEN (bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')) THEN 'yes'::text
                         WHEN (tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones') THEN 'ford'::text
                         ELSE 'no'::text
                       END,
                       z(!scale_denominator!)) AS casing_width,
                    COALESCE(layer,0) AS layernotnull,
                    osm_id,
                    z_order
                  FROM planet_osm_line
                  WHERE (railway IS NOT NULL OR aeroway IS NOT NULL)
                    AND way && !bbox! -- end of rail/aero select
              ) AS roads_features
            ), -- end of roads_all CTE
            road_areas_all AS
            (
              SELECT
                  way,
                  COALESCE(
                    ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 
                                                      'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
                    ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),
                    ('aeroway_' || (CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
                  ) AS feature,
                  carto_path_type(foot, bicycle, horse) AS path_type,
                  CASE
                    WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                     'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'::text
                    WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                     'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'::text
                    ELSE NULL
                  END AS int_surface,
                  CASE
                    WHEN (tunnel IN ('yes', 'building_passage', 'avalanche_protector') OR covered = 'yes') THEN 'yes'::text
                    WHEN (covered = 'yes') THEN 'yes'::text
                    ELSE 'no'::text
                  END AS int_tunnel,
                  CASE
                    WHEN (bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')) THEN 'yes'::text
                    WHEN (tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones') THEN 'ford'::text
                    ELSE 'no'::text
                  END AS int_bridge,
                  'null' AS int_lane_right,
                  'null' AS int_lane_left,
                  NULL AS int_lanes,
                  carto_road_access(COALESCE(highway, railway, aeroway), access, tags->'vehicle', tags->'motor_vehicle', tags->'motorcar', bicycle, horse, foot, tags->'bus', tags->'psv') AS int_access,
                  construction,
                  CASE
                    WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text
                    ELSE 'INT-normal'::text
                  END AS service,
                  'no' AS link,
                  0 AS width_nominal,
                  0 AS width_max,
                  0 AS width,
                  carto_casing_line_width(
                    COALESCE(highway, railway, aeroway),
                    CASE
                      WHEN (bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')) THEN 'yes'::text
                      WHEN (tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones') THEN 'ford'::text
                      ELSE 'no'::text
                    END,
                    z(!scale_denominator!)) AS casing_width,
                  COALESCE(layer,0) AS layernotnull,
                  osm_id,
                  z_order
                FROM planet_osm_polygon
                WHERE (highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')
                  OR railway IN ('platform')
                  OR aeroway IN ('runway', 'taxiway', 'helipad'))
                  AND way && !bbox!
                  AND z(!scale_denominator!) >= 14
            ), -- end of road_areas_all CTE
            tc_all AS
            (
              SELECT
                  way,
                  (CASE WHEN substr(feature, length(feature)-4, 5) = '_link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
                  path_type,
                  int_surface,
                  int_tunnel,
                  int_bridge,
                  int_lane_right,
                  int_lane_left,
                  int_lanes,
                  int_access,
                  construction,
                  service,
                  link,
                  tc_type,
                  width,
                  carto_casing_line_width(highway, int_bridge, z(!scale_denominator!)) AS casing_width,
                  layernotnull,
                  osm_id,
                  z_order
                FROM
                  (WITH tc_combos AS
                    (SELECT DISTINCT ON (p.way)
                        p.way AS way,
                        p.highway AS tc_type,
                        l.way AS lway,
                        ('highway_' || l.highway) AS feature,
                        l.highway AS highway,
                        carto_path_type(l.foot, l.bicycle, l.horse) AS path_type,
                        CASE
                          WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                           'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'::text
                          WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                           'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'::text
                          ELSE NULL
                        END AS int_surface,
                        CASE
                          WHEN (l.tunnel IN ('yes', 'building_passage', 'avalanche_protector') OR covered = 'yes') THEN 'yes'::text
                          WHEN (l.covered = 'yes') THEN 'yes'::text
                          ELSE 'no'::text
                        END AS int_tunnel,
                        CASE
                          WHEN (l.bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')) THEN 'yes'::text
                          WHEN (l.tags @> 'ford=>yes' OR l.tags @> 'ford=>stepping_stones') THEN 'ford'::text
                          ELSE 'no'::text
                        END AS int_bridge,
                        'null' AS int_lane_right,
                        'null' AS int_lane_left,
                        NULL AS int_lanes,
                        carto_road_access(l.highway, l.access, l.tags->'vehicle', l.tags->'motor_vehicle', l.tags->'motorcar', l.bicycle, l.horse, l.foot, l.tags->'bus', l.tags->'psv') AS int_access,
                        l.construction AS construction,
                        CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway')
                          THEN 'INT-minor'::text
                          ELSE 'INT-normal'::text
                        END AS service,
                        CASE
                          WHEN substr(l.highway, length(l.highway)-4, 5) = '_link' THEN 'yes'
                          ELSE 'no'
                        END AS link,
                        GREATEST(
                          GREATEST(
                            CASE
                              WHEN l.highway = 'track' THEN
                                CASE z(!scale_denominator!)
                                  WHEN 15 THEN 5.75
                                  WHEN 16 THEN 6.75
                                  WHEN 17 THEN 7.75
                                  ELSE 8.75
                                END
                              ELSE carto_highway_line_width(l.highway, l.service, z(!scale_denominator!))*1.7
                            END,
                            carto_highway_line_width_mapped(
                              l.highway,
                              l.tags->'width:carriageway',
                              l.tags->'width',
                              l.tags->'lanes',
                              l.tags->'parking:both',
                              l.tags->'parking:right',
                              l.tags->'parking:left',
                              !bbox!,
                              !scale_denominator!
                            )*1.375
                          ),
                          CASE WHEN p.tags->'diameter' ~ '^-?\d{1,4}(\.\d+)?$' THEN (p.tags->'diameter')::NUMERIC / NULLIF(scale_factor(p.way)*!scale_denominator!*0.001*0.28,0) ELSE 0.0 END
                        ) AS width,
                        COALESCE(l.layer,0) AS layernotnull,
                        l.osm_id AS osm_id,
                        l.z_order AS z_order
                      FROM planet_osm_point p
                        JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator
                      WHERE p.highway IN ('turning_circle', 'turning_loop', 'mini_roundabout', 'passing_place')
                        AND l.highway IN ('trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link',
                                          'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service',
                                          'living_street', 'track', 'busway', 'bus_guideway')
                        AND p.way && !bbox!
                        AND z(!scale_denominator!) >= 15
                    )
                  SELECT
                      ST_MakeLine(way, ST_Translate(way, 0, 0.01)) AS way,
                      feature,
                      highway,
                      path_type,
                      int_surface,
                      int_tunnel,
                      int_bridge,
                      int_lane_right,
                      int_lane_left,
                      int_lanes,
                      int_access,
                      construction,
                      service,
                      link,
                      tc_type,
                      width,
                      layernotnull,
                      osm_id,
                      z_order
                    FROM tc_combos
                    WHERE tc_type IN ('turning_circle', 'turning_loop', 'mini_roundabout')
                  UNION ALL
                  SELECT
                      ST_LineSubstring(way, GREATEST(0, position-length*0.25*width), LEAST(1, position+length*0.25*width)) AS way,
                      feature,
                      highway,
                      path_type,
                      int_surface,
                      int_tunnel,
                      int_bridge,
                      int_lane_right,
                      int_lane_left,
                      int_lanes,
                      int_access,
                      construction,
                      service,
                      link,
                      tc_type,
                      width,
                      layernotnull,
                      osm_id,
                      z_order
                    FROM
                      (SELECT
                          lway AS way, -- this is the highway intersecting the passing_place node
                          ST_LineLocatePoint(lway, way) AS position, -- this is the position along the way
                          NULLIF(!scale_denominator!*0.001*0.28,0)/ST_Length(lway) AS length, -- this is the pixel size as a fraction of the way length
                          feature,
                          highway,
                          path_type,
                          int_surface,
                          int_tunnel,
                          int_bridge,
                          int_lane_right,
                          int_lane_left,
                          int_lanes,
                          int_access,
                          construction,
                          service,
                          link,
                          tc_type,
                          width,
                          layernotnull,
                          osm_id,
                          z_order
                        FROM tc_combos
                        WHERE tc_type IN ('passing_place')) AS pp_combos
                  ) AS turning_circle_features
            ), -- end of tc_all CTE
            line_barriers_all AS
            (
              SELECT
                  -- this cuts out barrier=entrance nodes - in a width reflecting whatever highway=* intersects
                  ST_Difference(
                    way,
                    COALESCE(
                      (SELECT
                          ST_Union(ST_Buffer(way, width))
                        FROM
                          (SELECT
                              e.way AS way,
                              (COALESCE(
                                (SELECT
                                    GREATEST(
                                      carto_highway_line_width(h.highway, h.service, z(!scale_denominator!)),
                                      carto_highway_line_width_mapped(
                                        h.highway,
                                        h.tags->'width:carriageway',
                                        h.tags->'width',
                                        h.tags->'lanes',
                                        h.tags->'parking:both',
                                        h.tags->'parking:right',
                                        h.tags->'parking:left',
                                        !bbox!,
                                        !scale_denominator!
                                      )
                                    )
                                  FROM planet_osm_line h
                                  WHERE ST_Intersects(h.way, e.way) AND h.highway IN
                                    ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary',
                                     'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service',
                                     'living_street', 'pedestrian', 'steps', 'road', 'bridleway', 'footway', 'cycleway', 'path', 'track',
                                     'busway', 'bus_guideway')
                                  ORDER BY carto_highway_line_width(h.highway, h.service, z(!scale_denominator!)) DESC LIMIT 1
                                ),
                                carto_highway_line_width('footway', z(!scale_denominator!))
                              ) + 2.5 + l.width_nominal)*0.5*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                            FROM planet_osm_point e
                            WHERE ST_Intersects(l.way, e.way)
                              AND e.barrier IN ('entrance')
                          ) AS entrances
                        WHERE (way && ST_Expand(!bbox!, (0.5*
                                (carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.0 + l.width)*
                                NULLIF(!scale_denominator!*0.001*0.28,0)))
                              )
                      ),
                      ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                    )
                  ) AS way,
                  COALESCE(barrier, historic) AS feature,
                  CASE WHEN barrier = 'barrier_ditch' THEN ROUND(width) ELSE width END AS width,
                  height,
                  layer,
                  osm_id,
                  z_order
                FROM
                  (SELECT
                      way,
                      ('barrier_' || (CASE WHEN barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                       'handrail', 'retaining_wall', 'wall') THEN barrier ELSE NULL END)) AS barrier,
                      ('historic_' || (CASE WHEN historic = 'citywalls' THEN historic ELSE NULL END)) AS historic,
                      GREATEST(
                        carto_barrier_line_width(
                          CASE WHEN historic = 'citywalls' THEN historic ELSE barrier END,
                          z(!scale_denominator!)
                        ),
                        carto_barrier_line_width_mapped(
                          CASE WHEN historic = 'citywalls' THEN historic ELSE barrier END,
                          tags->'width',
                          !bbox!, !scale_denominator!
                        )
                      ) AS width,
                      carto_barrier_line_width(CASE WHEN historic = 'citywalls' THEN historic ELSE barrier END, z(!scale_denominator!)) AS width_nominal,
                      CASE WHEN (tags->'height') ~ '^-?\d{1,4}(\.\d+)?$' THEN (tags->'height')::NUMERIC ELSE 1.0 END AS height,
                      layer,
                      osm_id,
                      CASE (CASE WHEN historic = 'citywalls' THEN historic ELSE barrier END)
                        WHEN 'ditch' THEN -2
                        WHEN 'retaining_wall' THEN -1
                        WHEN 'city_wall' THEN 1
                        WHEN 'citywalls' THEN 1
                        WHEN 'wall' THEN 2
                        WHEN 'guard_rail' THEN 3
                        WHEN 'handrail' THEN 4
                        WHEN 'fence' THEN 5
                        WHEN 'chain' THEN 6
                        ELSE 0
                      END AS z_order
                    FROM planet_osm_line
                    WHERE (barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                          'handrail', 'retaining_wall', 'wall')
                      OR historic = 'citywalls')
                      AND (waterway IS NULL OR waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi') OR z(!scale_denominator!) >= 18)
                      AND (way && !bbox!)
                      AND z(!scale_denominator!) >= 15
                  ) AS l
            ), -- end of line_barriers_all CTE
            pipelines_all AS
            (
              SELECT
                  way,
                  substance,
                  carto_pipeline_dasharrays((ST_Length(way)/NULLIF(!scale_denominator!*0.001*0.28,0))::numeric, z(!scale_denominator!)) AS dasharrays,
                  carto_pipeline_line_width('pipe_casing', z(!scale_denominator!)) AS pipe_casing,
                  carto_pipeline_line_width('pipe_fill', z(!scale_denominator!)) AS pipe_fill,
                  carto_pipeline_line_width('flange_width', z(!scale_denominator!)) AS flange_width,
                  layernotnull,
                  osm_id,
                  z_order
                FROM
                  (WITH pipelines_raw AS
                    (SELECT
                        way,
                        substance,
                        layernotnull,
                        ROW_NUMBER() OVER() AS string_id,
                        z_order
                      FROM
                        (SELECT
                            -- this merges any pipeline segments touching at ends without branching
                            -- if they are of the same layer and substance
                            (ST_Dump(ST_LineMerge(ST_Collect(way)))).geom AS way,
                            substance,
                            layernotnull,
                            z_order
                          FROM
                            (SELECT
                                way,
                                tags->'substance' AS substance,
                                COALESCE(layer,0) AS layernotnull,
                                z_order
                              FROM planet_osm_line
                              WHERE ((man_made = 'pipeline'
                                     AND (tags-> 'location' IN ('overground', 'overhead', 'surface', 'outdoor')
                                      OR bridge IN ('yes', 'aqueduct', 'cantilever', 'covered', 'trestle', 'viaduct'))))
                                AND way && !bbox!
                                AND z(!scale_denominator!) >= 14) AS p_orig
                          GROUP BY layernotnull, substance, z_order
                        ) AS p_flat
                    )
                  SELECT
                      -- this splits pipelines at corners with a sharp angle to avoid flanges at those
                      (ST_Dump(
                        ST_CollectionExtract(
                          ST_Split(
                            way,
                            COALESCE(
                              (SELECT
                                  ST_Collect(point) AS way
                                FROM
                                  (SELECT
                                      geom AS point,
                                      CASE
                                        WHEN path[1] = 1 THEN 0.0
                                        WHEN path[1] = ST_NumPoints(way) THEN 0.0
                                        ELSE ST_Angle(ST_PointN(way, path[1]-1), ST_PointN(way, path[1]), ST_PointN(way, path[1]+1))
                                      END AS angle
                                    FROM (SELECT (ST_DumpPoints(way)).*) AS way_points_raw) AS way_points
                                WHERE DEGREES(ABS(angle-PI())) > 30.0
                              ),
                              ST_SetSRID('MULTIPOINT EMPTY'::geometry, 3857)
                            )
                          ),
                          2
                        )
                      )).geom AS way,
                      substance,
                      layernotnull,
                      osm_id,
                      z_order
                    FROM
                      (SELECT
                          (ST_Dump(
                            ST_CollectionExtract(
                              -- this splits every pipeline at any intersection with other
                              -- pipelines or various other rendered line features to
                              -- avoid flanges at or close to intersections in rendering
                              ST_Split(
                                way,
                                COALESCE(
  
                                  (SELECT
                                      ST_Collect(way) AS way
                                    FROM
                                      (SELECT
                                          way
                                        FROM pipelines_raw AS p2
                                        WHERE p2.string_id != p1.string_id AND p2.way && p1.way
                                      UNION ALL
                                      SELECT
                                          way
                                        FROM planet_osm_line
                                        -- this catches more than what is rendered, but unnecessary
                                        -- additional splits are harmless
                                        WHERE (highway IS NOT NULL OR
                                                railway IS NOT NULL OR
                                                waterway IS NOT NULL OR
                                                aerialway IS NOT NULL OR
                                                man_made = 'goods_conveyor')
                                          AND (man_made IS NULL OR man_made != 'pipeline')
                                          AND way && p1.way
                                      ) AS _
                                  ),
                                  ST_SetSRID('MULTILINESTRING EMPTY'::geometry, 3857)
                                )
                              ),
                              2
                            )
                          )).geom AS way,
                          substance,
                          layernotnull,
                          string_id AS osm_id, -- this is later only used for resolving sorting ambiguities - so a fake id is fine.
                          z_order
                        FROM pipelines_raw AS p1
                      ) AS pipelines_split_intersections
                  ) AS pipelines_split_corners
            ) -- end of pipelines_all CTE
            SELECT -- casing
                way,
                'casing' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no' AND int_lane = 'no'
            UNION ALL
            SELECT -- background
                way,
                'background' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no' AND int_lane = 'no'
            UNION ALL
            SELECT -- background_unpaved
                ST_Buffer(way, 0.5*(width_max - 2.0*casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0)) AS way,
                'background_unpaved' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_surface = 'unpaved'
                AND int_lane = 'no'
                AND width >= 0.0
                AND
                  -- this is all the roads with a fill that is patterened for unpaved roads - only at high zoom and rendered as background
                  feature IN ('highway_bridleway', 'highway_footway', 'highway_cycleway', 'highway_path', 'highway_track')
                AND z(!scale_denominator!) >= 18
            UNION ALL
            SELECT -- fill
                way,
                'fill' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no' AND int_lane = 'no'
            UNION ALL
            SELECT -- fill_unpaved
                CASE
                  WHEN feature IN ('aeroway_runway', 'aeroway_taxiway') THEN
                    ST_Buffer(way, 0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0), 'endcap=flat join=round')
                  WHEN feature IN ('highway_raceway') THEN
                    ST_Buffer(way, 0.5*width_max*NULLIF(!scale_denominator!*0.001*0.28,0))
                  ELSE
                    ST_Buffer(way, 0.5*(width_max - 2.0*casing_width)*NULLIF(!scale_denominator!*0.001*0.28,0))
                END AS way,
                'fill_unpaved' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_surface = 'unpaved'
                AND int_lane = 'no'
                AND
                  -- this is all the roads with a fill that is patterened for unpaved roads
                  feature IN (
                    'highway_motorway', 'highway_trunk', 'highway_primary', 'highway_secondary', 'highway_tertiary', 'highway_unclassified',
                    'highway_residential', 'highway_service', 'highway_road', 'highway_pedestrian', 'highway_living_street', 'highway_raceway',
                    'highway_busway', 'highway_bus_guideway',
                    'highway_platform', 'railway_platform', 'aeroway_runway', 'aeroway_taxiway')
                AND z(!scale_denominator!) >= 12
            UNION ALL
            SELECT -- junction_casing
                way,
                'junction_casing' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction != 'no' AND int_lane = 'no'
            UNION ALL
            SELECT -- junction_fill
                way,
                'junction_fill' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction != 'no' AND int_lane = 'no'
            UNION ALL
            SELECT -- fill_lanes
                way,
                'fill_lanes' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_lane != 'no'
                AND z(!scale_denominator!) >= 18
            UNION ALL
            SELECT -- parkings_lane
                way,
                'parkings_lane' AS road_layer,
                'amenity_parking' AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_polygon
              WHERE amenity = 'parking' AND (tags->'parking') = 'lane'
                AND building IS NULL
                AND way && !bbox!
                AND z(!scale_denominator!) >= 12
            UNION ALL
            SELECT -- centerline
                way,
                'centerline' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_lane = 'no'
                AND
                  feature IN ('highway_living_street', 'highway_pedestrian', 'highway_busway', 'highway_bus_guideway', 'aeroway_runway', 'aeroway_taxiway')
                AND z(!scale_denominator!) >= 15
            UNION ALL
            SELECT -- lanes
                way,
                'lanes' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_lane = 'no'
                AND int_lanes IS NOT NULL
                AND z(!scale_denominator!) >= 18
            UNION ALL
            SELECT -- access
                way,
                'access' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_access IS NOT NULL
                AND int_lane = 'no'
                AND z(!scale_denominator!) >= 15
            UNION ALL
            SELECT -- centerline_top
                way,
                'centerline_top' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM roads_all
              WHERE int_junction = 'no'
                AND int_tunnel = 'no'
                AND int_bridge IN ('ford', 'ford_node',  'mountain_pass')
                AND int_lane = 'no'
                AND z(!scale_denominator!) >= 15
            UNION ALL
            SELECT -- area_casing
                way,
                'area_casing' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                0 AS width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM road_areas_all
              WHERE feature NOT IN ('aeroway_runway', 'aeroway_taxiway', 'aeroway_helipad')
            UNION ALL
            SELECT -- area_fill
                way,
                'area_fill' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                'null' AS tc_type,
                0 AS width_lane,
                width_nominal,
                width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM road_areas_all
            UNION ALL
            SELECT -- tc_casing
                way,
                'tc_casing' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM tc_all
            UNION ALL
            SELECT -- tc_fill
                way,
                'tc_fill' AS road_layer,
                feature,
                path_type,
                'no' AS intermittent,
                'no' AS seasonal,
                int_surface,
                int_tunnel,
                int_bridge,
                int_lanes,
                int_access,
                construction,
                service,
                link,
                tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                width,
                casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM tc_all
            UNION ALL
            SELECT -- waterway_bridges_casing
                way,
                'waterway_bridges_casing' AS road_layer,
                ('waterway_' || waterway) AS feature,
                'null' AS path_type,
                tags->'intermittent' AS intermittent,
                tags->'seasonal' AS seasonal,
                'null' AS int_surface,
                CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
                'yes' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                0 AS width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_line
              WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
                AND bridge IN ('yes', 'aqueduct')
                AND way && !bbox!
                AND z(!scale_denominator!) >= 12
            UNION ALL
            SELECT -- waterway_bridges_fill
                way,
                'waterway_bridges_fill' AS road_layer,
                ('waterway_' || waterway) AS feature,
                'null' AS path_type,
                tags->'intermittent' AS intermittent,
                tags->'seasonal' AS seasonal,
                'null' AS int_surface,
                CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
                'yes' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                0 AS width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_line
              WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
                AND bridge IN ('yes', 'aqueduct')
                AND way && !bbox!
                AND z(!scale_denominator!) >= 12
            UNION ALL
            SELECT -- waterway_supplement
                way,
                'waterway_supplement' AS road_layer,
                ('waterway_' || waterway) AS feature,
                'null' AS path_type,
                tags->'intermittent' AS intermittent,
                tags->'seasonal' AS seasonal,
                'null' AS int_surface,
                CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                0 AS width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_line
              WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
                AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))
                AND way && !bbox!
                AND z(!scale_denominator!) >= 14
            UNION ALL
            SELECT -- line_barriers
                way,
                'line_barriers' AS road_layer,
                feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                CASE WHEN height <= 0.5 THEN 'yes' ELSE 'no' END AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM line_barriers_all
            UNION ALL
            SELECT -- line_barrier_areas
                ST_Difference(
                  ST_Reverse(ST_OffsetCurve(way, width*0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 'join=round')),
                  COALESCE(
                    (SELECT
                        ST_Union(ST_Buffer(way, width*0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 'endcap=flat join=round'))
                      FROM line_barriers_all
                      WHERE feature IN ('barrier_wall', 'barrier_city_wall', 'historic_citywalls')
                        AND osm_id != l1.osm_id
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                ) AS way,
                'line_barrier_areas' AS road_layer,
                feature,
                'inner' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                CASE WHEN height <= 0.5 THEN 'yes' ELSE 'no' END AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM line_barriers_all AS l1
                WHERE z(!scale_denominator!) >= 18 AND width >= 2.4 AND feature IN ('barrier_wall', 'barrier_city_wall', 'historic_citywalls')
            UNION ALL
            SELECT -- line_barrier_areas
                ST_Difference(
                  ST_Reverse(ST_OffsetCurve(way, -width*0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 'join=round')),
                  COALESCE(
                    (SELECT
                        ST_Union(ST_Buffer(way, width*0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 'endcap=flat join=round'))
                      FROM line_barriers_all
                      WHERE feature IN ('barrier_wall', 'barrier_city_wall', 'historic_citywalls')
                        AND osm_id != l1.osm_id
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                ) AS way,
                'line_barrier_areas' AS road_layer,
                feature,
                'outer' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                CASE WHEN height <= 0.5 THEN 'yes' ELSE 'no' END AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM line_barriers_all AS l1
                WHERE z(!scale_denominator!) >= 18 AND width >= 2.4 AND feature IN ('barrier_wall', 'barrier_city_wall', 'historic_citywalls')
            UNION ALL
            SELECT -- ferry_routes
                way,
                'ferry_routes' AS road_layer,
                'ferry' AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                0 AS width,
                0 AS casing_width,
                0 AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_line
              WHERE route = 'ferry'
                AND way && !bbox!
            UNION ALL
            SELECT -- goods_conveyor
                way,
                'goods_conveyor' AS road_layer,
                'goods_conveyor' AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                0 AS width,
                0 AS casing_width,
                COALESCE(layer,0) AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_line
              WHERE man_made = 'goods_conveyor'
                AND (tags->'location' NOT IN ('underground') OR (tags->'location') IS NULL)
                AND (tunnel NOT IN ('yes', 'culvert') OR tunnel IS NULL)
                AND way && !bbox!
                AND z(!scale_denominator!) >= 14
            UNION ALL
            SELECT -- pipeline casing
                way,
                'pipeline_casing' AS road_layer,
                'pipeline' AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                -- pipelines get layered strictly by layer tag - hence we promote that to bridge/tunnel
                CASE WHEN layernotnull < 0 THEN 'yes' ELSE 'no' END AS int_tunnel,
                CASE WHEN layernotnull > 0 THEN 'yes' ELSE 'no' END AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                dasharrays[1] AS construction,
                substance AS service,
                'no' AS link,
                dasharrays[4] AS tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                pipe_casing AS width,
                0 AS casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM pipelines_all
            UNION ALL
            SELECT -- pipeline fill
                way,
                'pipeline_fill' AS road_layer,
                'pipeline' AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                -- pipelines get layered strictly by layer tag - hence we promote that to bridge/tunnel
                CASE WHEN layernotnull < 0 THEN 'yes' ELSE 'no' END AS int_tunnel,
                CASE WHEN layernotnull > 0 THEN 'yes' ELSE 'no' END AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                dasharrays[2] AS construction,
                substance AS service,
                'no' AS link,
                dasharrays[4] AS tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                pipe_fill AS width,
                0 AS casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM pipelines_all
            UNION ALL
            SELECT -- pipeline flange
                way,
                'pipeline_flange' AS road_layer,
                'pipeline' AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                -- pipelines get layered strictly by layer tag - hence we promote that to bridge/tunnel
                CASE WHEN layernotnull < 0 THEN 'yes' ELSE 'no' END AS int_tunnel,
                CASE WHEN layernotnull > 0 THEN 'yes' ELSE 'no' END AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                dasharrays[3] AS construction,
                substance AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                flange_width AS width,
                0 AS casing_width,
                layernotnull,
                osm_id,
                z_order
              FROM pipelines_all
            UNION ALL
            SELECT -- landuse_overlay
                way,
                'landuse_overlay' AS road_layer,
                COALESCE(
                  ('landuse_' || landuse),
                  ('military_' || military)
                ) AS feature,
                'null' AS path_type,
                'null' AS intermittent,
                'null' AS seasonal,
                'null' AS int_surface,
                'no' AS int_tunnel,
                'no' AS int_bridge,
                'null' AS int_lanes,
                'null' AS int_access,
                'null' AS construction,
                'null' AS service,
                'no' AS link,
                'null' tc_type,
                0 AS width_lane,
                0 AS width_nominal,
                0 AS width_max,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS width,
                0 AS casing_width,
                0 AS layernotnull,
                osm_id,
                z_order
              FROM planet_osm_polygon
              WHERE (landuse = 'military' OR military = 'danger_area')
                AND building IS NULL
                AND way && !bbox!
            ) AS roads_sublayers
          -- this is the full ordering of the roads stack
          ORDER BY
            CASE
              WHEN int_bridge IN ('yes') THEN layernotnull + 100
              WHEN int_tunnel NOT IN ('no') THEN layernotnull - 100
              ELSE 0
            END,
            -- this defines the ordering of layers as far as it has priority over the
            -- layer and z_oder of normal non-bridge and non-tunnel features, that is:
            --  * the non-roads layers
            --  * the casing-background-fill progression
            -- ordering beyond that is defined later because
            -- it is subordinate to the layer and z_oder
            CASE
              -- this is bridges only so it comes after all the non-bridge layers and before the road bridge layers
              WHEN road_layer = 'waterway_supplement' THEN -1
              WHEN road_layer = 'waterway_bridges_casing' THEN 0
              WHEN road_layer = 'waterway_bridges_fill' THEN 1
              WHEN road_layer = 'landuse_overlay' THEN 2
              WHEN road_layer = 'line_barriers' THEN 3
              WHEN road_layer = 'line_barrier_areas' THEN 4
              WHEN road_layer = 'ferry_routes' THEN 5
              WHEN road_layer = 'tc_casing' THEN 6
              WHEN road_layer = 'area_casing' THEN 6
              WHEN road_layer = 'junction_casing' THEN 6
              WHEN road_layer = 'casing' THEN 6
              WHEN road_layer = 'background' THEN 7
              WHEN road_layer = 'background_unpaved' THEN 7
              WHEN road_layer = 'area_fill' THEN 8
              WHEN road_layer = 'junction_fill' THEN 8
              WHEN road_layer = 'fill' THEN 8
              WHEN road_layer = 'fill_unpaved' THEN 8
              WHEN road_layer = 'fill_lanes' THEN 8
              WHEN road_layer = 'parkings_lane' THEN 8
              WHEN road_layer = 'centerline' THEN 8
              WHEN road_layer = 'lanes' THEN 8
              WHEN road_layer = 'access' THEN 8
              WHEN road_layer = 'tc_fill' THEN 8
              WHEN road_layer = 'pipeline_casing' THEN 9
              WHEN road_layer = 'pipeline_fill' THEN 9
              WHEN road_layer = 'pipeline_flange' THEN 9
              WHEN road_layer = 'centerline_top' THEN 10
            END,
            layernotnull,
            z_order,
            CASE
              WHEN road_layer = 'waterway_supplement' THEN -1
              WHEN road_layer = 'waterway_bridges_casing' THEN 0
              WHEN road_layer = 'waterway_bridges_fill' THEN 1
              WHEN road_layer = 'landuse_overlay' THEN 2
              WHEN road_layer = 'line_barriers' THEN 3
              WHEN road_layer = 'line_barrier_areas' THEN 4
              WHEN road_layer = 'ferry_routes' THEN 5
              WHEN road_layer = 'pipeline_casing' THEN 6
              WHEN road_layer = 'tc_casing' THEN 7
              WHEN road_layer = 'area_casing' THEN 8
              WHEN road_layer = 'junction_casing' THEN 9
              WHEN road_layer = 'casing' THEN 10
              WHEN road_layer = 'background' THEN 11
              WHEN road_layer = 'background_unpaved' THEN 11
              WHEN road_layer = 'area_fill' THEN 12
              WHEN road_layer = 'junction_fill' THEN 13
              WHEN road_layer = 'fill' THEN 14
              WHEN road_layer = 'fill_unpaved' THEN 15
              WHEN road_layer = 'fill_lanes' THEN 16
              WHEN road_layer = 'parkings_lane' THEN 17
              WHEN road_layer = 'centerline' THEN 18
              WHEN road_layer = 'lanes' THEN 19
              WHEN road_layer = 'access' THEN 20
              WHEN road_layer = 'tc_fill' THEN 21
              WHEN road_layer = 'pipeline_fill' THEN 22
              WHEN road_layer = 'pipeline_flange' THEN 23
              WHEN road_layer = 'centerline_top' THEN 24
            END,
            CASE
              WHEN substr(feature, 1, 16) = 'highway_sidewalk' THEN 0
              WHEN feature = 'highway_lane_parking' THEN 1
              WHEN feature = 'highway_lane_cycle' THEN 2
              WHEN feature = 'highway_lane_bus' THEN 3
              ELSE 4
            END,
            -- order by how permissive it is to the target map user
            CASE
              WHEN int_access IN ('no') THEN 0
              WHEN int_access IN ('bus') THEN 1
              WHEN int_access IN ('foot') THEN 2
              WHEN int_access IN ('horse') THEN 3
              WHEN int_access IN ('bicycle') THEN 4
              WHEN int_access IN ('vehicle') THEN 5
              WHEN int_access IN ('light') THEN 6
              WHEN int_access IN ('bus+light') THEN 7
              WHEN int_access IN ('foot+light') THEN 8
              WHEN int_access IN ('horse+light') THEN 9
              WHEN int_access IN ('bicycle+light') THEN 10
              WHEN int_access IN ('vehicle+light') THEN 11
              ELSE 10
            END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 1 END,
            CASE WHEN int_bridge IN ('mountain_pass', 'ford_node') THEN 1 ELSE 0 END,
            osm_id
        ) AS roads_sql
    properties:
      minzoom: 10
  - id: roads-noareas
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_line
      table: *roads_sql
    properties:
      minzoom: 14
  - id: roads-line-mask
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 
                                                    'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 
                                                    'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 
                                                    'cycleway', 'bridleway', 'steps', 'platform') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text 
                                   WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  
                                   WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
              ('aeroway_' || (CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END)),
              ('waterway_' || (CASE WHEN aeroway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi') THEN waterway ELSE NULL END)),
              ('barrier_' || (CASE WHEN barrier IN ('chain', 'fence', 'guard_rail', 'handrail', 'retaining_wall', 'wall') THEN barrier ELSE NULL END))
            ) AS feature,
            CASE WHEN (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 
                                   'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 
                                   'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 
                                   'cycleway', 'bridleway', 'steps', 'platform')) 
                      OR (railway IN ('platform', 'rail', 'light_rail', 'funicular', 'narrow_gauge', 'disused', 'construction', 'miniature', 'monorail', 'preserved', 'subway', 'tram'))
                      OR (aeroway IN ('runway', 'taxiway', 'helipad')) THEN
                'highway'
              WHEN waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi') THEN
                'waterway'
              ELSE
                'barrier'
            END AS ftype,
            CASE WHEN (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 
                                   'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 
                                   'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 
                                   'cycleway', 'bridleway', 'steps', 'platform')) THEN
                GREATEST(
                  carto_highway_line_width(highway, service, z(!scale_denominator!)),
                  carto_highway_line_width_mapped(
                    highway,
                    tags->'width:carriageway',
                    tags->'width',
                    tags->'lanes',
                    tags->'parking:both',
                    tags->'parking:right',
                    tags->'parking:left',
                    !bbox!,
                    !scale_denominator!
                  )
                ) + 
                CASE WHEN highway IN ('footway', 'cycleway', 'bridleway', 'steps', 'track', 'path') THEN 4.0 ELSE 1.5 END -- for tunnel casing
              WHEN (railway IN ('platform', 'rail', 'light_rail', 'funicular', 'narrow_gauge', 'disused', 'construction', 'miniature', 'monorail', 'preserved', 'subway', 'tram')) THEN
                carto_highway_line_width(railway, z(!scale_denominator!))
              WHEN (aeroway IN ('runway', 'taxiway', 'helipad')) THEN
                GREATEST(
                  carto_highway_line_width(aeroway, z(!scale_denominator!)),
                  carto_aeroway_line_width_mapped(aeroway, tags->'width', way, !bbox!, !scale_denominator!)
                )
              WHEN waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi') THEN
                carto_waterway_line_width(waterway, z(!scale_denominator!)) + 0.25
              ELSE
                GREATEST(
                  carto_barrier_line_width(barrier, z(!scale_denominator!)),
                  carto_barrier_line_width_mapped(
                    barrier,
                    tags->'width',
                    !bbox!, !scale_denominator!
                  )
                )
            END AS width,
            CASE WHEN (tags->'height') ~ '^-?\d{1,4}(\.\d+)?$' THEN
              (CASE WHEN (tags->'height')::NUMERIC <= 0.5 THEN 'yes' ELSE 'no' END)
            ELSE 'no' END AS int_access
          FROM planet_osm_line
          WHERE (((highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 
                               'secondary_link', 'tertiary_link', 'unclassified_link', 'road', 'construction', 'unclassified', 'residential', 
                               'busway', 'bus_guideway', 'raceway', 'pedestrian', 'living_street', 'service', 'track', 'path', 'footway', 
                               'cycleway', 'bridleway', 'steps', 'platform')
                OR railway IN ('platform', 'rail', 'light_rail', 'funicular', 'narrow_gauge', 'disused', 'construction', 'miniature', 'monorail', 'preserved', 'subway', 'tram')
                OR aeroway IN ('runway', 'taxiway', 'helipad')
              )
              AND ((tunnel IN ('yes', 'building_passage', 'avalanche_protector')) OR (covered = 'yes'))
            )
            OR
            (highway IN ('steps'))
            OR
            (barrier IN ('chain', 'fence', 'guard_rail', 'handrail', 'retaining_wall', 'wall'))
            OR
            ((waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')) AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))))
            AND way && !bbox!
        UNION ALL
        SELECT
            ST_Boundary(way),
            COALESCE(
              ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 
                                                'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),
              ('aeroway_' || (CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
            ) AS feature,
            'highway_area' AS ftype,
            carto_casing_line_width(COALESCE(highway, railway, aeroway), 'no'::text, z(!scale_denominator!)) AS width,
            'yes' AS int_access
          FROM planet_osm_polygon
          WHERE (highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform')
              OR railway IN ('platform')
              OR aeroway IN ('runway', 'taxiway', 'helipad')
            )
            AND ((tunnel IN ('yes', 'building_passage', 'avalanche_protector')) OR (covered = 'yes'))
            AND way && !bbox!
        ) AS roads_line_mask
    properties:
      minzoom: 14
  - id: roads-area-mask
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 
                                                'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),
              ('aeroway_' || (CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
            ) AS feature,
            carto_casing_line_width(COALESCE(highway, railway, aeroway), 'no'::text, z(!scale_denominator!)) AS casing_width
          FROM planet_osm_polygon
          WHERE (highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform')
              OR railway IN ('platform')
              OR aeroway IN ('runway', 'taxiway', 'helipad')
            )
            AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
            AND (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage', 'avalanche_protector'))
            AND (covered IS NULL OR covered != 'yes')
        ) AS roads_area_mask
    properties:
      minzoom: 14
  - id: entrances
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            tags->'entrance' AS entrance,
            access,
            CASE WHEN tags->'entrance' IN ('entrance', 'exit', 'staircase') THEN
              COALESCE(
                (SELECT
                    AVG(DEGREES(ST_Azimuth(ST_StartPoint(way), ST_EndPoint(way))))
                  FROM
                    (SELECT
                        ST_Intersection(ST_Boundary(ST_ForcePolygonCW(poly.way)), ST_Expand(pnt.way, 0.1)) AS way
                      FROM planet_osm_polygon AS poly
                      WHERE building IS NOT NULL AND building != 'no' AND ST_DWithin(poly.way, pnt.way, 0.1)
                    ) AS l
                ),
                0.0
              )
            ELSE
              0.0
            END AS direction
          FROM planet_osm_point AS pnt
          WHERE tags->'entrance' IN ('yes', 'main', 'staircase', 'home', 'garage', 'service', 'shop', 'emergency', 'exit', 'secondary', 'entrance') AND
            (tags->'indoor' = 'no' OR (tags->'indoor') IS NULL))
        AS entrances
    properties:
      minzoom: 18
  - id: golf-lines
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, geo, golf, ref, name_label[1] AS name, name_label[3] AS font
          FROM
            (SELECT
                way, tags->'golf' AS golf, carto_label_name(way, name, tags, E'\n') AS name_label, ref, 0 AS prio, 'polygon' AS geo
              FROM planet_osm_polygon
              WHERE (tags->'golf') IS NOT NULL AND way && !bbox!
            UNION ALL
            SELECT
                p.way, p.tags->'golf' AS golf, carto_label_name(p.way, p.name, p.tags, E'\n') AS name_label, coalesce(p.ref,l.ref) AS ref, 0 AS prio, 'point' AS geo
              FROM planet_osm_point p LEFT JOIN planet_osm_line l ON (ST_Intersects(p.way, l.way) AND (l.tags->'golf') IS NOT NULL)
              WHERE p.tags ? 'golf' AND p.way && !bbox!
            UNION ALL
            SELECT
                way, tags->'golf' AS golf, carto_label_name(way, name, tags, E'\n') AS name_label, ref, 1 AS prio, 'line' AS geo
              FROM planet_osm_line WHERE (tags->'golf') IS NOT NULL AND way && !bbox!
            ) AS golf
          ORDER BY prio
        ) AS golf_lines
    properties:
      minzoom: 16
  - id: aerialways
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            aerialway
          FROM planet_osm_line
          WHERE aerialway IS NOT NULL
        ) AS aerialways
    properties:
      minzoom: 12
  - id: necountries
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM ne_110m_admin_0_boundary_lines_land
        ) AS necountries
    properties:
      minzoom: 1
      maxzoom: 3
  - id: admin-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level,
            tags->'maritime' as maritime
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4')
            AND (osm_id < 0 OR (osm_id > 0 AND tags @> 'maritime=>yes'))
          ORDER BY admin_level DESC,
            CASE
              WHEN tags @> 'maritime=>yes' THEN 1
              ELSE 0
            END ASC
        ) AS admin_low_zoom
    properties:
      minzoom: 4
      maxzoom: 10
  - id: admin-mid-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level,
            tags->'maritime' as maritime
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8')
            AND (osm_id < 0 OR (osm_id > 0 AND tags @> 'maritime=>yes'))
          ORDER BY admin_level DESC,
            CASE
              WHEN tags @> 'maritime=>yes' THEN 1
              ELSE 0
            END ASC
        ) AS admin_mid_zoom
    properties:
      minzoom: 11
      maxzoom: 12
  - id: admin-high-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level,
            tags->'maritime' as maritime
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
            AND (osm_id < 0 OR (osm_id > 0 AND tags @> 'maritime=>yes'))
          ORDER BY admin_level::integer DESC, -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering
            CASE
              WHEN tags @> 'maritime=>yes' THEN 1
              ELSE 0
            END ASC
        ) AS admin_high_zoom
    properties:
      minzoom: 13
  - id: street-lamps
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE highway = 'street_lamp'
        ) AS street_lamps
    properties:
      minzoom: 19
  - id: power-minorline
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE power = 'minor_line'
        ) AS power_minorline
    properties:
      minzoom: 16
  - id: power-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE power = 'line'
        ) AS power_line
    properties:
      minzoom: 14
  - id: tourism-boundary
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            name_label[1] AS name,
            name_label[3] AS font,
            tourism
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                tourism
              FROM planet_osm_polygon
              WHERE tourism = 'theme_park'
                OR tourism = 'zoo') AS _
        ) AS tourism_boundary
    properties:
      minzoom: 10
  - id: trees
    geometry: polygon
    <<: *extents
    Datasource:
      geometry_table: planet_osm_point
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            type
          FROM
            (WITH tree_points AS
              (SELECT
                  CASE WHEN ((width_px % 2) = 0) THEN
                    ST_SnapToGrid(
                      way,
                      NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                  ELSE
                    ST_SnapToGrid(
                      way,
                      0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                      NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                  END AS point,
                  (SELECT
                      COALESCE(
                        ST_Union(
                          CASE WHEN t2.leaf_type IN ('palm') THEN
                            ST_Buffer(
                              ST_Translate(
                                carto_tree_symbol_from_db(
                                  'tree',
                                  t2.width_px*NULLIF(!scale_denominator!*0.001*0.28,0),
                                  t2.width_px,
                                  t2.leaf_type,
                                  t2.leaf_cycle
                                ),
                                ST_X(t2.way),
                                ST_Y(t2.way)
                              ),
                              (CASE WHEN width_px > 30 THEN 1.6 WHEN width_px < 15 THEN 1.0 ELSE 1.0 + 0.6*(width_px-15)/15.0 END)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          ELSE
                            St_Buffer(t2.way, (t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)*0.5)
                          END
                        ),
                        ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                      )
                    FROM
                      (SELECT
                          CASE WHEN ((width_px % 2) = 0) THEN
                            ST_SnapToGrid(
                              way,
                              NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                          ELSE
                            ST_SnapToGrid(
                              way,
                              0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                              NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                          END AS way,
                          height,
                          hash,
                          width_px,
                          leaf_type,
                          leaf_cycle
                        FROM
                          (SELECT
                              way,
                              CASE
                                WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                                ELSE 0.0
                              END AS height,
                              osm_id AS hash,
                              GREATEST(
                                carto_barrier_line_width("natural", z(!scale_denominator!)),
                                -- we round the mapped width to integer pixels to possibly get a pixel aligned symbol
                                -- and cap it at 60 pixel to avoid blowing up existing symbols too much
                                LEAST(carto_tree_diameter_mapped(
                                  "natural",
                                  (CASE WHEN "natural" = 'shrub' THEN tags->'width' ELSE tags->'diameter_crown' END),
                                  tags->'height',
                                  tags->'circumference',
                                  tags->'diameter',
                                  !bbox!,
                                  !scale_denominator!), 60)
                              ) AS width_px,
                              carto_leaf_type_classify(tags->'leaf_type', tags->'species', tags->'genus', tags->'family', tags->'taxon', NULL) AS leaf_type,
                              tags->'leaf_cycle' AS leaf_cycle
                            FROM planet_osm_point
                            WHERE "natural" IN ('tree', 'shrub')
                              -- this search radius expansion is based on the upper bound for practical width_px 
                              -- considering there are very few trees with more than 50m crown diameter in reality
                              AND way && ST_Expand(
                                t1.way,
                                0.5*(t1.width_px+GREATEST(t1.width_px,
                                  LEAST(carto_tree_diameter_mapped('tree', '50', NULL, NULL, NULL, !bbox!, !scale_denominator!), 60))+2.0)*
                                  NULLIF(!scale_denominator!*0.001*0.28,0))
                          ) AS _
                      ) AS t2
                    WHERE ((t2.height > t1.height) OR ((t2.height = t1.height) AND (t2.width_px > t1.width_px)) OR ((t2.height = t1.height) AND (t2.width_px = t1.width_px) AND (t2.hash > t1.hash)))
                      AND ST_DWithin(t2.way, t1.way, 0.5*(t1.width_px+t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      AND t2.width_px >= 5
                      AND t1.width_px >= 5
                  ) AS others,
                  carto_leaf_type_classify(leaf_type, species, genus, family, taxon, NULL) AS leaf_type,
                  leaf_cycle,
                  width_px,
                  width_px*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                FROM
                  (SELECT
                      way,
                      CASE
                        WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                        ELSE 0.0
                      END AS height,
                      osm_id AS hash,
                      tags->'leaf_type' AS leaf_type,
                      tags->'leaf_cycle' AS leaf_cycle,
                      tags->'taxon' AS taxon,
                      COALESCE(tags->'family', tags->'taxon:family') AS family,
                      COALESCE(tags->'genus', tags->'taxon:genus') AS genus,
                      COALESCE(tags->'species', tags->'taxon:species') AS species,
                      GREATEST(
                        carto_barrier_line_width("natural", z(!scale_denominator!)),
                        -- we round the mapped width to integer pixels to possibly get a pixel aligned symbol
                        -- and cap it at 60 pixel to avoid blowing up existing symbols too much
                        LEAST(carto_tree_diameter_mapped(
                          "natural",
                          (CASE WHEN "natural" = 'shrub' THEN tags->'width' ELSE tags->'diameter_crown' END),
                          tags->'height',
                          tags->'circumference',
                          tags->'diameter',
                          !bbox!,
                          !scale_denominator!), 60)
                      ) AS width_px
                    FROM planet_osm_point
                    WHERE "natural" IN ('tree', 'shrub') AND way && !bbox!) AS t1
              ),
            tree_rows AS
              (SELECT
                -- this cuts out barrier=entrance nodes - in a width reflecting whatever highway=* intersects
                (ST_Dump(ST_CollectionExtract(ST_Difference(
                  way,
                  COALESCE(
                    (SELECT
                        ST_Union(ST_Buffer(way, width))
                      FROM
                        (SELECT
                            e.way AS way,
                            (COALESCE(
                              (SELECT
                                  GREATEST(
                                    carto_highway_line_width(h.highway, h.service, z(!scale_denominator!)),
                                    carto_highway_line_width_mapped(h.highway, h.tags->'width', h.tags->'lanes', !bbox!, !scale_denominator!))
                                FROM planet_osm_line h
                                WHERE ST_Intersects(h.way, e.way) AND h.highway IN
                                  ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary',
                                   'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service',
                                   'living_street', 'pedestrian', 'steps', 'road', 'bridleway', 'footway', 'cycleway', 'path', 'track',
                                   'busway', 'bus_guideway')
                                ORDER BY carto_highway_line_width(h.highway, h.service, z(!scale_denominator!)) DESC LIMIT 1
                              ),
                              carto_highway_line_width('footway', z(!scale_denominator!))
                            ) + 2.5 + l.width_px)*0.5*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                          FROM planet_osm_point e
                          WHERE ST_Intersects(l.way, e.way)
                            AND e.barrier IN ('entrance')
                        ) AS entrances
                      WHERE (way && ST_Expand(!bbox!, (0.5*
                              (carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.0 + l.width_px)*
                              NULLIF(!scale_denominator!*0.001*0.28,0)))
                            )
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                ), 2))).geom AS way,
                feature,
                length,
                height,
                leaf_type,
                leaf_cycle,
                taxon,
                family,
                genus,
                species,
                width_px,
                width
              FROM
                (SELECT
                    way,
                    feature,
                    length,
                    height,
                    leaf_type,
                    leaf_cycle,
                    taxon,
                    family,
                    genus,
                    species,
                    width_px,
                    width_px*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                  FROM
                    (SELECT
                        way,
                        COALESCE("natural", barrier) AS feature,
                        ST_Length(way)*(CASE WHEN "natural" = 'tree_row' THEN 1000 ELSE 1.0 END) AS length,
                        CASE
                          WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                          ELSE 0.0
                        END AS height,
                        tags->'leaf_type' AS leaf_type,
                        tags->'leaf_cycle' AS leaf_cycle,
                        tags->'taxon' AS taxon,
                        COALESCE(tags->'family', tags->'taxon:family') AS family,
                        COALESCE(tags->'genus', tags->'taxon:genus') AS genus,
                        COALESCE(tags->'species', tags->'taxon:species') AS species,
                        GREATEST(
                          carto_barrier_line_width(COALESCE("natural", barrier), z(!scale_denominator!)),
                          -- we do not round the mapped width here because tree row symbols are not pixel aligned
                          -- we cap it at 60 pixel to avoid blowing up existing symbols too much
                          LEAST(carto_treerow_line_width_mapped(COALESCE("natural", barrier), tags->'width', tags->'height', !bbox!, !scale_denominator!), 60)
                        ) AS width_px
                      FROM planet_osm_line
                      WHERE ("natural" = 'tree_row' OR barrier = 'hedge') AND way && !bbox!
                    ) AS _
                ) AS l
              ),
            row_trees_raw AS
              (SELECT
                  way,
                  others
                FROM
                  (SELECT
                      point,
                      ST_Translate(
                        carto_tree_symbol_from_db(
                          'tree',
                          width,
                          width_px,
                          leaf_type,
                          leaf_cycle
                        ),
                        ST_X(point),
                        ST_Y(point)
                      ) AS way,
                      COALESCE(
                        ST_Union(
                          St_Difference(
                            St_Buffer(prev_next, width*0.5),
                            COALESCE(
                              St_ConvexHull(
                                St_Collect(
                                  St_Intersection(
                                    ST_Boundary(
                                      St_Buffer(prev_next, width*0.5)
                                    ),
                                    ST_Boundary(
                                      St_Buffer(point, width*0.5)
                                    )
                                  ),
                                  St_Buffer(point, width*0.25)
                                )
                              ),
                              ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                            )
                          ),
                          (SELECT
                              COALESCE(
                                ST_Union(way),
                                ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                              )
                            FROM
                              -- these are other single trees
                              (SELECT
                                  St_Buffer(way, (width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)*0.5) AS way
                                FROM
                                  (SELECT
                                      CASE WHEN ((width_px % 2) = 0) THEN
                                        ST_SnapToGrid(
                                          way,
                                          NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                                      ELSE
                                        ST_SnapToGrid(
                                          way,
                                          0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                                          NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                                      END AS way,
                                      width_px
                                    FROM
                                      (SELECT
                                          way,
                                          GREATEST(
                                            carto_barrier_line_width("natural", z(!scale_denominator!)),
                                            -- we round the mapped width to integer pixels to possibly get a pixel aligned symbol
                                            -- and cap it at 60 pixel to avoid blowing up existing symbols too much
                                            LEAST(carto_tree_diameter_mapped(
                                              "natural",
                                              (CASE WHEN "natural" = 'shrub' THEN tags->'width' ELSE tags->'diameter_crown' END),
                                              tags->'height',
                                              tags->'circumference',
                                              tags->'diameter',
                                              !bbox!,
                                              !scale_denominator!), 60)
                                          ) AS width_px
                                        FROM planet_osm_point
                                        WHERE "natural" IN ('tree', 'shrub')
                                          -- this search radius expansion is based on the upper bound for practical width_px 
                                          -- considering there are very few trees with more than 50m crown diameter in reality
                                          AND way && ST_Expand(
                                            t1.point,
                                            0.5*(t1.width_px+GREATEST(t1.width_px,
                                              LEAST(carto_tree_diameter_mapped('tree', '50', NULL, NULL, NULL, !bbox!, !scale_denominator!), 60))+2.0)*
                                              NULLIF(!scale_denominator!*0.001*0.28,0))
                                      ) AS _
                                  ) AS t2
                                WHERE ST_DWithin(t2.way, t1.point, 0.5*(t1.width_px+t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                                  AND t2.width_px >= 5
                                  AND t1.width_px >= 5
                              UNION ALL
                              -- these are other tree rows/hedges - treated as whole (buffered) lines
                              SELECT
                                  St_Buffer(way, (width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)*0.5) AS way
                                FROM
                                  (SELECT
                                      way,
                                      ST_Length(way)*(CASE WHEN "natural" = 'tree_row' THEN 1000 ELSE 1.0 END) AS length,
                                      CASE
                                        WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                                        ELSE 0.0
                                      END AS height,
                                      tags->'leaf_type' AS leaf_type,
                                      tags->'leaf_cycle' AS leaf_cycle,
                                      tags->'taxon' AS taxon,
                                      COALESCE(tags->'family', tags->'taxon:family') AS family,
                                      COALESCE(tags->'genus', tags->'taxon:genus') AS genus,
                                      COALESCE(tags->'species', tags->'taxon:species') AS species,
                                      GREATEST(
                                        carto_barrier_line_width(COALESCE("natural", barrier), z(!scale_denominator!)),
                                        -- we do not round the mapped width here because tree row symbols are not pixel aligned
                                        -- we cap it at 60 pixel to avoid blowing up existing symbols too much
                                        LEAST(carto_treerow_line_width_mapped(COALESCE("natural", barrier), tags->'width', tags->'height', !bbox!, !scale_denominator!), 60)
                                      ) AS width_px
                                    FROM planet_osm_line
                                    WHERE ("natural" = 'tree_row' OR barrier = 'hedge')
                                      -- based on both tree rows always being drawn at the same width
                                      AND way && ST_Expand(
                                        t1.point,
                                        (t1.width_px+1.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                                  ) AS t2
                                WHERE ((t2.height > t1.height) OR ((t2.height = t1.height) AND (t2.width_px > t1.width_px)) OR ((t2.height = t1.height) AND (t2.width_px = t1.width_px) AND (t2.length > t1.length)))
                                  AND ST_DWithin(t2.way, t1.point, 0.5*(t1.width_px+t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                                  AND t2.width_px >= 5
                                  AND t1.width_px >= 5) AS o
                          )
                        ), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                      ) AS others,
                      point_index,
                      is_closed,
                      length,
                      height,
                      leaf_type,
                      leaf_cycle,
                      width,
                      width_px
                    FROM
                      (SELECT
                          point,
                          point_index,
                          prev_next,
                          line,
                          is_closed,
                          length,
                          height,
                          carto_leaf_type_classify(leaf_type, species, genus, family, taxon, point_index) AS leaf_type,
                          leaf_cycle,
                          width,
                          width_px
                        FROM
                          (SELECT
                              (way_points).geom AS point,
                              (way_points).path[1] AS point_index,
                              (CASE WHEN carto_leaf_type_classify(leaf_type, species, genus, family, taxon, 0) IS NULL THEN
                                ST_Union(
                                  COALESCE(ST_PointN(way_seg, CASE WHEN (way_points).path[1] = 1 THEN -1 ELSE (way_points).path[1]-1 END), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)),
                                  COALESCE(ST_PointN(way_seg, (way_points).path[1]+1), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857))
                                )
                              ELSE
                                -- ST_PointN(way_seg, CASE WHEN (way_points).path[1] = 1 THEN -1 ELSE (way_points).path[1]-1 END)
                                ST_Union(
                                  COALESCE(ST_PointN(way_seg, CASE WHEN (way_points).path[1] = 1 THEN -1 ELSE (way_points).path[1]-1 END), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)),
                                  COALESCE(ST_PointN(way_seg, (way_points).path[1]+1), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857))
                                )
                              END) AS prev_next,
                              line,
                              is_closed,
                              length,
                              height,
                              leaf_type,
                              leaf_cycle,
                              taxon,
                              family,
                              genus,
                              species,
                              width,
                              width_px
                            FROM
                              (SELECT
                                  ST_DumpPoints(way_seg) AS way_points,
                                  start_point,
                                  way_seg,
                                  line,
                                  is_closed,
                                  length,
                                  height,
                                  leaf_type,
                                  leaf_cycle,
                                  taxon,
                                  family,
                                  genus,
                                  species,
                                  width,
                                  width_px
                                FROM
                                  (SELECT
                                      ST_Segmentize(way, 0.75*width) AS way_seg,
                                      ST_StartPoint(way) AS start_point,
                                      way AS line,
                                      ST_IsClosed(way) AS is_closed,
                                      length,
                                      height,
                                      leaf_type,
                                      leaf_cycle,
                                      taxon,
                                      family,
                                      genus,
                                      species,
                                      width,
                                      width_px
                                    FROM tree_rows
                                    WHERE width_px >= 5
                                  ) AS tree_rows_seg_raw
                              ) AS tree_rows_seg
                            -- we skip the first point for closed ways to avoid a duplicate position
                            WHERE CASE WHEN is_closed THEN NOT(ST_Equals((way_points).geom, start_point)) ELSE TRUE END
                          ) AS t1a
                        -- we can speed things up quite a bit at the higher zoom levels by dropping points outside the bounding box
                        -- for tree rows/hedges much larger than the bounding box
                        WHERE point && ST_Expand(!bbox!,(width_px+1.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      ) AS t1
                  ) AS _
              ),
            row_trees AS
              (SELECT
                  ST_Difference(
                    way,
                    others
                  ) AS way,
                  'row_tree' AS type
                FROM row_trees_raw
              ),
            single_trees AS
              (SELECT
                  ST_Difference(
                    ST_Translate(
                      carto_tree_symbol_from_db(
                        'tree',
                        width,
                        width_px,
                        leaf_type,
                        leaf_cycle
                      ),
                      ST_X(point),
                      ST_Y(point)
                    ),
                    others
                  ) AS way,
                  'tree' AS type
                FROM tree_points
                WHERE width_px >= 5
              ),
            trees_small AS
              (SELECT
                  St_Buffer(point, width*0.5) AS way,
                  'tree_small' AS type
                FROM tree_points
                WHERE width_px < 5
              UNION ALL
              SELECT
                  St_Buffer(way, width*0.5) AS way,
                  feature AS type
                FROM tree_rows
                WHERE width_px < 5)
            SELECT
                way,
                type
              FROM single_trees
            UNION ALL
            SELECT
                way,
                type
              FROM row_trees
            UNION ALL
            SELECT
                way,
                type
              FROM trees_small
            ) AS _
        ) AS trees
    properties:
      minzoom: 16
  - id: country-names
    class: country
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            name_label[1] AS name,
            name_label[3] AS font
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                carto_label_name(way, name, tags, E'\n') AS name_label
              FROM planet_osm_polygon
              WHERE boundary = 'administrative'
                AND admin_level = '2'
                AND way_area > 100*!pixel_width!::real*!pixel_height!::real
              ORDER BY way_area DESC) AS _
          WHERE name_label[1] IS NOT NULL
        ) AS country_names
    properties:
      minzoom: 2
  - id: capital-names
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name_label[1] AS name,
            name_label[3] AS font,
            population,
            dir
          FROM
            (SELECT
                way,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                CASE
                  WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER ELSE 0
                END AS population,
                round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
              FROM planet_osm_point
              WHERE place IN ('city', 'town', 'village', 'hamlet')
                AND tags @> 'capital=>yes'
              ORDER BY population DESC) AS _
          WHERE name_label[1] IS NOT NULL
        ) AS capital_names
    properties:
      minzoom: 3
      maxzoom: 15
  - id: state-names
    class: state
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            name_label[1] AS name,
            name_label[3] AS font,
            ref
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                ref
              FROM planet_osm_polygon
              WHERE boundary = 'administrative'
                AND admin_level = '4'
                AND way_area > 100*!pixel_width!::real*!pixel_height!::real
              ORDER BY way_area DESC) AS _
          WHERE name_label[1] IS NOT NULL
        ) AS state_names
    properties:
      minzoom: 4
  - id: placenames-medium
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name_label[1] AS name,
            name_label[3] AS font,
            score,
            CASE
              WHEN (place = 'city') THEN 1
              ELSE 2
            END as category,
            round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
          FROM 
            (SELECT
                osm_id,
                way,
                place,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                (
                  (CASE
                    WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER
                    WHEN (place = 'city') THEN 100000
                    WHEN (place = 'town') THEN 1000
                    ELSE 1
                  END)
                  *
                  (CASE
                    WHEN (tags @> 'capital=>4') THEN 2
                    ELSE 1
                  END)
                ) AS score
              FROM planet_osm_point
              WHERE place IN ('city', 'town')
                AND NOT (tags @> 'capital=>yes')
            ) as p
          WHERE name_label[1] IS NOT NULL
          ORDER BY score DESC, length(name_label[1]) DESC, name_label[1]
        ) AS placenames_medium
    properties:
      minzoom: 4
      maxzoom: 15
  - id: placenames-small
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            place,
            -- for debugging: name_label[1]||' '||COALESCE(name_label[2], '')||' '||COALESCE(name_label[3], '') AS name,
            name_label[1] AS name,
            name_label[3] AS font
          FROM
            (SELECT
                way,
                place,
                carto_label_name(way, name, tags, E'\n') AS name_label
              FROM planet_osm_point
              WHERE place IN ('village', 'hamlet')
                 AND NOT tags @> 'capital=>yes'
                 OR place IN ('suburb', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm', 'ac_test_label', 'ac_test_label_small', 'ac_test_label_left')) AS _
          WHERE name_label[1] IS NOT NULL
          ORDER BY CASE
              WHEN place = 'suburb' THEN 3
              WHEN place = 'village' THEN 4
              WHEN place = 'hamlet' THEN 5
              WHEN place = 'neighbourhood' THEN 6
              WHEN place = 'locality' THEN 7
              WHEN place = 'isolated_dwelling' THEN 8
              WHEN place = 'farm' THEN 9
              WHEN place = 'ac_test_label_left' THEN 10
              WHEN place = 'ac_test_label' THEN 11
              WHEN place = 'ac_test_label_small' THEN 11
            END ASC, length(name_label[1]) DESC, name_label[1]
        ) AS placenames_small
    properties:
      minzoom: 12
  - id: line-barrier-entrances
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_point
      table: |-
        (SELECT way, COALESCE(historic, barrier) AS feature FROM
          (WITH entrance_lines AS
            (SELECT
              ST_Intersection(
                l.way,
                ST_Buffer(
                  e.way,
                  (COALESCE(
                    (SELECT
                       GREATEST(
                         carto_highway_line_width(highway, service, z(!scale_denominator!)),
                         carto_highway_line_width_mapped(highway, tags->'width', tags->'lanes', !bbox!, !scale_denominator!))
                       FROM planet_osm_line h 
                       WHERE ST_Intersects(h.way, e.way) AND highway IN 
                        ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 
                         'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service', 
                         'living_street', 'pedestrian', 'steps', 'road', 'bridleway', 'footway', 'cycleway', 'path', 'track',
                         'busway', 'bus_guideway')
                        ORDER BY carto_highway_line_width(highway, service, z(!scale_denominator!)) DESC LIMIT 1
                    ),
                    carto_highway_line_width('footway', z(!scale_denominator!))
                  ) + 2.5 + carto_barrier_line_width(
                        CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE l.barrier END,
                        z(!scale_denominator!)
                  ))*0.5*NULLIF(!scale_denominator!*0.001*0.28,0)
                )
              ) AS way,
              ('barrier_' || (CASE WHEN l.barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                    'handrail', 'hedge', 'retaining_wall', 'wall') THEN l.barrier ELSE NULL END)) AS barrier,
              ('historic_' || (CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE NULL END)) AS historic
              FROM planet_osm_point e
              JOIN planet_osm_line l ON ST_Intersects(l.way, e.way)
              WHERE e.barrier IN ('entrance')
                AND (e.way && ST_Expand(!bbox!, (0.5*(carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.0 +
                     carto_barrier_line_width('citywalls', z(!scale_denominator!)))*NULLIF(!scale_denominator!*0.001*0.28,0))))
                AND (l.barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                    'handrail', 'hedge', 'retaining_wall', 'wall')
                  OR l.historic = 'citywalls')
                AND (l.waterway IS NULL OR l.waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi'))
                GROUP BY e.way, l.way, l.barrier, l.historic)
           SELECT
               ST_StartPoint(way) AS way,
               historic, barrier
             FROM entrance_lines
           UNION ALL
           SELECT
               ST_EndPoint(way) AS way,
               historic, barrier
             FROM entrance_lines
          ) AS lbe
        ) AS line_barrier_entrances
    properties:
      minzoom: 16
  - id: amenity-points
    geometry: point
    <<: *extents
    Datasource:
      geometry_table: planet_osm_point
      <<: *osm2pgsql
      table: |-
        (SELECT
            *
          FROM
          ( -- this subselect (with CTE) allows splitting and where necessary duplicating features for separate rendering of symbol and label
            WITH zoom_thresholds AS
            (SELECT -- this subselect generates the zoom level threshols and allows filtering for them
                way,
                "name",
                "lang",
                "font",
                "ref",
                "operator",
                "brand",
                "osm_id",
                combined.feature AS feature,
                combined.variant AS variant,
                CASE
                  WHEN combined.feature = 'tourism_information' THEN
                    CASE
                      WHEN combined.variant = 'information_audioguide' THEN 19
                      WHEN combined.variant = 'information_board' THEN 19
                      WHEN combined.variant = 'information_sign' THEN 19
                      WHEN combined.variant = 'information_guidepost' THEN 19
                      WHEN combined.variant = 'information_map' THEN 19
                      WHEN combined.variant = 'information_terminal' THEN 19
                      ELSE 17
                    END
                  WHEN combined.feature = 'amenity_toilets' THEN
                    CASE
                      WHEN combined.variant = 'access_yes' THEN 17
                      ELSE 18
                    END
                  WHEN combined.feature = 'amenity_parking' THEN
                    CASE
                      WHEN combined.variant = 'street_side' THEN GREATEST(18, zoom_threshold)
                      ELSE GREATEST(14, zoom_threshold)
                    END
                  WHEN combined.feature = 'amenity_recycling' THEN
                    CASE
                      WHEN combined.variant = 'centre' THEN 17
                      ELSE 19
                    END
                  WHEN combined.feature = 'aeroway_aerodrome' THEN
                    CASE
                      WHEN combined.variant = 'public' THEN 10
                      ELSE 11
                    END
                  WHEN combined.feature = 'power_generator/wind' THEN
                    CASE
                      WHEN combined.variant = 'roof' THEN 19
                      ELSE 15
                    END
                  WHEN combined.feature = 'man_made_mast' THEN
                    CASE
                      WHEN combined.variant = 'height_160' THEN 14
                      WHEN combined.variant = 'height_80' THEN 15
                      WHEN combined.variant = 'height_40' THEN 16
                      WHEN combined.variant = 'height_20' THEN 17
                      ELSE 18
                    END
                  WHEN combined.feature = 'man_made_tower' THEN
                    CASE
                      WHEN combined.variant = 'height_160' THEN 14
                      WHEN combined.variant = 'height_80' THEN 15
                      WHEN combined.variant = 'height_40' THEN 16
                      WHEN combined.variant = 'minor_types' THEN 18
                      ELSE 17
                    END
                  WHEN combined.feature = 'historic_memorial' THEN
                    CASE
                      WHEN combined.variant = 'medium' THEN 18
                      WHEN combined.variant = 'small' THEN 19
                      ELSE 17
                    END
                  WHEN combined.feature = 'historic_castle' THEN
                    CASE
                      WHEN combined.variant = 'minor_types' THEN 16
                      ELSE 15
                    END
                  WHEN combined.feature = 'shop' THEN
                    CASE
                      WHEN combined.variant = 'early' THEN 16
                      ELSE 17
                    END
                  WHEN combined.feature = 'office' THEN
                    CASE
                      WHEN combined.variant = 'diplomatic' THEN 17
                      ELSE 18
                    END
                  WHEN combined.feature IN ('aeroway_helipad', 'amenity_bus_station', 'amenity_cinema', 'amenity_clinic', 'amenity_courthouse', 'amenity_fire_station', 'amenity_hunting_stand', 'amenity_library', 'amenity_place_of_worship', 'amenity_police', 'amenity_shelter', 'amenity_theatre', 'amenity_townhall', 'barrier_toll_booth', 'highway_bus_stop', 'historic_archaeological_site', 'historic_fort', 'historic_manor', 'historic_monument', 'historic_wayside_cross', 'historic_wayside_shrine', 'leisure_beach_resort', 'man_made_cross', 'man_made_windmill', 'tourism_museum', 'tourism_picnic_site', 'tourism_viewpoint') THEN 16
                  WHEN combined.feature IN ('aerialway_station', 'natural_volcano', 'railway_halt', 'railway_tram_stop', 'tourism_alpine_hut', 'tourism_wilderness_hut') THEN 13
                  WHEN combined.feature IN ('aeroway_gate', 'amenity_arts_centre', 'amenity_atm', 'amenity_bank', 'amenity_bar', 'amenity_bbq', 'amenity_bicycle_rental', 'amenity_biergarten', 'amenity_cafe', 'amenity_car_rental', 'amenity_car_wash', 'amenity_charging_station', 'amenity_community_centre', 'amenity_dentist', 'amenity_doctors', 'amenity_drinking_water', 'amenity_driving_school', 'amenity_fast_food', 'amenity_food_court', 'amenity_fountain', 'amenity_fuel', 'amenity_ice_cream', 'amenity_nightclub', 'amenity_pharmacy', 'amenity_phone', 'amenity_post_box', 'amenity_post_office', 'amenity_prison', 'amenity_pub', 'amenity_public_bath', 'amenity_restaurant', 'amenity_social_facility', 'amenity_taxi', 'amenity_veterinary', 'amenity_water_point', 'barrier_block', 'barrier_bollard', 'barrier_gate', 'barrier_lift_gate', 'barrier_log', 'barrier_swing_gate', 'highway_traffic_signals', 'historic_city_gate', 'leisure_firepit', 'leisure_miniature_golf', 'leisure_picnic_table', 'leisure_playground', 'leisure_sauna', 'leisure_slipway', 'man_made_obelisk', 'man_made_water_tap', 'man_made_water_tower', 'military_bunker', 'shop_massage', 'tourism_artwork', 'tourism_camp_site', 'tourism_caravan_site', 'tourism_charlet', 'tourism_guest_house', 'tourism_hostel', 'tourism_hotel', 'tourism_motel') THEN 17
                  WHEN combined.feature IN ('amenity_bench', 'amenity_lounger', 'amenity_parking_entrance/multi-storey', 'amenity_parking_entrance/underground', 'amenity_shower', 'highway_elevator', 'railway_subway_entrance', 'tourism_apartment') THEN 18
                  WHEN combined.feature IN ('amenity_bicycle_parking', 'amenity_motorcycle_parking', 'leisure_water_park') THEN GREATEST(14, zoom_threshold)
                  WHEN combined.feature IN ('advertising_column', 'amenity_waste_basket', 'amenity_waste_disposal', 'emergency_phone') THEN 19
                  WHEN combined.feature IN ('amenity_hospital', 'leisure_golf_course', 'man_made_lighthouse', 'man_made_water_well', 'natural_cave_entrance', 'natural_saddle', 'railway_crossing') THEN 15
                  WHEN combined.feature IN ('man_made_communications_tower', 'natural_geyser', 'natural_hot_spring', 'natural_spring', 'railway_level_crossing') THEN 14
                  WHEN combined.feature IN ('railway_station') THEN 12
                  WHEN combined.feature IN ('natural_peak', 'natural_peak/viewpoint') THEN 11
                  WHEN combined.feature IN ('amenity_marketplace') THEN GREATEST(16, zoom_threshold)
                END AS start_symbol,
                CASE
                  WHEN combined.feature = 'tourism_information' THEN
                    CASE
                      WHEN combined.variant = 'information_audioguide' THEN 19
                      WHEN combined.variant = 'information_board' THEN 19
                      WHEN combined.variant = 'information_sign' THEN 19
                      WHEN combined.variant = 'information_guidepost' THEN 19
                      WHEN combined.variant = 'information_map' THEN 19
                      WHEN combined.variant = 'information_terminal' THEN 19
                      ELSE 17
                    END
                  WHEN combined.feature = 'amenity_recycling' THEN
                    CASE
                      WHEN combined.variant = 'centre' THEN 17
                      ELSE 19
                    END
                  WHEN combined.feature = 'aeroway_aerodrome' THEN
                    CASE
                      WHEN combined.variant = 'public' THEN 10
                      ELSE 11
                    END
                  WHEN combined.feature = 'power_generator/wind' THEN
                    CASE
                      WHEN combined.variant = 'roof' THEN 19
                      ELSE 17
                    END
                  WHEN combined.feature = 'man_made_tower' THEN
                    CASE
                      WHEN combined.variant = 'height_160' THEN 17
                      WHEN combined.variant = 'height_80' THEN 17
                      WHEN combined.variant = 'height_40' THEN 17
                      WHEN combined.variant = 'minor_types' THEN 19
                      ELSE 18
                    END
                  WHEN combined.feature = 'historic_memorial' THEN
                    CASE
                      WHEN combined.variant = 'medium' THEN 18
                      WHEN combined.variant = 'small' THEN 19
                      ELSE 17
                    END
                  WHEN combined.feature = 'office' THEN
                    CASE
                      WHEN combined.variant = 'diplomatic' THEN 17
                      WHEN combined.variant = 'large' THEN 18
                      ELSE 19
                    END
                  WHEN combined.feature IN ('amenity_arts_centre', 'amenity_atm', 'amenity_bank', 'amenity_bar', 'amenity_bbq', 'amenity_bicycle_rental', 'amenity_biergarten', 'amenity_bus_station', 'amenity_cafe', 'amenity_car_rental', 'amenity_car_wash', 'amenity_charging_station', 'amenity_cinema', 'amenity_clinic', 'amenity_community_centre', 'amenity_courthouse', 'amenity_dentist', 'amenity_doctors', 'amenity_drinking_water', 'amenity_fast_food', 'amenity_fire_station', 'amenity_food_court', 'amenity_fountain', 'amenity_fuel', 'amenity_hunting_stand', 'amenity_ice_cream', 'amenity_library', 'amenity_nightclub', 'amenity_pharmacy', 'amenity_place_of_worship', 'amenity_police', 'amenity_post_office', 'amenity_prison', 'amenity_pub', 'amenity_public_bath', 'amenity_restaurant', 'amenity_shelter', 'amenity_social_facility', 'amenity_taxi', 'amenity_theatre', 'amenity_townhall', 'amenity_veterinary', 'amenity_water_point', 'barrier_toll_booth', 'highway_bus_stop', 'historic_archaeological_site', 'historic_city_gate', 'historic_wayside_cross', 'historic_wayside_shrine', 'leisure_beach_resort', 'leisure_firepit', 'leisure_miniature_golf', 'leisure_picnic_table', 'leisure_playground', 'leisure_sauna', 'leisure_slipway', 'man_made_communications_tower', 'man_made_cross', 'man_made_obelisk', 'man_made_water_tap', 'man_made_water_tower', 'man_made_windmill', 'military_bunker', 'natural_tree', 'shop_massage', 'tourism_artwork', 'tourism_camp_site', 'tourism_caravan_site', 'tourism_charlet', 'tourism_guest_house', 'tourism_hostel', 'tourism_hotel', 'tourism_motel', 'tourism_museum', 'tourism_picnic_site') THEN 17
                  WHEN combined.feature IN ('aerialway_station', 'natural_bay', 'railway_station', 'tourism_alpine_hut', 'tourism_wilderness_hut') THEN 14
                  WHEN combined.feature IN ('amenity_driving_school', 'amenity_shower', 'man_made_mast', 'shop', 'tourism_apartment') THEN 18
                  WHEN combined.feature IN ('aeroway_helipad', 'amenity_hospital', 'historic_castle', 'historic_fort', 'historic_manor', 'historic_monument', 'man_made_water_well', 'natural_geyser', 'natural_hot_spring', 'natural_spring', 'railway_tram_stop', 'tourism_viewpoint') THEN 16
                  WHEN combined.feature IN ('railway_subway_entrance') THEN 19
                  WHEN combined.feature IN ('leisure_golf_course', 'man_made_lighthouse', 'natural_cave_entrance', 'natural_saddle', 'natural_volcano', 'railway_halt') THEN 15
                  WHEN combined.feature IN ('natural_peak', 'natural_peak/viewpoint') THEN 13
                  WHEN combined.feature IN ('man_made_bridge') THEN GREATEST(12, zoom_threshold)
                  WHEN combined.feature IN ('amenity_marketplace') THEN GREATEST(17, zoom_threshold)
                  WHEN combined.feature IN ('leisure_swimming_pool', 'leisure_water_park') THEN GREATEST(14, zoom_threshold)
                  WHEN combined.feature IN ('aeroway_apron', 'amenity_college', 'amenity_grave_yard', 'amenity_kindergarten', 'amenity_school', 'amenity_university', 'landuse_allotments', 'landuse_basin', 'landuse_brownfield', 'landuse_cemetery', 'landuse_commercial', 'landuse_construction', 'landuse_farmland', 'landuse_farmyard', 'landuse_forest', 'landuse_grass', 'landuse_greenhouse_horticulture', 'landuse_landfill', 'landuse_meadow', 'landuse_military', 'landuse_quarry', 'landuse_recreation_ground', 'landuse_reservoir', 'landuse_village_green', 'leisure_common', 'leisure_dog_park', 'leisure_fitness_centre', 'leisure_fitness_station', 'leisure_garden', 'leisure_park', 'leisure_sport_centre', 'leisure_stadium', 'military_danger_area', 'natural_bare_rock', 'natural_beach', 'natural_glacier', 'natural_grassland', 'natural_heath', 'natural_mud', 'natural_reef', 'natural_sand', 'natural_scree', 'natural_scrub', 'natural_shingle', 'natural_shoal', 'natural_water', 'natural_wetland', 'natural_wood', 'place_archipelago', 'place_island', 'power_generator', 'power_plant', 'shop_mall', 'tourism_theme_park', 'tourism_zoo') THEN GREATEST(10, zoom_threshold)
                  WHEN combined.feature IN ('place_islet') THEN GREATEST(11, zoom_threshold)
                  WHEN combined.feature IN ('highway_rest_area', 'highway_services', 'landuse_garages', 'landuse_industrial', 'landuse_railway', 'landuse_residential', 'landuse_retail', 'man_made_works', 'power_substation') THEN GREATEST(13, zoom_threshold)
                  WHEN combined.feature IN ('leisure_marina') THEN GREATEST(15, zoom_threshold)
                END AS start_label,
                f.prio AS prio,
                "height" AS score,
                "int_elevation",
                "shelter_type",
                "information",
                "int_access",
                "parking",
                "int_bench_type",
                "backrest",
                "recycling_type",
                "int_text_dy_viewpoint",
                "int_offset_x_viewpoint",
                "int_offset_y_viewpoint",
                "int_width_viewpoint",
                "int_height_viewpoint",
                "icao",
                "iata",
                "drinking_water",
                "intermittent",
                "int_text_offset_tree",
                "location",
                "height",
                "tower:type",
                "tower:construction",
                "memorial",
                "castle_type",
                "religion",
                "shop",
                "office",
                "diplomatic",
                "building",
                way_area,
                way_length,
                way_pixels
              FROM
              (SELECT -- this subselect generates the variant and zoom_threshold columns and expands arrays
                  CASE
                    WHEN feature IN ('amenity_bicycle_parking', 'amenity_motorcycle_parking', 'amenity_parking', 'natural_peak', 'natural_peak/viewpoint') THEN
                      ST_SnapToGrid(
                        way,
                        NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                    ELSE way
                  END AS way,
                  "_name_label"[1] AS "name",
                  "_name_label"[2] AS "lang",
                  "_name_label"[3] AS "font",
                  "ref",
                  "operator",
                  "brand",
                  "osm_id",
                  feature,
                  CASE
                    WHEN feature = 'tourism_information' THEN
                      CASE
                        WHEN information IN ('audioguide') THEN 'information_audioguide'
                        WHEN information IN ('board') THEN 'information_board'
                        WHEN information IN ('sign') THEN 'information_sign'
                        WHEN information IN ('guidepost') THEN 'information_guidepost'
                        WHEN information IN ('map', 'tactile_map') THEN 'information_map'
                        WHEN information IN ('terminal') THEN 'information_terminal'
                        WHEN information IN ('visitor_centre') THEN 'information_visitor_centre'
                      END
                    WHEN feature = 'amenity_toilets' THEN
                      CASE
                        WHEN int_access = 'yes' THEN 'access_yes'
                      END
                    WHEN feature = 'amenity_parking' THEN
                      CASE
                        WHEN "parking" IN ('street_side', 'lane') THEN 'street_side'
                      END
                    WHEN feature = 'amenity_recycling' THEN
                      CASE
                        WHEN recycling_type IN ('centre') THEN 'centre'
                      END
                    WHEN feature = 'aeroway_aerodrome' THEN
                      CASE
                        WHEN int_access = 'yes' AND icao IS NOT NULL AND iata IS NOT NULL THEN 'public'
                      END
                    WHEN feature = 'amenity_water_point' THEN
                      CASE
                        WHEN drinking_water = 'yes' THEN 'drinking_water'
                      END
                    WHEN feature = 'natural_spring' THEN
                      CASE
                        WHEN EXISTS (SELECT 1 FROM planet_osm_line l WHERE ST_DWithin(features.way, l.way, 0.1) AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')) THEN 'connected'
                      END
                    WHEN feature = 'natural_hot_spring' THEN
                      CASE
                        WHEN EXISTS (SELECT 1 FROM planet_osm_line l WHERE ST_DWithin(features.way, l.way, 0.1) AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')) THEN 'connected'
                      END
                    WHEN feature = 'power_generator/wind' THEN
                      CASE
                        WHEN "location" IN ('roof', 'rooftop') THEN 'roof'
                      END
                    WHEN feature = 'man_made_mast' THEN
                      CASE
                        WHEN (height >= 160) AND "tower:type" NOT IN ('lighting') THEN 'height_160'
                        WHEN (height >= 80) AND "tower:type" NOT IN ('lighting') THEN 'height_80'
                        WHEN (height >= 40) AND "tower:type" NOT IN ('lighting') THEN 'height_40'
                        WHEN (height >= 20) AND "tower:type" NOT IN ('lighting') THEN 'height_20'
                      END
                    WHEN feature = 'man_made_tower' THEN
                      CASE
                        WHEN (height >= 160) AND "tower:type" NOT IN ('lighting', 'bell_tower') THEN 'height_160'
                        WHEN (height >= 80) AND "tower:type" NOT IN ('lighting', 'bell_tower') THEN 'height_80'
                        WHEN (height >= 40) AND "tower:type" NOT IN ('lighting', 'bell_tower') THEN 'height_40'
                        WHEN "tower:type" IN ('lighting', 'bell_tower') THEN 'minor_types'
                      END
                    WHEN feature = 'historic_memorial' THEN
                      CASE
                        WHEN memorial IN ('bust', 'stele', 'stone') THEN 'medium'
                        WHEN memorial IN ('plaque', 'blue_plaque') THEN 'small'
                      END
                    WHEN feature = 'historic_castle' THEN
                      CASE
                        WHEN castle_type IN ('stately', 'manor') THEN 'minor_types'
                      END
                    WHEN feature = 'shop' THEN
                      CASE
                        WHEN shop IN ('supermarket', 'department_store') THEN 'early'
                      END
                    WHEN feature = 'office' THEN
                      CASE
                        WHEN diplomatic IN ('embassy', 'consulate') THEN 'diplomatic'
                        WHEN office IN ('accountant', 'adoption_agency', 'advertising_agency', 'architect', 'association', 'charity', 'company', 'educational_institution', 'employment_agency',  'energy_supplier', 'estate_agent', 'financial', 'forestry', 'foundation', 'government', 'guide', 'insurance', 'it', 'lawyer', 'logistics', 'moving_company', 'newspaper', 'ngo', 'notary', 'political_party', 'private_investigator', 'property_management', 'quango', 'religion', 'research', 'surveyor', 'tax', 'tax_advisor', 'telecommunication', 'travel_agent', 'water_utility') THEN 'large'
                      END
                  END AS variant,
                  CASE
                    WHEN feature IN ('amenity_bicycle_parking', 'amenity_motorcycle_parking', 'amenity_parking') THEN LEAST(zoom_from_pixelsize(SQRT(way_area/900)::numeric), 16)
                    WHEN feature IN ('man_made_bridge') THEN zoom_from_pixelsize(SQRT(way_area/62.5)::numeric)
                    WHEN feature IN ('aeroway_apron', 'amenity_college', 'amenity_grave_yard', 'amenity_kindergarten', 'amenity_marketplace', 'amenity_school', 'amenity_university', 'highway_rest_area', 'highway_services', 'landuse_allotments', 'landuse_basin', 'landuse_brownfield', 'landuse_cemetery', 'landuse_commercial', 'landuse_construction', 'landuse_farmland', 'landuse_farmyard', 'landuse_forest', 'landuse_garages', 'landuse_grass', 'landuse_greenhouse_horticulture', 'landuse_industrial', 'landuse_landfill', 'landuse_meadow', 'landuse_military', 'landuse_quarry', 'landuse_railway', 'landuse_recreation_ground', 'landuse_reservoir', 'landuse_residential', 'landuse_retail', 'landuse_village_green', 'leisure_common', 'leisure_dog_park', 'leisure_fitness_centre', 'leisure_fitness_station', 'leisure_garden', 'leisure_marina', 'leisure_park', 'leisure_sport_centre', 'leisure_stadium', 'leisure_swimming_pool', 'leisure_water_park', 'man_made_works', 'military_danger_area', 'natural_bare_rock', 'natural_beach', 'natural_grassland', 'natural_heath', 'natural_mud', 'natural_reef', 'natural_sand', 'natural_scree', 'natural_scrub', 'natural_shingle', 'natural_shoal', 'natural_water', 'natural_wetland', 'natural_wood', 'place_islet', 'power_generator', 'power_plant', 'power_substation', 'shop_mall', 'tourism_theme_park', 'tourism_zoo') THEN LEAST(zoom_from_pixelsize(SQRT(way_area/3000)::numeric), 17)
                    WHEN feature IN ('place_archipelago', 'place_island') THEN LEAST(zoom_from_pixelsize(SQRT(way_area/3000)::numeric), 16)
                    WHEN feature IN ('natural_glacier') THEN LEAST(zoom_from_pixelsize(SQRT(way_area/750)::numeric), 17)
                  END AS zoom_threshold,
                  "int_elevation",
                  "shelter_type",
                  "information",
                  "int_access",
                  "parking",
                  "int_bench_type",
                  "backrest",
                  "recycling_type",
                  CASE WHEN int_symbol_geometry IS NOT NULL THEN GREATEST(CASE WHEN feature = 'natural_peak/viewpoint' THEN 7 ELSE 0 END, ROUND((ST_Y(way)-ST_YMin(int_symbol_geometry)) / NULLIF(!scale_denominator!*0.001*0.28,0) + 3.0)) END AS "int_text_dy_viewpoint",
                  CASE WHEN int_symbol_geometry IS NOT NULL THEN ROUND((0.5*(ST_XMin(int_symbol_geometry)+ST_XMax(int_symbol_geometry)) - ST_X(way)) / NULLIF(!scale_denominator!*0.001*0.28,0)) END AS "int_offset_x_viewpoint",
                  CASE WHEN int_symbol_geometry IS NOT NULL THEN ROUND((ST_Y(way) - (0.5*(ST_YMin(int_symbol_geometry)+ST_YMax(int_symbol_geometry)))) / NULLIF(!scale_denominator!*0.001*0.28,0)) END AS "int_offset_y_viewpoint",
                  CASE WHEN int_symbol_geometry IS NOT NULL THEN ROUND((ST_XMax(int_symbol_geometry)-ST_XMin(int_symbol_geometry)) / NULLIF(!scale_denominator!*0.001*0.28,0)-1.5) END AS "int_width_viewpoint",
                  CASE WHEN int_symbol_geometry IS NOT NULL THEN ROUND((ST_YMax(int_symbol_geometry)-ST_YMin(int_symbol_geometry)) / NULLIF(!scale_denominator!*0.001*0.28,0)-1.5) END AS "int_height_viewpoint",
                  "icao",
                  "iata",
                  "drinking_water",
                  "intermittent",
                  "int_text_offset_tree",
                  "location",
                  "height",
                  "tower:type",
                  "tower:construction",
                  "memorial",
                  "castle_type",
                  "religion",
                  "shop",
                  "office",
                  "diplomatic",
                  "building",
                  way_area,
                  way_length,
                  way_pixels
                FROM
                (SELECT -- This subselect generates the feature column allows filtering on it
                    way,
                    carto_label_name(way, name, tags, E'\n') AS "_name_label",
                    "name",
                    "ref",
                    "operator",
                    "brand",
                    "osm_id",
                    COALESCE(
                      'aeroway_' || CASE WHEN "aeroway" IN ('aerodrome', 'gate', 'helipad') AND (way_length IS NULL) THEN "aeroway" END,
                      'aeroway_' || CASE WHEN "aeroway" IN ('apron') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "aeroway" END,
                      'railway_' || CASE WHEN "railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'subway_entrance', 'tram_stop') AND (way_length IS NULL) THEN "railway" END,
                      'highway_' || CASE WHEN "highway" IN ('bus_stop', 'traffic_signals') AND (way_length IS NULL) THEN "highway" END,
                      'highway_' || CASE WHEN "highway" IN ('elevator') AND (way_length IS NULL) AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'customers', 'permit', 'delivery')) THEN "highway" END,
                      'highway_' || CASE WHEN "highway" IN ('rest_area', 'services') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "highway" END,
                      'natural_' || CASE WHEN "natural" IN ('bay', 'cave_entrance', 'geyser', 'hot_spring', 'saddle', 'spring', 'volcano') AND (way_length IS NULL) THEN "natural" END,
                      'natural_' || CASE WHEN "natural" IN ('tree') AND (way_area IS NULL) AND (way_length IS NULL) THEN "natural" END,
                      'natural_' || CASE WHEN "natural" IN ('peak') AND (way_area IS NULL) AND (way_length IS NULL) AND (tourism = 'viewpoint') THEN 'peak/viewpoint' END,
                      'natural_' || CASE WHEN "natural" IN ('peak') AND (way_area IS NULL) AND (way_length IS NULL) AND (tourism IS NULL OR tourism NOT IN ('viewpoint')) THEN "natural" END,
                      'natural_' || CASE WHEN "natural" IN ('bare_rock', 'beach', 'glacier', 'grassland', 'heath', 'mud', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'water', 'wetland', 'wood') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "natural" END,
                      'aerialway_' || CASE WHEN "aerialway" IN ('station') AND (way_length IS NULL) THEN "aerialway" END,
                      'tourism_' || CASE WHEN "tourism" IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'motel', 'museum', 'picnic_site', 'wilderness_hut') AND (way_length IS NULL) THEN "tourism" END,
                      'tourism_' || CASE WHEN "tourism" IN ('information') AND (way_length IS NULL) AND (tags->'information' IN ('audioguide', 'board', 'guidepost', 'map', 'office', 'sign', 'tactile_map', 'terminal', 'visitor_centre')) THEN "tourism" END,
                      'tourism_' || CASE WHEN "tourism" IN ('viewpoint') AND (way_area IS NULL) AND (way_length IS NULL) THEN "tourism" END,
                      'tourism_' || CASE WHEN "tourism" IN ('theme_park', 'zoo') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "tourism" END,
                      'amenity_' || CASE WHEN "amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'community_centre', 'courthouse', 'dentist', 'doctors', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'hospital', 'hunting_stand', 'ice_cream', 'library', 'lounger', 'marketplace', 'motorcycle_parking', 'nightclub', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'shelter', 'shower', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'veterinary', 'water_point') AND (way_length IS NULL) THEN "amenity" END,
                      'amenity_' || CASE WHEN "amenity" IN ('parking') AND (way_length IS NULL) AND ("parking" IS NULL OR "parking" NOT IN ('underground')) THEN "amenity" END,
                      'amenity_' || CASE WHEN "amenity" IN ('parking_entrance') AND (way_area IS NULL) AND (way_length IS NULL) AND ("parking" IN ('multi-storey') AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'permit', 'delivery'))) THEN 'parking_entrance/multi-storey' END,
                      'amenity_' || CASE WHEN "amenity" IN ('parking_entrance') AND (way_area IS NULL) AND (way_length IS NULL) AND ("parking" IN ('underground') AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'permit', 'delivery'))) THEN 'parking_entrance/underground' END,
                      'amenity_' || CASE WHEN "amenity" IN ('waste_basket') AND (way_area IS NULL) AND (way_length IS NULL) THEN "amenity" END,
                      'amenity_' || CASE WHEN "amenity" IN ('waste_disposal') AND (way_length IS NULL) AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'customers', 'permit', 'delivery')) THEN "amenity" END,
                      'amenity_' || CASE WHEN "amenity" IN ('drinking_water') AND (way_length IS NULL) AND (("natural" IS NULL OR "natural" NOT IN ('spring', 'hot_spring')) AND (man_made IS NULL OR man_made NOT IN ('water_well'))) THEN "amenity" END,
                      'amenity_' || CASE WHEN "amenity" IN ('college', 'grave_yard', 'kindergarten', 'school', 'university') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "amenity" END,
                      'office' || CASE WHEN (way_length IS NULL) AND (office IS NOT NULL AND office NOT IN ('yes', 'no', 'vacant', 'closed', 'disused', 'empty')) THEN '' END,
                      'advertising_' || CASE WHEN "advertising" IN ('column') AND (way_length IS NULL) THEN "advertising" END,
                      'emergency_' || CASE WHEN "emergency" IN ('phone') AND (way_length IS NULL) THEN "emergency" END,
                      'shop_' || CASE WHEN "shop" IN ('mall', 'massage') AND (way_length IS NULL) THEN "shop" END,
                      'shop' || CASE WHEN (way_length IS NULL) AND (shop IS NOT NULL AND shop NOT IN ('yes', 'no', 'vacant', 'closed', 'disused', 'empty', 'mall', 'massage')) THEN '' END,
                      'leisure_' || CASE WHEN "leisure" IN ('beach_resort', 'firepit', 'golf_course', 'miniature_golf', 'picnic_table', 'playground', 'sauna', 'slipway', 'water_park') AND (way_length IS NULL) THEN "leisure" END,
                      'leisure_' || CASE WHEN "leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'marina', 'park', 'sport_centre', 'stadium', 'swimming_pool') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "leisure" END,
                      'power_' || CASE WHEN "power" IN ('generator') AND (way_length IS NULL) AND (tags->'generator:source' = 'wind') THEN 'generator/wind' END,
                      'power_' || CASE WHEN "power" IN ('plant', 'substation') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "power" END,
                      'power_' || CASE WHEN "power" IN ('generator') AND (way_length IS NULL) AND (tags->'generator:type' IS NULL OR tags->'generator:type' NOT IN ('wind')) THEN "power" END,
                      'man_made_' || CASE WHEN "man_made" IN ('bridge', 'communications_tower', 'lighthouse', 'mast', 'obelisk', 'tower', 'water_tap', 'water_tower', 'water_well', 'windmill') AND (way_length IS NULL) THEN "man_made" END,
                      'man_made_' || CASE WHEN "man_made" IN ('cross') AND (way_area IS NULL) AND (way_length IS NULL) THEN "man_made" END,
                      'man_made_' || CASE WHEN "man_made" IN ('works') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "man_made" END,
                      'landuse_' || CASE WHEN "landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "landuse" END,
                      'waterway_' || CASE WHEN "waterway" IN ('waterfall') AND (way_length IS NULL) THEN "waterway" END,
                      'place_' || CASE WHEN "place" IN ('archipelago') AND (way_area IS NOT NULL) AND (way_length IS NULL) THEN "place" END,
                      'place_' || CASE WHEN "place" IN ('island', 'islet') AND (way_length IS NULL) THEN "place" END,
                      'historic_' || CASE WHEN "historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument') AND (way_length IS NULL) THEN "historic" END,
                      'historic_' || CASE WHEN "historic" IN ('wayside_cross', 'wayside_shrine') AND (way_area IS NULL) AND (way_length IS NULL) THEN "historic" END,
                      'military_' || CASE WHEN "military" IN ('bunker') AND (way_length IS NULL) THEN "military" END,
                      'military_' || CASE WHEN "military" IN ('danger_area') AND (way_length IS NULL) AND (building IS NULL OR building = 'no') THEN "military" END,
                      'barrier_' || CASE WHEN "barrier" IN ('block', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth') AND (way_length IS NULL) THEN "barrier" END,
                      'barrier_' || CASE WHEN "barrier" IN ('bollard') AND (way_area IS NULL) AND (way_length IS NULL) THEN "barrier" END
                    ) AS feature,
                    CASE
                      WHEN (("amenity" IN ('shelter')) AND (tags->'shelter_type' NOT IN ('public_transport') OR (tags->'shelter_type') IS NULL)) OR
                            ("tourism" IN ('alpine_hut', 'wilderness_hut') OR "natural" IN ('saddle', 'volcano')) OR
                            (("natural" IN ('peak')) AND (tourism = 'viewpoint')) OR
                            (("natural" IN ('peak')) AND (tourism IS NULL OR tourism NOT IN ('viewpoint'))) THEN
                        CASE WHEN (tags ? 'ele') AND tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN CONCAT(E'\n', REPLACE(ROUND((tags->'ele')::NUMERIC)::TEXT, '-', U&'\2212'), U&'\00A0', 'm') END
                    END AS "int_elevation",
                    "shelter_type",
                    CASE
                      WHEN (("tourism" IN ('information')) AND (tags->'information' IN ('audioguide', 'board', 'guidepost', 'map', 'office', 'sign', 'tactile_map', 'terminal', 'visitor_centre'))) THEN "information"
                    END AS "information",
                    CASE
                      WHEN "amenity" IN ('bicycle_parking', 'motorcycle_parking', 'toilets') OR "leisure" IN ('playground') OR
                            (("amenity" IN ('parking')) AND ("parking" IS NULL OR "parking" NOT IN ('underground'))) OR
                            (("amenity" IN ('parking_entrance')) AND ("parking" IN ('multi-storey') AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'permit', 'delivery')))) OR
                            (("amenity" IN ('parking_entrance')) AND ("parking" IN ('underground') AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'permit', 'delivery')))) OR
                            (("highway" IN ('elevator') OR "amenity" IN ('waste_disposal')) AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'customers', 'permit', 'delivery'))) THEN
                        CASE WHEN amenity IN ('parking', 'parking_entrance', 'bicycle_parking', 'motorcycle_parking') THEN
                          CASE WHEN "access" IN ('private', 'no', 'permit', 'delivery') THEN 'restricted' ELSE 'yes' END
                        ELSE
                          CASE WHEN "access" IN ('private', 'no', 'customers', 'permit', 'delivery') THEN 'restricted' ELSE 'yes' END
                        END
                    END AS "int_access",
                    CASE
                      WHEN (("amenity" IN ('parking')) AND ("parking" IS NULL OR "parking" NOT IN ('underground'))) OR
                            (("amenity" IN ('parking_entrance')) AND ("parking" IN ('multi-storey') AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'permit', 'delivery')))) OR
                            (("amenity" IN ('parking_entrance')) AND ("parking" IN ('underground') AND ("access" IS NULL OR "access" NOT IN ('private', 'no', 'permit', 'delivery')))) THEN "parking"
                    END AS "parking",
                    CASE
                      WHEN "amenity" IN ('bench') THEN
                        (CASE
                          WHEN "material" IN ('wood', 'plastic') THEN 'light'
                          WHEN "material" IN ('stone', 'concrete', 'metal', 'steel') THEN 'heavy'
                          ELSE 'unknown'
                        END || '+' || CASE
                          WHEN "backrest" IN ('yes') THEN 'backrest'
                          WHEN "backrest" IN ('no') THEN 'nobackrest'
                          ELSE 'unknown'
                        END)
                    END AS "int_bench_type",
                    "backrest",
                    "recycling_type",
                    CASE
                      WHEN "tourism" IN ('viewpoint') OR
                            (("natural" IN ('peak')) AND (tourism = 'viewpoint')) THEN
                        (SELECT
                            ST_Translate(
                              carto_viewpoint_symbol_from_db(
                                'viewpoint',
                                width,
                                width_px,
                                azimuth,
                                angle
                              ),
                              ST_X(point),
                              ST_Y(point)
                            ) AS way
                          FROM
                            (SELECT
                                CASE WHEN ((width_px % 2) = 0) THEN
                                  ST_SnapToGrid(
                                    way,
                                    NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                                ELSE
                                  ST_SnapToGrid(
                                    way,
                                    0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                                    NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                                END AS point,
                                view_geometry[1] AS azimuth,
                                view_geometry[2] AS angle,
                                width_px,
                                width_px*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                              FROM
                                (SELECT
                                    way,
                                    osm_id AS hash,
                                    CASE WHEN (tags ? 'ele') AND tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN 
                                      (tags->'ele')::NUMERIC
                                    ELSE
                                      -100000.0
                                    END AS elevation,
                                    carto_viewpoint_direction(tags->'direction') AS view_geometry,
                                    carto_barrier_line_width('viewpoint', z(!scale_denominator!)) AS width_px) AS t1
                            ) AS viewpoints_raw
                          WHERE width_px >= 10
                        )
                    END AS "int_symbol_geometry",
                    "icao",
                    "iata",
                    CASE WHEN amenity = 'drinking_water' OR (tags->'drinking_water') = 'yes' THEN 'yes' END AS "drinking_water",
                    CASE
                      WHEN "natural" IN ('hot_spring', 'spring') THEN
                        CASE WHEN tags->'intermittent' IN ('yes') OR tags->'seasonal' IN ('yes') THEN 'yes' END
                    END AS "intermittent",
                    CASE
                      WHEN "natural" IN ('tree') THEN
                        ROUND(GREATEST(
                          carto_barrier_line_width('tree', z(!scale_denominator!)),
                          LEAST(carto_tree_diameter_mapped('tree', diameter_crown, height, circumference, diameter, !bbox!, !scale_denominator!), 60)
                        )*0.5)+2.0
                    END AS "int_text_offset_tree",
                    CASE
                      WHEN (("power" IN ('generator')) AND (tags->'generator:source' = 'wind')) THEN "location"
                    END AS "location",
                    CASE
                      WHEN (("man_made" IN ('mast', 'tower')) AND (tags->'location' NOT IN ('roof', 'rooftop') OR (tags->'location') IS NULL)) OR
                            ("waterway" IN ('waterfall')) THEN
                        CASE WHEN height ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(height, '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC END
                    END AS "height",
                    "tower:type",
                    "tower:construction",
                    "memorial",
                    "castle_type",
                    CASE
                      WHEN "amenity" IN ('place_of_worship') THEN
                        CASE WHEN religion IN ('christian') AND tags->'denomination' IN ('jehovahs_witness', 'la_luz_del_mundo', 'iglesia_ni_cristo', 'mormon') THEN NULL ELSE religion END
                    END AS "religion",
                    CASE
                      WHEN (("shop" IN ('massage')) AND (shop IS NOT NULL AND shop NOT IN ('yes', 'no', 'vacant', 'closed', 'disused', 'empty', 'mall', 'massage'))) THEN
                        CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'bed', 'bookmaker', 'books', 'butcher', 'carpet', 'clothes', 'computer',
                                           'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fabric', 'fishmonger', 'florist',
                                           'garden_centre', 'hairdresser', 'hifi', 'car', 'car_repair', 'bicycle', 'mall', 'pet',
                                           'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk',
                                           'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery',
                                           'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery',
                                           'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor',
                                           'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee', 'tyres', 'pastry', 'chocolate',
                                           'music', 'medical_supply', 'dairy', 'video_games', 'houseware', 'ticket', 'charity', 'second_hand',
                                           'interior_decoration', 'video', 'paint', 'massage', 'trade', 'wholesale') THEN shop
                          ELSE 'other' END
                    END AS "shop",
                    CASE
                      WHEN (("office" IN ('column')) AND (office IS NOT NULL AND office NOT IN ('yes', 'no', 'vacant', 'closed', 'disused', 'empty'))) THEN "office"
                    END AS "office",
                    CASE
                      WHEN (("office" IN ('column')) AND (office IS NOT NULL AND office NOT IN ('yes', 'no', 'vacant', 'closed', 'disused', 'empty'))) THEN "diplomatic"
                    END AS "diplomatic",
                    CASE
                      WHEN (("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'marina', 'park', 'sport_centre', 'stadium', 'swimming_pool') OR "landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green') OR "military" IN ('danger_area') OR "highway" IN ('rest_area', 'services') OR "man_made" IN ('works') OR "amenity" IN ('college', 'grave_yard', 'kindergarten', 'school', 'university') OR "natural" IN ('bare_rock', 'beach', 'glacier', 'grassland', 'heath', 'mud', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'water', 'wetland', 'wood') OR "tourism" IN ('theme_park', 'zoo') OR "power" IN ('plant', 'substation') OR "aeroway" IN ('apron')) AND (building IS NULL OR building = 'no')) OR
                            (("power" IN ('generator')) AND (tags->'generator:type' IS NULL OR tags->'generator:type' NOT IN ('wind'))) THEN "building"
                    END AS "building",
                    way_length,
                    way_area,
                    COALESCE(way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0), 0) AS way_pixels
                  FROM
                  (
                    SELECT
                        way,
                        "access",
                        "aerialway",
                        "aeroway",
                        "amenity",
                        "barrier",
                        "building",
                        "highway",
                        "historic",
                        "landuse",
                        "leisure",
                        "man_made",
                        "military",
                        "name",
                        "natural",
                        "osm_id",
                        "place",
                        "power",
                        "railway",
                        "ref",
                        "religion",
                        "shop",
                        "tourism",
                        "waterway",
                        tags->'advertising' AS "advertising",
                        tags->'backrest' AS "backrest",
                        tags->'brand' AS "brand",
                        tags->'castle_type' AS "castle_type",
                        tags->'circumference' AS "circumference",
                        tags->'diameter' AS "diameter",
                        tags->'diameter_crown' AS "diameter_crown",
                        tags->'diplomatic' AS "diplomatic",
                        tags->'drinking_water' AS "drinking_water",
                        tags->'emergency' AS "emergency",
                        tags->'height' AS "height",
                        tags->'iata' AS "iata",
                        tags->'icao' AS "icao",
                        tags->'information' AS "information",
                        tags->'intermittent' AS "intermittent",
                        tags->'location' AS "location",
                        tags->'material' AS "material",
                        tags->'memorial' AS "memorial",
                        tags->'office' AS "office",
                        tags->'operator' AS "operator",
                        tags->'parking' AS "parking",
                        tags->'recycling_type' AS "recycling_type",
                        tags->'shelter_type' AS "shelter_type",
                        tags->'tower:construction' AS "tower:construction",
                        tags->'tower:type' AS "tower:type",
                        tags,
                        NULL AS way_length,
                        NULL AS way_area
                      FROM planet_osm_point
                      WHERE way && !bbox! AND
                        CASE
                          WHEN z(!scale_denominator!) <= 9 THEN FALSE
                          WHEN z(!scale_denominator!) <= 10 THEN
                            ("aeroway" IN ('aerodrome', 'apron')) OR
                            ("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'park', 'sport_centre', 'stadium')) OR
                            ("shop" IN ('mall')) OR
                            ("place" IN ('archipelago', 'island')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'grass', 'greenhouse_horticulture', 'landfill', 'meadow', 'military', 'quarry', 'recreation_ground', 'reservoir', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('college', 'grave_yard', 'kindergarten', 'school', 'university')) OR
                            ("natural" IN ('bare_rock', 'beach', 'glacier', 'grassland', 'heath', 'mud', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('theme_park', 'zoo')) OR
                            ("power" IN ('generator', 'plant'))
                          WHEN z(!scale_denominator!) <= 11 THEN
                            ("aeroway" IN ('aerodrome', 'apron')) OR
                            ("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'park', 'sport_centre', 'stadium')) OR
                            ("shop" IN ('mall')) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'grass', 'greenhouse_horticulture', 'landfill', 'meadow', 'military', 'quarry', 'recreation_ground', 'reservoir', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('college', 'grave_yard', 'kindergarten', 'school', 'university')) OR
                            ("natural" IN ('bare_rock', 'beach', 'glacier', 'grassland', 'heath', 'mud', 'peak', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('theme_park', 'zoo')) OR
                            ("power" IN ('generator', 'plant'))
                          WHEN z(!scale_denominator!) <= 12 THEN
                            ("aeroway" IN ('aerodrome', 'apron')) OR
                            ("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'park', 'sport_centre', 'stadium')) OR
                            ("shop" IN ('mall')) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'grass', 'greenhouse_horticulture', 'landfill', 'meadow', 'military', 'quarry', 'recreation_ground', 'reservoir', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('college', 'grave_yard', 'kindergarten', 'school', 'university')) OR
                            ("natural" IN ('bare_rock', 'beach', 'glacier', 'grassland', 'heath', 'mud', 'peak', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('theme_park', 'zoo')) OR
                            ("power" IN ('generator', 'plant')) OR
                            ("railway" IN ('station')) OR
                            ("man_made" IN ('bridge'))
                          WHEN z(!scale_denominator!) <= 13 THEN
                            ("aeroway" IN ('aerodrome', 'apron')) OR
                            ("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'park', 'sport_centre', 'stadium')) OR
                            ("shop" IN ('mall')) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('college', 'grave_yard', 'kindergarten', 'school', 'university')) OR
                            ("natural" IN ('bare_rock', 'beach', 'glacier', 'grassland', 'heath', 'mud', 'peak', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'theme_park', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('halt', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area', 'services'))
                          WHEN z(!scale_denominator!) <= 14 THEN
                            ("aeroway" IN ('aerodrome', 'apron')) OR
                            ("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'park', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IN ('mall')) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('bicycle_parking', 'college', 'grave_yard', 'kindergarten', 'motorcycle_parking', 'parking', 'school', 'university')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'theme_park', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'communications_tower', 'mast', 'tower', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area', 'services'))
                          WHEN z(!scale_denominator!) <= 15 THEN
                            ("aeroway" IN ('aerodrome', 'apron')) OR
                            ("leisure" IN ('common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'park', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IN ('mall')) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('bicycle_parking', 'college', 'grave_yard', 'hospital', 'kindergarten', 'motorcycle_parking', 'parking', 'school', 'university')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'theme_park', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'communications_tower', 'lighthouse', 'mast', 'tower', 'water_well', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area', 'services')) OR
                            ("historic" IN ('castle'))
                          WHEN z(!scale_denominator!) <= 16 THEN
                            ("aeroway" IN ('aerodrome', 'apron', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'park', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('danger_area')) OR
                            ("amenity" IN ('bicycle_parking', 'bus_station', 'cinema', 'clinic', 'college', 'courthouse', 'fire_station', 'grave_yard', 'hospital', 'hunting_stand', 'kindergarten', 'library', 'marketplace', 'motorcycle_parking', 'parking', 'place_of_worship', 'police', 'school', 'shelter', 'theatre', 'townhall', 'university')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'communications_tower', 'cross', 'lighthouse', 'mast', 'tower', 'water_well', 'windmill', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'rest_area', 'services')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'fort', 'manor', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('toll_booth'))
                          WHEN z(!scale_denominator!) <= 17 THEN
                            ("aeroway" IN ('aerodrome', 'apron', 'gate', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'firepit', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'miniature_golf', 'park', 'picnic_table', 'playground', 'sauna', 'slipway', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('bunker', 'danger_area')) OR
                            ("amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'college', 'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard', 'hospital', 'hunting_stand', 'ice_cream', 'kindergarten', 'library', 'marketplace', 'motorcycle_parking', 'nightclub', 'parking', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'school', 'shelter', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'university', 'veterinary', 'water_point')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'tree', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'information', 'motel', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'communications_tower', 'cross', 'lighthouse', 'mast', 'obelisk', 'tower', 'water_tap', 'water_tower', 'water_well', 'windmill', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'rest_area', 'services', 'traffic_signals')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('block', 'bollard', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth')) OR
                            ((tags->'office') IS NOT NULL)
                          WHEN z(!scale_denominator!) <= 18 THEN
                            ("aeroway" IN ('aerodrome', 'apron', 'gate', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'firepit', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'miniature_golf', 'park', 'picnic_table', 'playground', 'sauna', 'slipway', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('bunker', 'danger_area')) OR
                            ("amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'college', 'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard', 'hospital', 'hunting_stand', 'ice_cream', 'kindergarten', 'library', 'lounger', 'marketplace', 'motorcycle_parking', 'nightclub', 'parking', 'parking_entrance', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'school', 'shelter', 'shower', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'university', 'veterinary', 'water_point')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'tree', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'information', 'motel', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'subway_entrance', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'communications_tower', 'cross', 'lighthouse', 'mast', 'obelisk', 'tower', 'water_tap', 'water_tower', 'water_well', 'windmill', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'elevator', 'rest_area', 'services', 'traffic_signals')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('block', 'bollard', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth')) OR
                            ((tags->'office') IS NOT NULL)
                          ELSE
                            ("aeroway" IN ('aerodrome', 'apron', 'gate', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'firepit', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'miniature_golf', 'park', 'picnic_table', 'playground', 'sauna', 'slipway', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('bunker', 'danger_area')) OR
                            ("amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'college', 'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard', 'hospital', 'hunting_stand', 'ice_cream', 'kindergarten', 'library', 'lounger', 'marketplace', 'motorcycle_parking', 'nightclub', 'parking', 'parking_entrance', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'school', 'shelter', 'shower', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'university', 'veterinary', 'waste_basket', 'waste_disposal', 'water_point')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'tree', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'information', 'motel', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'subway_entrance', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'communications_tower', 'cross', 'lighthouse', 'mast', 'obelisk', 'tower', 'water_tap', 'water_tower', 'water_well', 'windmill', 'works')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'elevator', 'rest_area', 'services', 'traffic_signals')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('block', 'bollard', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth')) OR
                            ((tags->'office') IS NOT NULL) OR
                            ((tags->'emergency') IN ('phone')) OR
                            ((tags->'advertising') IN ('column'))
                        END
                    UNION ALL
                    SELECT
                        ST_PointOnSurface(way) AS way,
                        "access",
                        "aerialway",
                        "aeroway",
                        "amenity",
                        "barrier",
                        "building",
                        "highway",
                        "historic",
                        "landuse",
                        "leisure",
                        "man_made",
                        "military",
                        "name",
                        "natural",
                        "osm_id",
                        "place",
                        "power",
                        "railway",
                        "ref",
                        "religion",
                        "shop",
                        "tourism",
                        "waterway",
                        tags->'advertising' AS "advertising",
                        tags->'backrest' AS "backrest",
                        tags->'brand' AS "brand",
                        tags->'castle_type' AS "castle_type",
                        tags->'circumference' AS "circumference",
                        tags->'diameter' AS "diameter",
                        tags->'diameter_crown' AS "diameter_crown",
                        tags->'diplomatic' AS "diplomatic",
                        tags->'drinking_water' AS "drinking_water",
                        tags->'emergency' AS "emergency",
                        tags->'height' AS "height",
                        tags->'iata' AS "iata",
                        tags->'icao' AS "icao",
                        tags->'information' AS "information",
                        tags->'intermittent' AS "intermittent",
                        tags->'location' AS "location",
                        tags->'material' AS "material",
                        tags->'memorial' AS "memorial",
                        tags->'office' AS "office",
                        tags->'operator' AS "operator",
                        tags->'parking' AS "parking",
                        tags->'recycling_type' AS "recycling_type",
                        tags->'shelter_type' AS "shelter_type",
                        tags->'tower:construction' AS "tower:construction",
                        tags->'tower:type' AS "tower:type",
                        tags,
                        NULL AS way_length,
                        way_area
                      FROM planet_osm_polygon
                      WHERE way && !bbox!
                        AND way_area < 768000*POW(!scale_denominator!*0.001*0.28,2)
                        AND ("place" NOT IN ('archipelago') OR "place" IS NULL)
                        AND
                        CASE
                          WHEN z(!scale_denominator!) <= 9 THEN FALSE
                          WHEN z(!scale_denominator!) <= 10 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IN ('mall') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('island') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('grave_yard') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("natural" IN ('glacier', 'wood') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0))
                          WHEN z(!scale_denominator!) <= 11 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IN ('mall') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('island') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('grave_yard') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("natural" IN ('glacier', 'wood') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0))
                          WHEN z(!scale_denominator!) <= 12 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IN ('mall') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('island') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('grave_yard') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("natural" IN ('glacier', 'wood') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("railway" IN ('station')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0))
                          WHEN z(!scale_denominator!) <= 13 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IN ('mall') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('island') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('grave_yard') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("natural" IN ('glacier', 'wood') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("railway" IN ('halt', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge', 'works') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0))
                          WHEN z(!scale_denominator!) <= 14 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IN ('mall') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('island') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('bicycle_parking', 'grave_yard') AND way_area >= 900*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("natural" IN ('glacier') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("railway" IN ('halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("man_made" IN ('communications_tower', 'mast')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0))
                          WHEN z(!scale_denominator!) <= 15 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IN ('mall') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('island') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('bicycle_parking', 'grave_yard') AND way_area >= 900*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("natural" IN ('glacier') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("man_made" IN ('communications_tower', 'mast')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("historic" IN ('castle'))
                          WHEN z(!scale_denominator!) <= 16 THEN
                            ("aeroway" IN ('apron') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("aeroway" IN ('aerodrome', 'helipad')) OR
                            ("leisure" IN ('sport_centre') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('islet') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("place" IN ('archipelago', 'island')) OR
                            ("landuse" IN ('greenhouse_horticulture') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("military" IN ('danger_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('college') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("amenity" IN ('bicycle_parking')) OR
                            ("natural" IN ('glacier') AND way_area >= 750*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('zoo') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("tourism" IN ('museum')) OR
                            ("power" IN ('generator') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("man_made" IN ('communications_tower', 'cross', 'mast')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('rest_area') AND way_area >= 3000*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("historic" IN ('archaeological_site', 'castle', 'fort', 'manor', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('toll_booth'))
                          WHEN z(!scale_denominator!) <= 17 THEN
                            ("aeroway" IN ('aerodrome', 'apron', 'gate', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'firepit', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'miniature_golf', 'park', 'picnic_table', 'playground', 'sauna', 'slipway', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('bunker', 'danger_area')) OR
                            ("amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'college', 'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard', 'hospital', 'hunting_stand', 'ice_cream', 'kindergarten', 'library', 'marketplace', 'motorcycle_parking', 'nightclub', 'parking', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'school', 'shelter', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'university', 'veterinary', 'water_point')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'tree', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'information', 'motel', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'tram_stop')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("man_made" IN ('communications_tower', 'cross', 'mast')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'rest_area', 'services', 'traffic_signals')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('block', 'bollard', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth')) OR
                            ((tags->'office') IS NOT NULL)
                          WHEN z(!scale_denominator!) <= 18 THEN
                            ("aeroway" IN ('aerodrome', 'apron', 'gate', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'firepit', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'miniature_golf', 'park', 'picnic_table', 'playground', 'sauna', 'slipway', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('bunker', 'danger_area')) OR
                            ("amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'college', 'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard', 'hospital', 'hunting_stand', 'ice_cream', 'kindergarten', 'library', 'lounger', 'marketplace', 'motorcycle_parking', 'nightclub', 'parking', 'parking_entrance', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'school', 'shelter', 'shower', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'university', 'veterinary', 'water_point')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'tree', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'information', 'motel', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'subway_entrance', 'tram_stop')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("man_made" IN ('communications_tower', 'cross', 'mast')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'elevator', 'rest_area', 'services', 'traffic_signals')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('block', 'bollard', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth')) OR
                            ((tags->'office') IS NOT NULL)
                          ELSE
                            ("aeroway" IN ('aerodrome', 'apron', 'gate', 'helipad')) OR
                            ("leisure" IN ('beach_resort', 'common', 'dog_park', 'firepit', 'fitness_centre', 'fitness_station', 'garden', 'golf_course', 'marina', 'miniature_golf', 'park', 'picnic_table', 'playground', 'sauna', 'slipway', 'sport_centre', 'stadium', 'swimming_pool', 'water_park')) OR
                            ("shop" IS NOT NULL) OR
                            ("place" IN ('archipelago', 'island', 'islet')) OR
                            ("landuse" IN ('allotments', 'basin', 'brownfield', 'cemetery', 'commercial', 'construction', 'farmland', 'farmyard', 'forest', 'garages', 'grass', 'greenhouse_horticulture', 'industrial', 'landfill', 'meadow', 'military', 'quarry', 'railway', 'recreation_ground', 'reservoir', 'residential', 'retail', 'village_green')) OR
                            ("military" IN ('bunker', 'danger_area')) OR
                            ("amenity" IN ('arts_centre', 'atm', 'bank', 'bar', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'biergarten', 'bus_station', 'cafe', 'car_rental', 'car_wash', 'charging_station', 'cinema', 'clinic', 'college', 'community_centre', 'courthouse', 'dentist', 'doctors', 'drinking_water', 'driving_school', 'fast_food', 'fire_station', 'food_court', 'fountain', 'fuel', 'grave_yard', 'hospital', 'hunting_stand', 'ice_cream', 'kindergarten', 'library', 'lounger', 'marketplace', 'motorcycle_parking', 'nightclub', 'parking', 'parking_entrance', 'pharmacy', 'phone', 'place_of_worship', 'police', 'post_box', 'post_office', 'prison', 'pub', 'public_bath', 'recycling', 'restaurant', 'school', 'shelter', 'shower', 'social_facility', 'taxi', 'theatre', 'toilets', 'townhall', 'university', 'veterinary', 'waste_basket', 'waste_disposal', 'water_point')) OR
                            ("natural" IN ('bare_rock', 'bay', 'beach', 'cave_entrance', 'geyser', 'glacier', 'grassland', 'heath', 'hot_spring', 'mud', 'peak', 'reef', 'saddle', 'sand', 'scree', 'scrub', 'shingle', 'shoal', 'spring', 'tree', 'volcano', 'water', 'wetland', 'wood')) OR
                            ("tourism" IN ('alpine_hut', 'apartment', 'artwork', 'camp_site', 'caravan_site', 'charlet', 'guest_house', 'hostel', 'hotel', 'information', 'motel', 'museum', 'picnic_site', 'theme_park', 'viewpoint', 'wilderness_hut', 'zoo')) OR
                            ("power" IN ('generator', 'plant', 'substation')) OR
                            ("railway" IN ('crossing', 'halt', 'level_crossing', 'station', 'subway_entrance', 'tram_stop')) OR
                            ("man_made" IN ('bridge') AND way_area >= 62*NULLIF(POW(!scale_denominator!*0.001*0.28,2),0)) OR
                            ("man_made" IN ('communications_tower', 'cross', 'mast')) OR
                            ("aerialway" IN ('station')) OR
                            ("highway" IN ('bus_stop', 'elevator', 'rest_area', 'services', 'traffic_signals')) OR
                            ("historic" IN ('archaeological_site', 'castle', 'city_gate', 'fort', 'manor', 'memorial', 'monument', 'wayside_cross', 'wayside_shrine')) OR
                            ("barrier" IN ('block', 'bollard', 'gate', 'lift_gate', 'log', 'swing_gate', 'toll_booth')) OR
                            ((tags->'office') IS NOT NULL) OR
                            ((tags->'emergency') IN ('phone')) OR
                            ((tags->'advertising') IN ('column'))
                        END
                    UNION ALL
                    SELECT -- This is separately the archipelagos with the convex hull geometry processing
                        ST_ClosestPoint(oway,ST_PointOnSurface(way)) AS way,
                        "access",
                        "aerialway",
                        "aeroway",
                        "amenity",
                        "barrier",
                        "building",
                        "highway",
                        "historic",
                        "landuse",
                        "leisure",
                        "man_made",
                        "military",
                        "name",
                        "natural",
                        "osm_id",
                        "place",
                        "power",
                        "railway",
                        "ref",
                        "religion",
                        "shop",
                        "tourism",
                        "waterway",
                        tags->'advertising' AS "advertising",
                        tags->'backrest' AS "backrest",
                        tags->'brand' AS "brand",
                        tags->'castle_type' AS "castle_type",
                        tags->'circumference' AS "circumference",
                        tags->'diameter' AS "diameter",
                        tags->'diameter_crown' AS "diameter_crown",
                        tags->'diplomatic' AS "diplomatic",
                        tags->'drinking_water' AS "drinking_water",
                        tags->'emergency' AS "emergency",
                        tags->'height' AS "height",
                        tags->'iata' AS "iata",
                        tags->'icao' AS "icao",
                        tags->'information' AS "information",
                        tags->'intermittent' AS "intermittent",
                        tags->'location' AS "location",
                        tags->'material' AS "material",
                        tags->'memorial' AS "memorial",
                        tags->'office' AS "office",
                        tags->'operator' AS "operator",
                        tags->'parking' AS "parking",
                        tags->'recycling_type' AS "recycling_type",
                        tags->'shelter_type' AS "shelter_type",
                        tags->'tower:construction' AS "tower:construction",
                        tags->'tower:type' AS "tower:type",
                        tags,
                        NULL AS way_length,
                        ST_Area(ST_Envelope(oway)) AS way_area
                      FROM
                        (SELECT
                            (ST_Dump(
                              -- this detects multipolygons extending over the 180 degree meridian to split them
                              CASE WHEN (ST_XMax(way)-ST_XMin(way)) < 20037508 THEN
                                ST_ConvexHull(way)
                              ELSE
                                -- splits the polygon into the two hemisphere parts
                                ST_Collect(
                                  ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((-20037508 -20037508, -20037508 20037508, 0  20037508, 0 -20037508, -20037508 -20037508))'), 3857))),
                                  ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((0 -20037508, 0 20037508, 20037508 20037508, 20037508 -20037508, 0 -20037508))'), 3857)))
                                )
                              END
                            )).geom AS way,
                            way AS oway,
                            "access",
                            "aerialway",
                            "aeroway",
                            "amenity",
                            "barrier",
                            "building",
                            "highway",
                            "historic",
                            "landuse",
                            "leisure",
                            "man_made",
                            "military",
                            "name",
                            "natural",
                            "osm_id",
                            "place",
                            "power",
                            "railway",
                            "ref",
                            "religion",
                            "shop",
                            "tourism",
                            "waterway",
                            tags
                          FROM planet_osm_polygon
                          WHERE way && !bbox!
                            AND building IS NULL
                            AND "place" IN ('archipelago')
                        ) AS archipelagos
                  ) AS _
                ) AS features
                WHERE feature IS NOT NULL
              ) AS combined
              JOIN (VALUES
                  ('aeroway_helipad', 1),
                  ('aeroway_aerodrome+public', 2),
                  ('aeroway_aerodrome', 3),
                  ('aeroway_gate', 4),
                  ('aeroway_apron', 5),
                  ('railway_crossing', 6),
                  ('railway_level_crossing', 7),
                  ('railway_subway_entrance', 8),
                  ('railway_station', 9),
                  ('railway_halt', 10),
                  ('railway_tram_stop', 11),
                  ('highway_bus_stop', 12),
                  ('highway_traffic_signals', 13),
                  ('highway_elevator', 14),
                  ('highway_services', 15),
                  ('highway_rest_area', 16),
                  ('natural_spring+connected', 17),
                  ('natural_spring', 18),
                  ('natural_hot_spring+connected', 19),
                  ('natural_hot_spring', 20),
                  ('natural_geyser', 21),
                  ('natural_bay', 22),
                  ('natural_volcano', 23),
                  ('natural_saddle', 24),
                  ('natural_cave_entrance', 25),
                  ('natural_tree', 26),
                  ('natural_peak/viewpoint', 27),
                  ('natural_peak', 28),
                  ('natural_grassland', 29),
                  ('natural_wood', 30),
                  ('natural_wetland', 31),
                  ('natural_reef', 32),
                  ('natural_mud', 33),
                  ('natural_heath', 34),
                  ('natural_scrub', 35),
                  ('natural_beach', 36),
                  ('natural_shoal', 37),
                  ('natural_sand', 38),
                  ('natural_scree', 39),
                  ('natural_shingle', 40),
                  ('natural_bare_rock', 41),
                  ('natural_glacier', 42),
                  ('natural_water', 43),
                  ('aerialway_station', 44),
                  ('tourism_alpine_hut', 45),
                  ('tourism_wilderness_hut', 46),
                  ('tourism_charlet', 47),
                  ('tourism_hostel', 48),
                  ('tourism_hotel', 49),
                  ('tourism_motel', 50),
                  ('tourism_guest_house', 51),
                  ('tourism_apartment', 52),
                  ('tourism_museum', 53),
                  ('tourism_artwork', 54),
                  ('tourism_camp_site', 55),
                  ('tourism_caravan_site', 56),
                  ('tourism_picnic_site', 57),
                  ('tourism_information+information_audioguide', 58),
                  ('tourism_information+information_board', 59),
                  ('tourism_information+information_sign', 60),
                  ('tourism_information+information_guidepost', 61),
                  ('tourism_information+information_map', 62),
                  ('tourism_information+information_terminal', 63),
                  ('tourism_information+information_visitor_centre', 64),
                  ('tourism_information', 65),
                  ('tourism_viewpoint', 66),
                  ('tourism_theme_park', 67),
                  ('tourism_zoo', 68),
                  ('amenity_shelter', 69),
                  ('amenity_atm', 70),
                  ('amenity_bank', 71),
                  ('amenity_bar', 72),
                  ('amenity_bbq', 73),
                  ('amenity_cafe', 74),
                  ('amenity_ice_cream', 75),
                  ('amenity_nightclub', 76),
                  ('amenity_pub', 77),
                  ('amenity_biergarten', 78),
                  ('amenity_restaurant', 79),
                  ('amenity_food_court', 80),
                  ('amenity_fast_food', 81),
                  ('amenity_fire_station', 82),
                  ('amenity_cinema', 83),
                  ('amenity_library', 84),
                  ('amenity_courthouse', 85),
                  ('amenity_townhall', 86),
                  ('amenity_police', 87),
                  ('amenity_prison', 88),
                  ('amenity_post_box', 89),
                  ('amenity_post_office', 90),
                  ('amenity_theatre', 91),
                  ('amenity_arts_centre', 92),
                  ('amenity_community_centre', 93),
                  ('amenity_social_facility', 94),
                  ('amenity_shower', 95),
                  ('amenity_public_bath', 96),
                  ('amenity_toilets+access_yes', 97),
                  ('amenity_toilets', 98),
                  ('amenity_motorcycle_parking', 99),
                  ('amenity_bicycle_parking', 100),
                  ('amenity_bicycle_rental', 101),
                  ('amenity_bus_station', 102),
                  ('amenity_car_rental', 103),
                  ('amenity_car_wash', 104),
                  ('amenity_charging_station', 105),
                  ('amenity_fuel', 106),
                  ('amenity_taxi', 107),
                  ('amenity_phone', 108),
                  ('amenity_bench', 109),
                  ('amenity_lounger', 110),
                  ('amenity_recycling+centre', 111),
                  ('amenity_recycling', 112),
                  ('amenity_water_point+drinking_water', 113),
                  ('amenity_water_point', 114),
                  ('amenity_fountain', 115),
                  ('amenity_hunting_stand', 116),
                  ('amenity_place_of_worship', 117),
                  ('amenity_hospital', 118),
                  ('amenity_pharmacy', 119),
                  ('amenity_dentist', 120),
                  ('amenity_doctors', 121),
                  ('amenity_clinic', 122),
                  ('amenity_veterinary', 123),
                  ('amenity_driving_school', 124),
                  ('amenity_marketplace', 125),
                  ('amenity_parking+street_side', 126),
                  ('amenity_parking', 127),
                  ('amenity_parking_entrance/multi-storey', 128),
                  ('amenity_parking_entrance/underground', 129),
                  ('amenity_waste_basket', 130),
                  ('amenity_waste_disposal', 131),
                  ('amenity_drinking_water', 132),
                  ('amenity_grave_yard', 133),
                  ('amenity_kindergarten', 134),
                  ('amenity_school', 135),
                  ('amenity_college', 136),
                  ('amenity_university', 137),
                  ('office+diplomatic', 138),
                  ('office+large', 139),
                  ('office', 140),
                  ('advertising_column', 141),
                  ('emergency_phone', 142),
                  ('shop_massage', 143),
                  ('shop_mall', 144),
                  ('shop+early', 145),
                  ('shop', 146),
                  ('leisure_water_park', 147),
                  ('leisure_playground', 148),
                  ('leisure_miniature_golf', 149),
                  ('leisure_golf_course', 150),
                  ('leisure_picnic_table', 151),
                  ('leisure_firepit', 152),
                  ('leisure_sauna', 153),
                  ('leisure_beach_resort', 154),
                  ('leisure_slipway', 155),
                  ('leisure_fitness_centre', 156),
                  ('leisure_fitness_station', 157),
                  ('leisure_dog_park', 158),
                  ('leisure_swimming_pool', 159),
                  ('leisure_common', 160),
                  ('leisure_garden', 161),
                  ('leisure_sport_centre', 162),
                  ('leisure_stadium', 163),
                  ('leisure_park', 164),
                  ('leisure_marina', 165),
                  ('power_generator/wind+roof', 166),
                  ('power_generator/wind', 167),
                  ('power_plant', 168),
                  ('power_substation', 169),
                  ('power_generator', 170),
                  ('man_made_water_tap', 171),
                  ('man_made_water_well', 172),
                  ('man_made_windmill', 173),
                  ('man_made_water_tower', 174),
                  ('man_made_lighthouse', 175),
                  ('man_made_mast+height_160', 176),
                  ('man_made_mast+height_80', 177),
                  ('man_made_mast+height_40', 178),
                  ('man_made_mast+height_20', 179),
                  ('man_made_mast', 180),
                  ('man_made_tower+height_160', 181),
                  ('man_made_tower+height_80', 182),
                  ('man_made_tower+height_40', 183),
                  ('man_made_tower+minor_types', 184),
                  ('man_made_tower', 185),
                  ('man_made_communications_tower', 186),
                  ('man_made_obelisk', 187),
                  ('man_made_bridge', 188),
                  ('man_made_cross', 189),
                  ('man_made_works', 190),
                  ('landuse_military', 191),
                  ('landuse_garages', 192),
                  ('landuse_retail', 193),
                  ('landuse_residential', 194),
                  ('landuse_industrial', 195),
                  ('landuse_railway', 196),
                  ('landuse_cemetery', 197),
                  ('landuse_commercial', 198),
                  ('landuse_quarry', 199),
                  ('landuse_brownfield', 200),
                  ('landuse_landfill', 201),
                  ('landuse_construction', 202),
                  ('landuse_village_green', 203),
                  ('landuse_meadow', 204),
                  ('landuse_grass', 205),
                  ('landuse_allotments', 206),
                  ('landuse_farmyard', 207),
                  ('landuse_farmland', 208),
                  ('landuse_greenhouse_horticulture', 209),
                  ('landuse_forest', 210),
                  ('landuse_reservoir', 211),
                  ('landuse_basin', 212),
                  ('landuse_recreation_ground', 213),
                  ('waterway_waterfall', 214),
                  ('place_archipelago', 215),
                  ('place_island', 216),
                  ('place_islet', 217),
                  ('historic_city_gate', 218),
                  ('historic_memorial+medium', 219),
                  ('historic_memorial+small', 220),
                  ('historic_memorial', 221),
                  ('historic_monument', 222),
                  ('historic_fort', 223),
                  ('historic_castle+minor_types', 224),
                  ('historic_castle', 225),
                  ('historic_manor', 226),
                  ('historic_archaeological_site', 227),
                  ('historic_wayside_cross', 228),
                  ('historic_wayside_shrine', 229),
                  ('military_bunker', 230),
                  ('military_danger_area', 231),
                  ('barrier_gate', 232),
                  ('barrier_lift_gate', 233),
                  ('barrier_swing_gate', 234),
                  ('barrier_block', 235),
                  ('barrier_log', 236),
                  ('barrier_toll_booth', 237),
                  ('barrier_bollard', 238)
                ) AS f (feature, prio)
                ON f.feature = CONCAT(combined.feature, '+'||combined.variant)
            ) -- end of zoom_thresholds CTE
            SELECT -- this is the symbols features only
                way,
                "name",
                "lang",
                "font",
                "ref",
                "operator",
                "brand",
                "osm_id",
                feature,
                variant,
                start_symbol,
                start_label,
                prio,
                CASE
                  WHEN z(!scale_denominator!) >= start_label THEN
                    'symbol-for-label'
                  ELSE
                    'symbol-only'
                END AS vis_type,
                "int_elevation",
                "shelter_type",
                "information",
                "int_access",
                "parking",
                "int_bench_type",
                "backrest",
                "recycling_type",
                "int_text_dy_viewpoint",
                "int_offset_x_viewpoint",
                "int_offset_y_viewpoint",
                "int_width_viewpoint",
                "int_height_viewpoint",
                "icao",
                "iata",
                "drinking_water",
                "intermittent",
                "int_text_offset_tree",
                "location",
                "height",
                "tower:type",
                "tower:construction",
                "memorial",
                "castle_type",
                "religion",
                "shop",
                "office",
                "diplomatic",
                "building",
                way_area,
                way_length,
                way_pixels
              FROM zoom_thresholds
              WHERE z(!scale_denominator!) >= start_symbol
            UNION ALL
            SELECT -- this is the labels features only
                way,
                "name",
                "lang",
                "font",
                "ref",
                "operator",
                "brand",
                "osm_id",
                feature,
                variant,
                start_symbol,
                start_label,
                prio,
                CASE
                  WHEN z(!scale_denominator!) >= start_symbol THEN
                    'label-for-symbol'
                  ELSE
                    'label-only'
                END AS vis_type,
                "int_elevation",
                "shelter_type",
                "information",
                "int_access",
                "parking",
                "int_bench_type",
                "backrest",
                "recycling_type",
                "int_text_dy_viewpoint",
                "int_offset_x_viewpoint",
                "int_offset_y_viewpoint",
                "int_width_viewpoint",
                "int_height_viewpoint",
                "icao",
                "iata",
                "drinking_water",
                "intermittent",
                "int_text_offset_tree",
                "location",
                "height",
                "tower:type",
                "tower:construction",
                "memorial",
                "castle_type",
                "religion",
                "shop",
                "office",
                "diplomatic",
                "building",
                way_area,
                way_length,
                way_pixels
              FROM zoom_thresholds
              WHERE z(!scale_denominator!) >= start_label
          ) AS final
          ORDER BY
            (CASE WHEN vis_type IN ('label-for-symbol') THEN 2 ELSE 1 END) ASC, -- put the addon labels for symbols last
            (CASE
              WHEN start_symbol IS NULL THEN start_label
              WHEN start_label IS NULL THEN start_symbol
              ELSE 0.5*(start_symbol+start_label)
            END) ASC NULLS LAST,
            prio ASC NULLS LAST,
            way_pixels DESC NULLS LAST,
            way_length DESC NULLS LAST,
            char_length(name) DESC NULLS LAST,
            name DESC NULLS LAST
        ) AS amenity_points
    properties:
      minzoom: 10
  - id: addon-symbols-shelter
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            feature,
            osm_id_shelter,
            osm_id
          FROM
            (SELECT
                way,
                CASE
                  WHEN highway = 'bus_stop' THEN 'bus_stop_shelter'
                  WHEN railway = 'halt' THEN 'railway_halt_shelter'
                  WHEN railway = 'tram_stop' THEN 'tram_stop_shelter'
                END AS feature,
                COALESCE(
                  (SELECT
                      osm_id
                    FROM planet_osm_polygon s
                    WHERE ST_DWithin(p.way, s.way, 28.0*NULLIF(!scale_denominator!*0.001*0.28,0))
                      AND amenity = 'shelter'
                    ORDER BY ST_Distance(p.way, s.way) ASC, osm_id ASC LIMIT 1
                  ),
                  (SELECT
                      osm_id
                    FROM planet_osm_point s
                    WHERE ST_DWithin(p.way, s.way, 28.0*NULLIF(!scale_denominator!*0.001*0.28,0))
                      AND amenity = 'shelter'
                    ORDER BY ST_Distance(p.way, s.way) ASC, osm_id ASC LIMIT 1
                  ),
                  CASE WHEN implicit_shelter = 'yes' AND highway = 'bus_stop' THEN 0 ELSE NULL END
                ) AS osm_id_shelter,
                osm_id
              FROM
                (SELECT
                    way,
                    highway,
                    railway,
                    CASE WHEN (tags->'shelter') = 'yes' THEN 'yes' ELSE 'no' END AS implicit_shelter,
                    osm_id
                  FROM planet_osm_point
                  WHERE way && !bbox!
                UNION ALL
                SELECT
                    ST_PointOnSurface(way) AS way,
                    highway,
                    railway,
                    CASE WHEN (tags->'shelter') = 'yes' THEN 'yes' ELSE 'no' END AS implicit_shelter,
                    osm_id
                  FROM planet_osm_polygon
                  WHERE way && !bbox!) AS p
              WHERE highway = 'bus_stop' OR railway = 'halt' OR railway = 'tram_stop'
            ) AS _
          WHERE osm_id_shelter IS NOT NULL
        ) AS addon_symbols_shelter
    properties:
      minzoom: 16
  - id: addon-symbols-parking
    geometry: point
    <<: *extents
    Datasource:
      geometry_table: planet_osm_point
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            feature,
            addon,
            shopping,
            fee,
            lit,
            supervised,
            disabled,
            women,
            parent,
            capacity,
            covered,
            osm_id
          FROM
            (WITH parking_points AS
              (SELECT
                  ST_SnapToGrid(
                    way,
                    NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0)) AS way,
                  CASE WHEN amenity = 'parking' AND parking IN ('street_side', 'lane') THEN
                    'parking_minor'
                  ELSE
                    amenity
                  END AS feature,
                  CASE WHEN access = 'customers' THEN 'yes' ELSE 'no' END AS shopping,
                  CASE WHEN fee = 'yes' THEN carto_currency_symbol(carto_local_currency(way)) ELSE 'no' END AS fee,
                  CASE WHEN lit = 'yes' THEN 'yes' ELSE 'no' END AS lit,
                  CASE WHEN supervised = 'yes' THEN 'yes' ELSE 'no' END AS supervised,
                  CASE WHEN disabled ~ '^[0-9]{1,4}$' AND disabled != '0' THEN disabled WHEN disabled = 'yes' THEN 'yes' ELSE 'no' END AS disabled,
                  CASE WHEN women ~ '^[0-9]{1,4}$' AND women != '0' THEN women WHEN women = 'yes' THEN 'yes' ELSE 'no' END AS women,
                  CASE WHEN parent ~ '^[0-9]{1,4}$' AND parent != '0' THEN parent WHEN parent = 'yes' THEN 'yes' ELSE 'no' END AS parent,
                  CASE WHEN capacity ~ '^[0-9]{1,4}$' THEN capacity::INTEGER ELSE 0 END AS capacity,
                  CASE WHEN parking = 'multi-storey' OR covered = 'yes' THEN 'yes' ELSE 'no' END AS covered,
                  osm_id
                FROM
                  (SELECT
                      way,
                      amenity,
                      access,
                      tags->'covered' AS covered,
                      tags->'fee' AS fee,
                      tags->'lit' AS lit,
                      tags->'supervised' AS supervised,
                      tags->'parking' AS parking,
                      tags->'capacity:disabled' AS disabled,
                      tags->'capacity:women' AS women,
                      tags->'capacity:parent' AS parent,
                      tags->'capacity' AS capacity,
                      osm_id
                    FROM planet_osm_point
                    WHERE way && !bbox!
                  UNION ALL
                  SELECT
                      ST_PointOnSurface(way) AS way,
                      amenity,
                      access,
                      tags->'covered' AS covered,
                      tags->'fee' AS fee,
                      tags->'lit' AS lit,
                      tags->'supervised' AS supervised,
                      tags->'parking' AS parking,
                      tags->'capacity:disabled' AS disabled,
                      tags->'capacity:women' AS women,
                      tags->'capacity:parent' AS parent,
                      tags->'capacity' AS capacity,
                      osm_id
                    FROM planet_osm_polygon
                    WHERE way && !bbox!) AS p
                WHERE
                  (amenity IN ('parking') AND (access IS NULL OR access NOT IN ('private', 'no', 'permit', 'delivery')) AND
                    (access = 'customers' OR 
                      covered = 'yes' OR 
                      fee = 'yes' OR 
                      lit = 'yes' OR 
                      supervised = 'yes' OR 
                      disabled IS NOT NULL OR 
                      women IS NOT NULL OR 
                      parent IS NOT NULL OR 
                      capacity IS NOT NULL OR 
                      parking = 'multi-storey')) OR
                  (amenity IN ('motorcycle_parking', 'bicycle_parking') AND (access IS NULL OR access NOT IN ('private', 'no', 'permit', 'delivery')) AND
                    (access = 'customers' OR 
                      covered = 'yes' OR 
                      fee = 'yes' OR 
                      lit = 'yes' OR 
                      supervised = 'yes' OR 
                      capacity IS NOT NULL))
              )
              SELECT
                  way,
                  feature,
                  1 AS priority,
                  'covered' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE covered != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  2 AS priority,
                  'disabled' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE disabled != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  3 AS priority,
                  'parent' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE parent != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  4 AS priority,
                  'women' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE women != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  5 AS priority,
                  'lit' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE lit != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  6 AS priority,
                  'shopping' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE shopping != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  7 AS priority,
                  'supervised' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE supervised != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  8 AS priority,
                  'fee' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE fee != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  9 AS priority,
                  'capacity' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE capacity > 0
              UNION ALL
              SELECT
                  way,
                  feature,
                  10 AS priority,
                  'disabled_text' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE disabled NOT IN('yes', 'no')
              UNION ALL
              SELECT
                  way,
                  feature,
                  11 AS priority,
                  'parent_text' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE parent NOT IN('yes', 'no')
              UNION ALL
              SELECT
                  way,
                  feature,
                  12 AS priority,
                  'women_text' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE women NOT IN('yes', 'no')
              UNION ALL
              SELECT
                  way,
                  feature,
                  13 AS priority,
                  'lit2' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE lit != 'no'
              UNION ALL
              SELECT
                  way,
                  feature,
                  14 AS priority,
                  'shopping2' AS addon,
                  shopping,
                  fee,
                  lit,
                  supervised,
                  disabled,
                  women,
                  parent,
                  capacity,
                  covered,
                  osm_id
                FROM parking_points
                WHERE shopping != 'no'
            ) AS _
          ORDER BY priority
        ) AS addon_symbols_parking
    properties:
      minzoom: 17
  - id: addon-symbols-water
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            feature,
            (CASE WHEN az < 180 THEN -1.0 ELSE 1.0 END)*(CASE WHEN az BETWEEN 60 AND 300 THEN 7 ELSE 9 END) AS xdist,
            (CASE WHEN az BETWEEN 60 AND 300 THEN -5 ELSE 0 END) AS ydist,
            (CASE WHEN az < 180 THEN -1.0 ELSE 1.0 END)*(CASE WHEN az BETWEEN 60 AND 300 THEN 9 ELSE 7 END) AS xdist2,
            (CASE WHEN az BETWEEN 60 AND 300 THEN 0 ELSE -5 END) AS ydist2,
            osm_id
          FROM
            (SELECT
                way,
                'drinking_water' AS feature,
                COALESCE(
                  (SELECT
                      -- this determines the direction of a point on the waterway(s) intersecting the node with a 1 pixel circle around the node
                      -- which approximates the direction of the waterway, hence where best not to place the addon symbol
                      degrees(ST_Azimuth(p.way, ST_PointOnSurface(ST_Intersection(ST_Boundary(ST_Buffer(p.way, 1.0*NULLIF(!scale_denominator!*0.001*0.28,0))), ST_Collect(l.way)))))
                    FROM planet_osm_line l
                    WHERE ST_DWithin(p.way, l.way, 0.1) AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                  ),
                  120.0
                ) AS az,
                osm_id
              FROM
                (SELECT
                    way,
                    "natural",
                    man_made,
                    amenity,
                    tags->'drinking_water' AS drinking_water,
                    osm_id
                  FROM planet_osm_point
                  WHERE way && !bbox!
                UNION ALL
                SELECT
                    ST_PointOnSurface(way) AS way,
                    "natural",
                    man_made,
                    amenity,
                    tags->'drinking_water' AS drinking_water,
                    osm_id
                  FROM planet_osm_polygon
                  WHERE way && !bbox!) AS p
              WHERE ("natural" IN ('spring', 'hot_spring') OR man_made IN ('water_well') OR amenity IN ('fountain'))
                AND (amenity = 'drinking_water' OR drinking_water = 'yes')
            ) AS _
        ) AS addon_symbols_water
    properties:
      minzoom: 17
  - id: viewpoints
    geometry: polygon
    <<: *extents
    Datasource:
      geometry_table: planet_osm_point
      anchors_table: carto_anchors
      <<: *osm2pgsql
      table: |-
        (SELECT
            ST_Difference(
              ST_Translate(
                carto_viewpoint_symbol_from_db(
                  'viewpoint',
                  width,
                  width_px,
                  azimuth,
                  angle
                ),
                ST_X(point),
                ST_Y(point)
              ),
              others
            ) AS way,
            'viewpoint' AS type
          FROM
            (SELECT
                CASE WHEN ((width_px % 2) = 0) THEN
                  ST_SnapToGrid(
                    way,
                    NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                ELSE
                  ST_SnapToGrid(
                    way,
                    0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                    NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                END AS point,
                (SELECT
                    COALESCE(
                      ST_Union(
                          ST_Buffer(
                            ST_Translate(
                              carto_viewpoint_symbol_from_db(
                                feature,
                                t2.width_px*NULLIF(!scale_denominator!*0.001*0.28,0),
                                t2.width_px,
                                t2.azimuth,
                                t2.angle
                              ),
                              ST_X(t2.way),
                              ST_Y(t2.way)
                            ),
                            1.2*NULLIF(!scale_denominator!*0.001*0.28,0)
                          )
                      ),
                      ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                    )
                  FROM
                    (SELECT
                        CASE WHEN ((width_px % 2) = 0) THEN
                          ST_SnapToGrid(
                            way,
                            NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                        ELSE
                          ST_SnapToGrid(
                            way,
                            0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                            NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                        END AS way,
                        feature,
                        hash,
                        elevation,
                        view_geometry[1] AS azimuth,
                        view_geometry[2] AS angle,
                        width_px
                      FROM
                        (SELECT
                            way,
                            'viewpoint' AS feature,
                            osm_id AS hash,
                            CASE WHEN (tags ? 'ele') AND tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN 
                              (tags->'ele')::NUMERIC
                            ELSE
                              -100000.0
                            END AS elevation,
                            carto_viewpoint_direction(tags->'direction') AS view_geometry,
                            carto_barrier_line_width('viewpoint', z(!scale_denominator!)) AS width_px
                          FROM planet_osm_point
                          WHERE (tourism = 'viewpoint' AND EXISTS (SELECT 1 FROM carto_anchors WHERE "name" = 'viewpoint_' || osm_id::text))
                            AND way && ST_Expand(
                              t1.way,
                              (t1.width_px+1.2)*NULLIF(!scale_denominator!*0.001*0.28,0))
                        UNION ALL
                        SELECT
                            way,
                            'peak' AS feature,
                            osm_id AS hash,
                            0.0 AS elevation, -- ele does not matter for peaks since they always have priority over viewpoints
                            '{0.0,0.0}' AS view_geometry,
                            8.0 AS width_px
                          FROM planet_osm_point
                          WHERE ("natural" = 'peak' AND EXISTS (SELECT 1 FROM carto_anchors WHERE "name" = 'peak_' || osm_id::text))
                            AND way && ST_Expand(
                              t1.way,
                              (0.5*(t1.width_px + 8.0)+1.2)*NULLIF(!scale_denominator!*0.001*0.28,0))
                        ) AS _
                    ) AS t2
                  WHERE ((t2.feature = 'peak') OR 
                         (t2.elevation > t1.elevation) OR 
                         ((t2.elevation = t1.elevation) AND (t2.angle > t1.view_geometry[2])) OR 
                         ((t2.elevation = t1.elevation) AND (t2.angle = t1.view_geometry[2]) AND (t2.hash > t1.hash)))
                    AND ST_DWithin(t2.way, t1.way, (0.5*(t1.width_px+t2.width_px)+1.2)*NULLIF(!scale_denominator!*0.001*0.28,0))
                    AND t2.width_px >= 8
                    AND t1.width_px >= 10
                ) AS others,
                view_geometry[1] AS azimuth,
                view_geometry[2] AS angle,
                width_px,
                width_px*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
              FROM
                (SELECT
                    way,
                    osm_id AS hash,
                    CASE WHEN (tags ? 'ele') AND tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN 
                      (tags->'ele')::NUMERIC
                    ELSE
                      -100000.0
                    END AS elevation,
                    carto_viewpoint_direction(tags->'direction') AS view_geometry,
                    carto_barrier_line_width('viewpoint', z(!scale_denominator!)) AS width_px
                  FROM planet_osm_point
                  WHERE tourism = 'viewpoint'
                    AND way && !bbox!
                    AND EXISTS (SELECT 1 FROM carto_anchors WHERE "name" = 'viewpoint_' || osm_id::text)
                ) AS t1
            ) AS viewpoints_raw
          WHERE width_px >= 10
        ) AS viewpoints
    properties:
      minzoom: 16
  - id: power-towers
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE power = 'tower'
        ) AS power_towers
    properties:
      minzoom: 14
  - id: power-poles
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE power = 'pole'
        ) AS power_poles
    properties:
      minzoom: 16
  - id: roads-text-ref-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            height,
            width,
            refs
          FROM (
            SELECT
                way,
                osm_id,
                highway,
                array_length(refs,1) AS height,
                (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
                array_to_string(refs, E'\n') AS refs
              FROM (
                SELECT
                    way,
                    osm_id,
                    highway,
                    string_to_array(ref, ';') AS refs
                FROM planet_osm_roads
                  WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary')
                  AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 11
          ORDER BY
            CASE
              WHEN highway = 'motorway' THEN 38
              WHEN highway = 'trunk' THEN 37
              WHEN highway = 'primary' THEN 36
              WHEN highway = 'secondary' THEN 35
              WHEN highway = 'tertiary' THEN 34
              WHEN highway = 'unclassified' THEN 33
              WHEN highway = 'residential' THEN 32
              WHEN highway = 'runway' THEN 6
              WHEN highway = 'taxiway' THEN 5
              ELSE NULL
            END DESC NULLS LAST,
            height DESC,
            width DESC,
            refs,
            osm_id
        ) AS roads_text_ref_low_zoom
    properties:
      minzoom: 10
      maxzoom: 12
  - id: junctions
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            junction,
            ref,
            name_label[1] AS name,
            name_label[3] AS font
          FROM
            (SELECT
                way,
                highway,
                junction,
                ref,
                carto_label_name(way, name, tags, E'\n') AS name_label
              FROM planet_osm_point
              WHERE highway = 'motorway_junction' OR highway = 'traffic_signals' OR junction = 'yes') AS _
        ) AS junctions
    properties:
      minzoom: 11
  - id: roads-text-ref
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            height,
            width,
            refs
          FROM (
            SELECT
                osm_id,
                way,
                highway,
                array_length(refs,1) AS height,
                (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
                array_to_string(refs, E'\n') AS refs
              FROM (
                SELECT
                    osm_id,
                    way,
                    COALESCE(
                      CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'busway', 'bus_guideway', 'residential') THEN highway ELSE NULL END,
                      CASE WHEN aeroway IN ('runway', 'taxiway') THEN aeroway ELSE NULL END
                    ) AS highway,
                    string_to_array(ref, ';') AS refs
                  FROM planet_osm_line
                  WHERE (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'busway', 'bus_guideway', 'residential') OR aeroway IN ('runway', 'taxiway'))
                    AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 11
          ORDER BY
            CASE
              WHEN highway = 'motorway' THEN 38
              WHEN highway = 'trunk' THEN 37
              WHEN highway = 'primary' THEN 36
              WHEN highway = 'secondary' THEN 35
              WHEN highway = 'tertiary' THEN 34
              WHEN highway = 'unclassified' THEN 33
              WHEN highway = 'residential' THEN 32
              WHEN highway = 'bus_guideway' THEN 31
              WHEN highway = 'busway' THEN 30
              WHEN highway = 'runway' THEN 6
              WHEN highway = 'taxiway' THEN 5
              ELSE NULL
            END DESC NULLS LAST,
            height DESC,
            width DESC,
            refs,
            osm_id
        ) AS roads_text_ref
    properties:
      minzoom: 13
  - id: roads-area-text-name
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            highway,
            name_label[1] AS name,
            name_label[3] AS font
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                COALESCE(highway, railway) AS highway,
                carto_label_name(way, name, tags, E'\n') AS name_label
              FROM planet_osm_polygon
              WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')
                OR railway IN ('platform')) AS _
          WHERE name_label[1] IS NOT NULL
          ORDER BY way_pixels DESC
        ) AS roads_area_text_name
    properties:
      minzoom: 15
  - id: roads-text-name
    class: directions
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            tunnel,
            construction,
            name_label[1] AS name,
            name_label[3] AS font,
            -- name,
            oneway,
            path_type
          FROM
            (SELECT
                way,
                CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway END AS highway,
                CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,
                construction,
                carto_label_name(way, name, tags, ' - ') AS name_label,
                name,
                CASE
                  WHEN oneway IN ('yes', '-1') THEN oneway
                  WHEN junction IN ('roundabout') AND (oneway IS NULL OR NOT oneway IN ('no', 'reversible')) THEN 'yes'
                  ELSE NULL
                END AS oneway,
                carto_path_type(foot, bicycle, horse) AS path_type,
                z_order,
                COALESCE(layer, 0) AS layernotnull,
                l.osm_id AS osm_id
              FROM planet_osm_line l
              JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
                  ('motorway', 380),
                  ('trunk', 370),
                  ('primary', 360),
                  ('secondary', 350),
                  ('tertiary', 340),
                  ('residential', 330),
                  ('unclassified', 330),
                  ('road', 330),
                  ('living_street', 320),
                  ('pedestrian', 310),
                  ('raceway', 300),
                  ('motorway_link', 240),
                  ('trunk_link', 230),
                  ('primary_link', 220),
                  ('secondary_link', 210),
                  ('tertiary_link', 200),
                  ('bus_guideway', 190),
                  ('busway', 180),
                  ('service', 150),
                  ('construction', 10)
                ) AS ordertable (highway, prio)
                USING (highway)
              WHERE highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link',
              'tertiary', 'tertiary_link', 'residential', 'unclassified', 'road', 'service', 'pedestrian', 'raceway', 'living_street',
              'construction', 'busway', 'bus_guideway')) AS _
          ORDER BY
            z_order DESC, -- put important roads first
            layernotnull, -- put top layered roads first
            length(name) DESC, -- Try to fit big labels in first
            name DESC, -- Force a consistent ordering between differently named streets
            osm_id DESC -- Force an ordering for streets of the same name, e.g. dualized roads
        ) AS roads_text_name
    properties:
      minzoom: 13
  - id: paths-text-name
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            name_label[1] AS name,
            name_label[3] AS font
          FROM
            (SELECT
                way,
                highway,
                carto_label_name(way, name, tags, ' - ') AS name_label
              FROM planet_osm_line
              WHERE highway IN ('bridleway', 'footway', 'cycleway', 'path', 'track', 'steps')) AS _
        ) AS paths_text_name
    properties:
      minzoom: 15
  - id: text-poly-low-zoom
    class: text-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            feature,
            name_label[1] AS name,
            name_label[3] AS font,
            is_building
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                COALESCE(
                  'landuse_' || CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END,
                  'natural_' || CASE WHEN "natural" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock') THEN "natural" ELSE NULL END,
                  'place_' || CASE WHEN place IN ('island') THEN place ELSE NULL END
                ) AS feature,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                'no' AS is_building
              FROM planet_osm_polygon
              WHERE (landuse IN ('forest', 'military')
                  OR "natural" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock')
                  OR "place" IN ('island'))
                AND building IS NULL
             UNION ALL
             SELECT
                ST_ClosestPoint(oway,ST_PointOnSurface(way)),
                ST_Area(ST_Envelope(oway))/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                'place_archipelago' AS feature,
                name_label,
                'no' AS is_building
             FROM
               (SELECT
                  (ST_Dump(
                    -- this detects multipolygons extending over the 180 degree meridian to split them
                    CASE WHEN (ST_XMax(way)-ST_XMin(way)) < 20037508 THEN
                      ST_ConvexHull(way)
                    ELSE
                      -- splits the polygon into the two hemisphere parts
                      ST_Collect(
                        ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((-20037508 -20037508, -20037508 20037508, 0 20037508, 0 -20037508, -20037508 -20037508))'), 3857))),
                        ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((0 -20037508, 0 20037508, 20037508 20037508, 20037508 -20037508, 0 -20037508))'), 3857)))
                      )
                    END
                  )).geom AS way,
                  way AS oway,
                  carto_label_name(way, name, tags, E'\n') AS name_label
                FROM planet_osm_polygon
                WHERE "place" IN ('archipelago')
                  AND building IS NULL
              ) AS archipelagos
            ) AS labels
          WHERE name_label[1] IS NOT NULL
          ORDER BY way_pixels DESC
        ) AS text_poly_low_zoom
    properties:
      minzoom: 4
      maxzoom: 9
  - id: text-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            feature,
            access,
            name_label[1] AS name,
            name_label[3] AS font,
            operator,
            ref,
            way_area,
            is_building
          FROM
            (SELECT
                way,
                NULL as way_pixels,
                COALESCE('man_made_' || man_made, 'waterway_' || waterway, 'natural_' || "natural") AS feature,
                access,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                tags->'operator' as operator,
                ref,
                NULL AS way_area,
                CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building
              FROM planet_osm_line
              WHERE (man_made IN ('pier', 'breakwater', 'groyne', 'embankment')
                  OR waterway IN ('dam', 'weir', 'lock_gate')
                  OR "natural" IN ('cliff', 'earth_bank'))) AS _
          WHERE name_label[1] IS NOT NULL OR ref IS NOT NULL OR operator IS NOT NULL
        ) AS text_line
    properties:
      minzoom: 10
  - id: building-text
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name_label[1] AS name,
            name_label[3] AS font,
            way_pixels
          FROM
            (SELECT
                way,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
              FROM planet_osm_polygon
              WHERE building IS NOT NULL
                AND building NOT IN ('no')
                -- only show names if these are non-ambiguously building names
                AND amenity IS NULL
                AND leisure IS NULL
                AND (shop IS NULL OR shop IN ('no', 'vacant', 'closed', 'disused', 'empty'))
                AND (tags->'office' IS NULL OR tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty'))
            ) AS _
          WHERE name_label[1] IS NOT NULL
          ORDER BY way_pixels DESC
        ) AS building_text
    properties:
      minzoom: 14
  - id: interpolation
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE "addr:interpolation" IS NOT NULL
        ) AS interpolation
    properties:
      minzoom: 17
  - id: addresses
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            osm_id_building,
            ref,
            entrance,
            addr_housenumber,
            addr_housename,
            addr_unit,
            addr_flats,
            CONCAT('/', addr_flats) AS addr_flats_sep,
            osm_id
          FROM
            (SELECT
                ST_PointOnSurface(way) AS way,
                'poly' || osm_id::text AS osm_id_building,
                ref,
                NULL AS entrance,
                carto_shorten_address("addr:housenumber") AS addr_housenumber,
                "addr:housename" AS addr_housename,
                carto_shorten_address(tags->'addr:unit') AS addr_unit,
                carto_shorten_address(tags->'addr:flats') AS addr_flats,
                way_area,
                'poly' || osm_id::text AS osm_id
              FROM planet_osm_polygon a
              WHERE way && !bbox! -- Not ST_PointOnSurface(way) because name might be NULL
                AND (("addr:housenumber" IS NOT NULL) OR
                     ("addr:housename" IS NOT NULL) OR
                     ((tags->'addr:unit') IS NOT NULL) OR
                     ((tags->'addr:flats') IS NOT NULL))
                AND building IS NOT NULL AND building NOT IN ('no')
                AND way_area < 4000000*POW(!scale_denominator!*0.001*0.28,2)
            UNION ALL
            SELECT
                way,
                -- this is the osm_id of the building with the same housenumber this address node is located on
                -- or any other non-entrance address node with the same housenumber within the same building
                COALESCE(
                  CASE WHEN (apnt."addr:housenumber" IS NOT NULL) THEN
                    (SELECT
                        CASE WHEN b."addr:housenumber" = apnt."addr:housenumber" THEN
                          'poly' || b.osm_id::text
                        ELSE
                          (SELECT
                              'pnt' || apnt2.osm_id::text
                            FROM planet_osm_point AS apnt2
                            WHERE ST_DWithin(b.way, apnt2.way, 0.1) AND
                              apnt2."addr:housenumber" = apnt."addr:housenumber" AND
                              apnt2.osm_id != apnt.osm_id AND
                              ((apnt2.tags->'entrance') IS NULL OR (apnt2.tags->'entrance') = 'no')
                            ORDER BY apnt2.osm_id
                            LIMIT 1)
                        END
                      FROM planet_osm_polygon b
                      WHERE ST_DWithin(b.way, apnt.way, 0.1) AND
                        building IS NOT NULL AND building NOT IN ('no')
                      ORDER BY
                        CASE WHEN b."addr:housenumber" = apnt."addr:housenumber" THEN 0 ELSE 1 END ASC,
                        way_area DESC
                      LIMIT 1
                    )
                  END,
                  'pnt' || osm_id::text
                ) AS osm_id_building,
                ref,
                tags->'entrance' AS entrance,
                carto_shorten_address("addr:housenumber") AS addr_housenumber,
                "addr:housename" AS addr_housename,
                carto_shorten_address(tags->'addr:unit') AS addr_unit,
                carto_shorten_address(tags->'addr:flats') AS addr_flats,
                NULL AS way_area,
                'pnt' || osm_id::text AS osm_id
              FROM planet_osm_point AS apnt
              WHERE way && !bbox!
                AND (("addr:housenumber" IS NOT NULL) OR
                     ("addr:housename" IS NOT NULL) OR
                     ((tags->'addr:unit') IS NOT NULL) OR
                     ((tags->'addr:flats') IS NOT NULL) OR
                     ("ref" IS NOT NULL))
            ) AS _
          ORDER BY
            way_area DESC NULLS LAST,
            -- render entrance nodes after standalone address nodes
            CASE WHEN entrance IS NULL OR entrance = 'no' THEN 0 ELSE 1 END ASC
        ) AS addresses
    properties:
      minzoom: 17
  - id: water-lines-text
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            lock,
            name_label[1] AS name,
            name_label[3] AS font,
            intermittent,
            seasonal,
            int_tunnel
          FROM
            (SELECT
                way,
                waterway,
                lock,
                carto_label_name(way, name, tags, ' - ') AS name_label,
                tags->'intermittent' as intermittent,
                tags->'seasonal' as seasonal,
                CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
                COALESCE(layer,0) AS layernotnull
              FROM planet_osm_line
              WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
                AND (tunnel IS NULL or tunnel != 'culvert')) AS _
          WHERE name_label[1] IS NOT NULL
          ORDER BY layernotnull
        ) AS water_lines_text
    properties:
      minzoom: 13
  - id: ferry-routes-text
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name_label[1] AS name,
            name_label[3] AS font
          FROM
            (SELECT
                way,
                carto_label_name(way, name, tags, E'\n') AS name_label
              FROM planet_osm_line
              WHERE route = 'ferry') AS _
          WHERE name_label[1] IS NOT NULL
        ) AS ferry_routes_text
    properties:
      minzoom: 13
  - id: admin-text
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name_label[1] AS name,
            name_label[3] AS font,
            admin_level
          FROM
            (SELECT
                way,
                carto_label_name(way, name, tags, E'\n') AS name_label,
                admin_level,
                way_area
              FROM planet_osm_polygon
              WHERE boundary = 'administrative'
                AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')) AS _
          WHERE name_label[1] IS NOT NULL
          ORDER BY admin_level::integer ASC, way_area DESC
        ) AS admin_text
    properties:
      minzoom: 16
