# ---------------------------------------------------------------------------
#  highway-embankments.mml
#
#  implicit embankments/cuttings on roads
#
#  to be processed with assemble_project.py
#
#  Copyright 2012-2023 by OSM-Carto contributors
#  Copyright 2017-2023 by Christoph Hormann <chris_hormann@gmx.de>
# ---------------------------------------------------------------------------
#  This file is part of the OSM-Carto alternative colors map style.
#
#  OSM-Carto alternative colors is an open design and free software project
#  You can use, modify and/or redistribute it under the terms of the
#  following licenses:
#
#  Design components of the project are subject to the Creative Commons
#  Attribution ShareAlike 4.0 (CC BY-SA 4.0) License.
#
#  Software components of the project are subject to the GNU Affero General
#  Public License published by the Free Software Foundation, either
#  version 3 of the License, or (at your option) any later version.
#
#  OSM-Carto alternative colors is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
#  General Public License and the Creative Commons Attribution ShareAlike
#  4.0 (CC BY-SA 4.0) License for more details.
#
#  You should have received a copy of the Creative Commons Attribution
#  ShareAlike 4.0 (CC BY-SA 4.0) License along with OSM-Carto alternative
#  colors. If not, see
#  <https://creativecommons.org/licenses/by-sa/4.0/legalcode>.
#
#  You should have also received a copy of the GNU Affero General Public
#  License. If not, see <https://www.gnu.org/licenses/>.
# ---------------------------------------------------------------------------
  - id: highway-embankments
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_line
      table: |-
        (SELECT
            ST_Difference(
              l.oline,
              -- this clips the embankment/cutting outlines with the adjacent lines that are not embankment/cutting
              (SELECT
                  COALESCE(
                    ST_Union(
                      CASE WHEN (side_widths[1] = side_widths[2]) THEN
                        ST_Buffer(ST_Intersection(o.way, l.way), (0.5*o.width_px_base + o.side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      ELSE -- separate buffering of both sides with different width
                        ST_Union(
                          ST_Intersection(
                            ST_Buffer(ST_Intersection(o.way, l.way), (0.5*o.width_px_base + o.side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(o.way, -0.25*width_px_base*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*o.width_px_base + GREATEST(o.side_widths[1],o.side_widths[2]) + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          ),
                          ST_Intersection(
                            ST_Buffer(ST_Intersection(o.way, l.way), (0.5*o.width_px_base + o.side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(o.way, 0.25*o.width_px_base*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*o.width_px_base + GREATEST(o.side_widths[1],o.side_widths[2]) + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          )
                        )
                      END
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                FROM 
                  (SELECT
                      o.way AS way,
                      CASE WHEN o.barrier = 'hedge' THEN
                        GREATEST(
                          carto_highway_line_width(COALESCE(o.highway, o.railway, o.waterway, o.man_made, o.barrier), o.service, z(!scale_denominator!)),
                          LEAST(carto_treerow_line_width_mapped(o.barrier, o.tags->'width', o.tags->'height', !bbox!, !scale_denominator!), 60)
                        )
                      ELSE
                        GREATEST(
                          carto_highway_line_width(COALESCE(o.highway, o.railway, o.waterway, o.man_made, o.barrier), o.service, z(!scale_denominator!)),
                          carto_highway_line_width_mapped(
                            o.highway, 
                            CASE WHEN o.man_made = 'dyke' THEN NULL ELSE o.tags->'width:carriageway' END,
                            CASE WHEN o.man_made = 'dyke' THEN NULL ELSE o.tags->'width' END,
                            o.tags->'lanes',
                            o.tags->'parking:both',
                            o.tags->'parking:right',
                            o.tags->'parking:left',
                            !bbox!, 
                            !scale_denominator!
                          )
                        )
                      END AS width_px_base,
                      CASE WHEN o.highway IS NOT NULL AND z(!scale_denominator!) >= 18 THEN
                        carto_highway_side_widths(o.way, o.tags, CASE WHEN o.oneway IN ('yes', '-1') THEN oneway ELSE 'no' END, z(!scale_denominator!))
                      ELSE
                        ARRAY[0.0, 0.0]
                      END AS side_widths
                    FROM planet_osm_line o
                    WHERE (o.highway IS NOT NULL OR o.railway IS NOT NULL OR o.man_made = 'dyke' OR o.barrier = 'hedge' OR o.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')) AND
                      carto_highway_line_width(COALESCE(o.highway, o.railway, o.waterway, o.man_made, o.barrier), o.service, z(!scale_denominator!)) > 0.0 AND
                      ST_DWithin(l.cline, o.way, 0.1) AND
                      o.way && ST_Expand(!bbox!, (0.5*carto_highway_line_width('motorway', z(!scale_denominator!)) + 10.0)*NULLIF(!scale_denominator!*0.001*0.28,0)) AND
                      (
                        (l.type = 'cutting' AND NOT(o.tags @> 'cutting=>yes')) OR
                        (l.type = 'embankment' AND NOT(o.tags @> 'embankment=>yes')) OR
                        (l.type = 'hedge_bank' AND NOT(o.tags @> 'hedge=>hedge_bank')) OR
                        ((l.type = 'dyke_left' OR l.type = 'dyke_right') AND 
                         (
                           (o.man_made IS NULL OR o.man_made NOT IN ('dyke')) OR
                           (l.embankment_width != (CASE WHEN o.man_made = 'dyke' THEN carto_dyke_side_width_mapped (o.tags->'width', !bbox!, !scale_denominator!) ELSE NULL END))
                         )
                        )
                      )
                  ) AS o
              )
            ) AS way,
            "type",
            (CASE 
              WHEN "type" = 'dyke_left' THEN ROUND(2.0*embankment_width-0.5*width_px-1.0 - GREATEST(1.0, embankment_width*0.16))
              WHEN "type" = 'dyke_right' THEN ROUND(2.0*embankment_width-0.5*width_px-1.0 + GREATEST(1.0, embankment_width*0.16))
              ELSE NULL 
            END) AS width
          FROM
            -- this queries the lines with embankment/cutting and buffers + aggregates them separately for embankment and cutting
            (WITH embankments AS
            (SELECT
                way AS cline,
                CASE
                  WHEN (width_px_base + GREATEST(side_widths[1],side_widths[2])) > 0.0 THEN
                    CASE
                      WHEN (side_widths[1] = side_widths[2]) THEN
                        ST_Buffer(way, (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      WHEN (side_widths[1] > side_widths[2]) THEN
                        ST_Union(
                          ST_Intersection(
                            ST_Buffer(way, (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(way, -(0.5*width_px_base + (side_widths[2] + (((0.5*width_px_base + side_widths[1])-(0.5*width_px_base + side_widths[2]))/((0.5*width_px_base + side_widths[1])+(0.5*width_px_base + side_widths[2])))*(side_widths[1]-side_widths[2])))*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          ),
                          ST_Buffer(way, (0.5*width_px_base + side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))
                        )
                      WHEN (side_widths[1] < side_widths[2]) THEN
                        ST_Union(
                          ST_Buffer(way, (0.5*width_px_base + side_widths[1] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                          ST_Intersection(
                            ST_Buffer(way, (0.5*width_px_base + side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)),
                            ST_Buffer(
                              ST_OffsetCurve(way, (0.5*width_px_base + (side_widths[1] + (((0.5*width_px_base + side_widths[2])-(0.5*width_px_base + side_widths[1]))/((0.5*width_px_base + side_widths[1])+(0.5*width_px_base + side_widths[2])))*(side_widths[2]-side_widths[1])))*NULLIF(!scale_denominator!*0.001*0.28,0)),
                              (0.5*width_px_base + side_widths[2] + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          )
                        )
                    END
                ELSE
                  ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                END AS way,
                width_px_base + 2.0*GREATEST(side_widths[1], side_widths[2]) AS width_px,
                "type",
                width_tagged
              FROM 
                (SELECT
                    way,
                    GREATEST(
                      carto_highway_line_width(COALESCE(highway, railway, waterway, man_made, barrier), service, z(!scale_denominator!)),
                      -- dykes have a width dependent pattern so the tagged width goes in there and not here
                      carto_highway_line_width_mapped(
                        highway,
                        CASE WHEN man_made = 'dyke' THEN NULL ELSE tags->'width:carriageway' END,
                        CASE WHEN man_made = 'dyke' THEN NULL ELSE tags->'width' END,
                        tags->'lanes',
                        tags->'parking:both',
                        tags->'parking:right',
                        tags->'parking:left',
                        !bbox!,
                        !scale_denominator!
                      )
                    ) AS width_px_base,
                    CASE WHEN z(!scale_denominator!) >= 18 THEN
                      carto_highway_side_widths(way, tags, CASE WHEN oneway IN ('yes', '-1') THEN 'yes' ELSE 'no' END, !scale_denominator!)
                    ELSE
                      ARRAY[0.0, 0.0]
                    END AS side_widths,
                    (CASE
                       WHEN (tags @> 'cutting=>yes') THEN 'cutting'
                       WHEN (man_made = 'dyke') THEN 'dyke'
                       WHEN (barrier = 'hedge') THEN 'hedge_bank'
                       ELSE 'embankment'
                    END) AS "type",
                    tags->'width' AS width_tagged
                  FROM planet_osm_line
                  WHERE ((man_made = 'dyke') OR (barrier = 'hedge' AND (tags @> 'hedge=>hedge_bank')) OR
                    ((highway IS NOT NULL OR railway IS NOT NULL OR (man_made = 'dyke') OR waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
                    AND ((tags @> 'embankment=>yes') OR (tags @> 'cutting=>yes'))))
                    AND way && ST_Expand(!bbox!, (0.5*carto_highway_line_width('motorway', z(!scale_denominator!)) + 10.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                ) AS _
            )
            SELECT -- the normal implicit embankments/cuttings
                way,
                ST_Boundary(way) AS oline,
                cline,
                "type",
                NULL AS width_px,
                NULL AS embankment_width
              FROM
                (SELECT
                    ST_Union(way) AS way,
                    ST_Collect(cline) AS cline,
                    "type"
                  FROM embankments
                  WHERE "type" != 'dyke' AND width_px > 0.0
                  GROUP BY "type"
                ) AS _
            UNION ALL
            SELECT -- dykes left side
                ST_Union(way) AS way,
                ST_Collect(ST_OffsetCurve(cline, (0.5*width_px + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))) AS oline,
                ST_Collect(cline) AS cline,
                'dyke_left' AS "type",
                width_px,
                carto_dyke_side_width_mapped (width_tagged, !bbox!, !scale_denominator!) AS embankment_width
              FROM embankments
              WHERE "type" = 'dyke' AND width_px > 0.0
              GROUP BY "type", embankment_width, width_px
            UNION ALL
            SELECT -- dykes right side
                ST_Union(way) AS way,
                ST_Collect(ST_Reverse(ST_OffsetCurve(cline, -(0.5*width_px + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)))) AS oline,
                ST_Collect(cline) AS cline,
                'dyke_right' AS "type",
                width_px,
                carto_dyke_side_width_mapped (width_tagged, !bbox!, !scale_denominator!) AS embankment_width
              FROM embankments
              WHERE "type" = 'dyke' AND width_px > 0.0
              GROUP BY "type", embankment_width, width_px
            ) AS l
        ) AS highway_embankments
    properties:
      minzoom: 16
