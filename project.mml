scale: 1
metatile: 2
name: OpenStreetMap Carto
description: A general-purpose OpenStreetMap mapnik style, in CartoCSS
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 0
  - 0
  - 4
format: png
interactivity: false
minzoom: 0
maxzoom: 22
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

# Various parts to be included later on
_parts:
  # Extents are used for tilemill, and don't actually make it to the generated XML
  extents: &extents
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "gis"
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"

Stylesheet:
  - style.mss
  - line-widths-generated.mss
  - fonts.mss
  - shapefiles.mss
  - landcover.mss
  - water.mss
  - water-features.mss
  - road-colors-generated.mss
  - roads.mss
  - power.mss
  - placenames.mss
  - buildings.mss
  - stations.mss
  - amenity-points.mss
  - ferry-routes.mss
  - aerialways.mss
  - admin.mss
  - addressing.mss
  - golf.mss
Layer:
  - id: landcover-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, name, way_pixels, religion,
            COALESCE(wetland, landuse, "natural") AS feature
          FROM (SELECT
              way, COALESCE(name, '') AS name, religion,
              ('landuse_' || (CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END)) AS landuse,
              ('natural_' || (CASE WHEN "natural" IN ('wood', 'sand', 'scree', 'shingle', 'bare_rock', 'beach') THEN "natural" ELSE NULL END)) AS "natural",
              ('wetland_' || (CASE WHEN "natural" IN ('wetland', 'mud') THEN (CASE WHEN "natural" IN ('mud') THEN "natural" ELSE tags->'wetland' END) ELSE NULL END)) AS wetland,
              way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
            FROM planet_osm_polygon
            WHERE (landuse IN ('forest', 'military')
              OR "natural" IN ('wood', 'wetland', 'mud', 'sand', 'scree', 'shingle', 'bare_rock', 'beach'))
              AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
              AND building IS NULL
            ORDER BY COALESCE(layer,0), way_area DESC
          ) AS features
        ) AS landcover_low_zoom
    properties:
      cache-features: true
      minzoom: 7
      maxzoom: 9
  - id: landcover
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            religion,
            crop,
            surface,
            sport,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            feature
          FROM (SELECT
              way, name, religion, crop, surface, sport, way_area, layer, prio,
              COALESCE(aeroway, golf, amenity, wetland, power, landuse, leisure, military, "natural", tourism, highway, railway) AS feature
            FROM (SELECT
                way, COALESCE(name, '') AS name,
                ('aeroway_' || (CASE WHEN aeroway IN ('apron', 'aerodrome') THEN aeroway ELSE NULL END)) AS aeroway,
                ('golf_' || (CASE WHEN (tags->'golf') IN ('rough', 'fairway', 'driving_range', 'water_hazard', 'green', 'bunker') THEN tags->'golf' ELSE NULL END)) AS golf,
                ('amenity_' || (CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'university', 'college', 'school',
                                                      'hospital', 'kindergarten', 'grave_yard', 'prison', 'place_of_worship', 'clinic')
                                                      THEN amenity ELSE NULL END)) AS amenity,
                ('landuse_' || (CASE WHEN landuse IN ('quarry', 'vineyard', 'orchard', 'cemetery', 'residential', 'garages', 'meadow', 'grass',
                                                      'allotments', 'forest', 'farmyard', 'farmland', 'greenhouse_horticulture',
                                                      'recreation_ground', 'village_green', 'retail', 'industrial', 'railway', 'commercial',
                                                      'brownfield', 'landfill', 'construction', 'plant_nursery', 'salt_pond') THEN landuse ELSE NULL END)) AS landuse,
                ('leisure_' || (CASE WHEN leisure IN ('swimming_pool', 'playground', 'park', 'recreation_ground', 'common', 'garden',
                                                      'golf_course', 'miniature_golf', 'picnic_table', 'fitness_centre', 'sports_centre', 'stadium', 'pitch',
                                                      'track', 'dog_park') THEN leisure ELSE NULL END)) AS leisure,
                ('military_' || (CASE WHEN military IN ('danger_area') THEN military ELSE NULL END)) AS military,
                ('natural_' || (CASE WHEN "natural" IN ('beach', 'shoal', 'heath', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub') THEN "natural" ELSE NULL END)) AS "natural",
                ('wetland_' || (CASE WHEN "natural" IN ('wetland', 'mud') THEN (CASE WHEN "natural" IN ('mud') THEN "natural" ELSE tags->'wetland' END) ELSE NULL END)) AS wetland,
                ('power_' || (CASE WHEN power IN ('station', 'sub_station', 'substation', 'generator') THEN power ELSE NULL END)) AS power,
                ('tourism_' || (CASE WHEN tourism IN ('attraction', 'camp_site', 'caravan_site', 'picnic_site') THEN tourism ELSE NULL END)) AS tourism,
                ('highway_' || (CASE WHEN highway IN ('services', 'rest_area') THEN highway ELSE NULL END)) AS highway,
                ('railway_' || (CASE WHEN railway = 'station' THEN railway ELSE NULL END)) AS railway,
                CASE WHEN religion IN ('christian', 'jewish', 'muslim') THEN religion ELSE 'INT-generic'::text END AS religion,
                CASE WHEN (tags->'crop') IN ('rice', 'tea', 'hop') THEN tags->'crop' ELSE tags->'trees' END AS crop,
                surface,
                (tags->'sport') AS sport,
                way_area, layer, 0 AS prio
              FROM planet_osm_polygon
              WHERE (landuse IS NOT NULL
                OR leisure IS NOT NULL
                OR (tags->'golf') IS NOT NULL
                OR aeroway IN ('apron', 'aerodrome')
                OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'university', 'college', 'school', 'hospital', 'kindergarten',
                               'grave_yard', 'place_of_worship', 'prison', 'clinic')
                OR military IN ('danger_area')
                OR "natural" IN ('beach', 'shoal', 'heath', 'mud', 'wetland', 'grassland', 'wood', 'sand', 'scree', 'shingle', 'bare_rock', 'scrub')
                OR power IN ('station', 'sub_station', 'substation', 'generator')
                OR tourism IN ('attraction', 'camp_site', 'caravan_site', 'picnic_site')
                OR highway IN ('services', 'rest_area')
                OR railway = 'station')
                AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
            ) AS landcover
            UNION ALL -- this is only needed because closed ways with a golf* tag are by default not treated as polygons
            SELECT
                way, COALESCE(name, '') AS name,
                'INT-generic'::text AS religion, '' AS crop, '' AS surface, '' AS sport, 0 AS way_area, layer,
                (CASE WHEN (tags->'golf') = 'rough' THEN -1 WHEN (tags->'golf') = 'fairway' THEN 10 WHEN (tags->'golf') = 'green' THEN 20 WHEN (tags->'golf') = 'bunker' THEN 30 ELSE 40 END) AS prio,
                ('golf_' || (CASE WHEN (tags->'golf') IN ('rough', 'fairway', 'driving_range', 'water_hazard', 'green', 'bunker') THEN tags->'golf' ELSE NULL END)) AS feature
              FROM planet_osm_line
              WHERE (tags->'golf') IS NOT NULL
          ) AS landcover_all
          ORDER BY COALESCE(layer,0), prio, way_area DESC
        ) AS features
    properties:
      cache-features: true
      minzoom: 10
  - id: builtup
    geometry: polygon
    extent: *world
    srs-name: mercator
    srs: "+proj=merc +datum=WGS84 +over"
    Datasource:
      file: data/world_boundaries/builtup_area.shp
      type: shape
    properties:
      minzoom: 8
      maxzoom: 9
  - id: landcover-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE man_made = 'cutline'
        ) AS landcover_line
    properties:
    minzoom: 14
  - id: icesheet-poly
    geometry: polygon
    <<: *extents
    Datasource:
      file: data/antarctica-icesheet-polygons-3857/icesheet_polygons.shp
      type: shape
    properties:
      minzoom: 4
  - id: water-lines-casing
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
          FROM planet_osm_line
          WHERE waterway IN ('stream', 'drain', 'ditch')
        ) AS water_lines_casing
    properties:
      minzoom: 12
  - id: rivers-z0
    class: "rivers"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z0.shp"
      type: "shape"
    properties:
      maxzoom: 0
    advanced: {}
  - id: rivers-z1
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z1.shp"
      type: "shape"
    properties:
      minzoom: 1
      maxzoom: 1
    advanced: {}
  - id: rivers-z2
    class: "rivers"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z2.shp"
      type: "shape"
    properties:
      minzoom: 2
      maxzoom: 2
    advanced: {}
  - id: rivers-z3
    class: "rivers"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z3.shp"
      type: "shape"
    properties:
      minzoom: 3
      maxzoom: 3
    advanced: {}
  - id: rivers-z4
    class: "rivers"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z4.shp"
      type: "shape"
    properties:
      minzoom: 4
      maxzoom: 4
    advanced: {}
  - id: rivers-z5
    class: "rivers"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z5.shp"
      type: "shape"
    properties:
      minzoom: 5
      maxzoom: 5
    advanced: {}
  - id: rivers-z6
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/river-polygons-reduced-3857/river_reduced_z6.shp"
      type: "shape"
    properties:
      minzoom: 6
      maxzoom: 6
    advanced: {}
  - id: lakes-z0
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z0.shp"
      type: "shape"
    properties:
      maxzoom: 0
    advanced: {}
  - id: lakes-z1
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z1.shp"
      type: "shape"
    properties:
      minzoom: 1
      maxzoom: 1
    advanced: {}
  - id: lakes-z2
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z2.shp"
      type: "shape"
    properties:
      minzoom: 2
      maxzoom: 2
    advanced: {}
  - id: lakes-z3
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z3.shp"
      type: "shape"
    properties:
      minzoom: 3
      maxzoom: 3
    advanced: {}
  - id: lakes-z4
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z4.shp"
      type: "shape"
    properties:
      minzoom: 4
      maxzoom: 4
    advanced: {}
  - id: lakes-z5
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z5.shp"
      type: "shape"
    properties:
      minzoom: 5
      maxzoom: 5
    advanced: {}
  - id: lakes-z6
    class: "lakes"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/lakes-polygons-reduced-3857/lakes_reduced_z6.shp"
      type: "shape"
    properties:
      minzoom: 6
      maxzoom: 6
    advanced: {}
  - id: water-areas
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            tags->'salt' as salt,
            tags->'glacier:type' as glacier_type,
            landuse,
            name,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock', 'riverbank')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('water', 'glacier'))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS water_areas
    properties:
      minzoom: 7
  - id: ocean-z0
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z0.shp"
      type: "shape"
    properties:
      maxzoom: 0
    advanced: {}
  - id: ocean-z1
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z1.shp"
      type: "shape"
    properties:
      minzoom: 1
      maxzoom: 1
    advanced: {}
  - id: ocean-z2
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z2.shp"
      type: "shape"
    properties:
      minzoom: 2
      maxzoom: 2
    advanced: {}
  - id: ocean-z3
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z3.shp"
      type: "shape"
    properties:
      minzoom: 3
      maxzoom: 3
    advanced: {}
  - id: ocean-z4
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z4.shp"
      type: "shape"
    properties:
      minzoom: 4
      maxzoom: 4
    advanced: {}
  - id: ocean-z5
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z5.shp"
      type: "shape"
    properties:
      minzoom: 5
      maxzoom: 5
    advanced: {}
  - id: ocean-z6
    class: "ocean"
    geometry: "polygon"
    <<: *extents
    Datasource:
      file: "data/ocean-polygons-reduced-3857/ocean_reduced_z6.shp"
      type: "shape"
    properties:
      minzoom: 6
      maxzoom: 6
    advanced: {}
  - id: ocean-lz
    class: "ocean"
    geometry: polygon
    <<: *extents
    Datasource:
      file: data/simplified-water-polygons-complete-3857/simplified_water_polygons.shp
      type: shape
    properties:
      minzoom: 7
      maxzoom: 9
  - id: ocean
    class: "ocean"
    geometry: polygon
    <<: *extents
    Datasource:
      file: data/water-polygons-split-3857/water_polygons.shp
      type: shape
    properties:
      minzoom: 10
  - id: landcover-water
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            surface,
            "natural",
            CASE WHEN "natural" IN ('mud') 
                THEN "natural" 
                ELSE CASE WHEN ("natural" = 'wetland' AND NOT tags ? 'wetland') 
                  THEN 'wetland' 
                  ELSE CASE WHEN ("natural" = 'wetland')
                    THEN tags->'wetland'
                    ELSE NULL
                    END 
                END
            END AS int_wetland,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE "natural" IN ('mud', 'wetland', 'beach', 'shoal', 'scree', 'shingle', 'bare_rock')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS landcover_water
    properties:
      minzoom: 7
  - id: water-lines-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal
          FROM planet_osm_line
          WHERE waterway = 'river'
        ) AS water_lines_low_zoom
    properties:
      minzoom: 8
      maxzoom: 11
  - id: water-lines
    class: water-lines
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            "natural",
            name,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
            'no' AS bridge
          FROM planet_osm_line
          WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')
            AND (bridge IS NULL OR bridge NOT IN ('yes', 'aqueduct'))
            ORDER BY
              COALESCE(layer,0),
              CASE WHEN waterway IN ('derelict_canal') THEN 0 WHEN waterway IN ('drain', 'ditch') THEN 1 WHEN waterway IN ('canal') THEN 2 ELSE 3 END
        ) AS water_lines
    properties:
      minzoom: 12
  - id: ocean-lz-backdrop
    class: "ocean-backdrop"
    geometry: polygon
    <<: *extents
    Datasource:
      file: data/simplified-water-polygons-complete-3857/simplified_water_polygons.shp
      type: shape
    properties:
      minzoom: 7
      maxzoom: 9
  - id: ocean-backdrop
    class: "ocean-backdrop"
    geometry: polygon
    <<: *extents
    Datasource:
      file: data/water-polygons-split-3857/water_polygons.shp
      type: shape
    properties:
      minzoom: 10
  - id: river-areas-backdrop
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('riverbank')
              OR ("natural" IN ('water') AND water IN ('river', 'canal')))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS river_areas_backdrop
    properties:
      minzoom: 7
  - id: saltwater-areas-backdrop
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "natural",
            waterway,
            water,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            tags->'salt' as salt,
            landuse,
            name,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE
            (waterway IN ('dock')
              OR landuse IN ('reservoir', 'basin')
              OR "natural" IN ('water'))
            AND (landuse IS NULL OR landuse NOT IN ('salt_pond'))
            -- water = ocean is for testing only
            AND ((tags @> 'salt=>yes') OR water = 'ocean')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS saltwater_areas
    properties:
      minzoom: 7
  - id: water-areas-backdrop
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            ST_MakeEnvelope(-20037508.342789244, -20037508.342789244, 20037508.342789244, 20037508.342789244, 900913) AS way
        ) AS water_areas_backdrop
    properties:
      minzoom: 7
  - id: landcover-area-symbols
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE WHEN ("natural" in ('reef')) THEN tags->'reef' ELSE surface END AS surface,
            COALESCE(CASE WHEN landuse = 'forest' THEN 'wood' ELSE NULL END, "natural") AS "natural",
            CASE WHEN "natural" IN ('mud') 
                THEN "natural" 
                ELSE CASE WHEN ("natural" = 'wetland' AND NOT tags ? 'wetland') 
                  THEN 'wetland' 
                  ELSE CASE WHEN ("natural" = 'wetland')
                    THEN tags->'wetland'
                    ELSE NULL
                    END
                END
            END AS int_wetland,
            tags->'leaf_type' AS leaf_type,
            tags->'leaf_cycle' AS leaf_cycle,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE ("natural" IN ('mud', 'wetland', 'wood', 'scrub', 'reef') OR landuse = 'forest')
            AND building IS NULL
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS landcover_area_symbols
    properties:
      cache-features: true
      minzoom: 7
  - id: icesheet-outlines
    geometry: linestring
    <<: *extents
    Datasource:
      file: data/antarctica-icesheet-outlines-3857/icesheet_outlines.shp
      type: shape
    properties:
      minzoom: 4
  - id: cliffs
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, "natural", man_made
          FROM planet_osm_line
          WHERE ("natural" IN ('cliff', 'earth_bank') OR man_made = 'embankment')
            AND way && !bbox!
         UNION ALL
         SELECT
            ST_Difference(
              way,
              (SELECT ST_Union(ST_Buffer(way, 6*NULLIF(!scale_denominator!*0.001*0.28,0)))
                 FROM planet_osm_point p
                 WHERE ("natural" IN ('peak', 'volcano', 'saddle') OR (tags @> 'mountain_pass=>yes'))
                   AND ST_DWithin(l.way, p.way, 6*NULLIF(!scale_denominator!*0.001*0.28,0))
              )
            ) AS way, "natural", man_made
          FROM planet_osm_line l
          WHERE "natural" IN ('ridge', 'arete')
            AND l.way && !bbox!
        ) AS cliffs
    properties:
      minzoom: 13
  - id: highway-embankments
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            ST_Difference(
              ST_Boundary(way),
              -- this clips the embankment/cutting outlines with the adjacent lines that are not embankment/cutting
              (SELECT
                  COALESCE(
                    ST_Union(ST_Buffer(ST_Intersection(o.way, l.way),
                      (0.5*carto_highway_line_width(COALESCE(
                        CASE WHEN o.highway = 'service' AND o.service IN ('parking_aisle', 'drive-through', 'driveway') 
                          THEN 'service-minor'
                          ELSE o.highway
                        END,
                        o.railway, o.waterway, o.man_made), z(!scale_denominator!)) + 2.5
                      )*NULLIF(!scale_denominator!*0.001*0.28,0))),
                      ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 900913)
                  )
                FROM planet_osm_line o
                WHERE (o.highway IS NOT NULL OR o.railway IS NOT NULL OR o.man_made = 'dyke' OR o.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')) AND
                  carto_highway_line_width(COALESCE(
                    CASE WHEN o.highway = 'service' AND o.service IN ('parking_aisle', 'drive-through', 'driveway') 
                      THEN 'service-minor'
                      ELSE o.highway
                    END, o.railway, o.waterway, o.man_made), z(!scale_denominator!)) > 0.0 AND
                  ST_DWithin(l.line, o.way, 1) AND
                  o.way && ST_Expand(!bbox!, (0.5*carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0)) AND
                  (
                    (l.type = 'cutting' AND NOT(o.tags @> 'cutting=>yes')) OR
                    (l.type = 'embankment' AND NOT(o.tags @> 'embankment=>yes')) OR
                    (l.type = 'dyke' AND (o.man_made IS NULL OR o.man_made NOT IN ('dyke')))
                  )
              )
            ) AS way,
            type
          FROM
            -- this queries the lines with embankment/cutting and buffers + aggregates them separately for embankment and cutting
            (SELECT
                ST_Union(ST_Buffer(way, (0.5*width_px + 2.5)*NULLIF(!scale_denominator!*0.001*0.28,0))) AS way,
                ST_Collect(way) AS line,
                type
              FROM
                (SELECT
                    way,
                    carto_highway_line_width(COALESCE(
                      CASE WHEN highway = 'service' AND service IN ('parking_aisle', 'drive-through', 'driveway') 
                        THEN 'service-minor'
                        ELSE highway
                      END, railway, waterway, man_made), z(!scale_denominator!)) AS width_px,
                    (CASE WHEN (tags @> 'cutting=>yes') THEN 'cutting' WHEN (man_made = 'dyke') THEN 'dyke' ELSE 'embankment' END) AS type
                  FROM planet_osm_line
                  WHERE (highway IS NOT NULL OR railway IS NOT NULL OR (man_made = 'dyke') OR waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
                    AND ((man_made = 'dyke') OR (tags @> 'embankment=>yes') OR (tags @> 'cutting=>yes')) AND way && !bbox!
                ) AS embankments
              WHERE width_px > 0.0
              GROUP BY type
            ) AS l
        ) AS highway_embankments
    properties:
      minzoom: 16
  - id: marinas-area
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_polygon
          WHERE leisure = 'marina'
        ) AS marinas_area
    properties:
      minzoom: 14
  - id: water-barriers-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (-- All of this assumes a metric coordinate system, won't work with geographic coordinates
         -- First query: barriers mapped using ways not intersecting a waterway
         SELECT
            way,
            waterway,
            'line' AS wtype,
            name
          FROM planet_osm_line b
          WHERE waterway IN ('dam', 'weir', 'lock_gate') AND (b.way && !bbox!)
          AND NOT EXISTS
            (SELECT 1 FROM planet_osm_line l WHERE ST_Intersects(b.way, l.way)
              AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
         UNION ALL
         -- Second query: barriers mapped using ways intersecting a waterway
         SELECT
            way,
            waterway,
            wtype,
            name
          FROM
          ( -- This aggregates all barrier ways intersecting at a common point
            WITH barriers_grouped AS
            (SELECT DISTINCT ON (osm_id)
                barrier,
                ST_LineSubstring(
                  line,
                  GREATEST(0.0, ST_LineLocatePoint(line, point)-1.0/ST_Length(line)),
                  LEAST(1.0, ST_LineLocatePoint(line, point)+1.0/ST_Length(line))) AS line,
                point,
                waterway,
                wtype,
                name,
                contructed_width,
                mapped_width,
                angle
              FROM
                (SELECT
                    MIN(b.osm_id) AS osm_id,
                    ST_LineMerge(ST_Collect(b.way)) AS barrier,
                    l.way AS line,
                    ST_PointOnSurface(ST_Intersection(ST_LineMerge(ST_Collect(b.way)), l.way)) AS point,
                    MIN(b.waterway) AS waterway,
                    MIN(l.waterway) AS wtype,
                    MIN(b.name) AS name,
                    MAX(CASE WHEN l.waterway IN ('river', 'canal') THEN
                      (CASE z(!scale_denominator!)
                        WHEN 11 THEN 1.8
                        WHEN 12 THEN 2.2
                        WHEN 13 THEN 3
                        WHEN 14 THEN 4.5
                        WHEN 15 THEN 6
                        WHEN 16 THEN 8
                        WHEN 17 THEN 10
                        ELSE 12
                      END)
                    ELSE
                      (CASE z(!scale_denominator!)
                        WHEN 13 THEN 2.2
                        WHEN 14 THEN 2.5
                        WHEN 15 THEN 3
                        WHEN 16 THEN 3.5
                        WHEN 17 THEN 4
                        ELSE 4.5
                      END)
                    END)*NULLIF(!scale_denominator!*0.001*0.28,0) AS contructed_width,
                    SUM(ST_Length(b.way)) AS mapped_width,
                    (CASE WHEN MIN(b.waterway) = 'lock_gate' THEN pi()/2.3 ELSE pi()/2 END) AS angle
                  FROM planet_osm_line b
                  JOIN planet_osm_line l ON ST_Intersects(b.way, l.way)
                  WHERE b.waterway IN ('dam', 'weir', 'lock_gate') AND (b.way && !bbox!)
                    AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                  GROUP BY ST_Intersection(b.way, l.way), l.way
                ) AS barriers
                ORDER BY osm_id, contructed_width DESC,
                  ST_LineLocatePoint(line, point) ASC -- this gives downstream waterways priority
            ) -- end barriers_grouped
            -- directly render the way if the mapped size is larger than the contrcted alternative (high zoom)
            SELECT
                barrier AS way,
                waterway,
                wtype,
                name
              FROM barriers_grouped WHERE contructed_width <= mapped_width
            UNION ALL
            -- render the barrier line contructed from intersection point (low zoom)
            SELECT
                ST_MakeLine(ARRAY[
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 900913), -angle, point),
                  point,
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 900913), angle, point)
                ]) AS way,
                waterway,
                wtype,
                name
              FROM barriers_grouped WHERE contructed_width > mapped_width
          ) AS blines
         UNION ALL
         -- Third query: barriers mapped using polygons not intersecting a waterway
         SELECT
            way,
            waterway,
            'polygon' AS wtype,
            name
          FROM planet_osm_polygon b
          WHERE waterway IN ('dam', 'weir', 'lock_gate') AND (b.way && !bbox!)
          AND NOT EXISTS
            (SELECT 1 FROM planet_osm_line l WHERE ST_Intersects(b.way, l.way)
              AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain'))
         UNION ALL
         -- Fourth query: barriers mapped using polygons intersecting a waterway
         SELECT
            way,
            waterway,
            wtype,
            name
          FROM
          (
            WITH barriers_grouped AS
            (SELECT DISTINCT ON (osm_id)
                osm_id,
                barrier,
                waterarea,
                ST_LineSubstring(
                  line,
                  GREATEST(0.0, ST_LineLocatePoint(line, point)-1.0/ST_Length(line)),
                  LEAST(1.0, ST_LineLocatePoint(line, point)+1.0/ST_Length(line))) AS line,
                line AS line_orig,
                point,
                waterway,
                wtype,
                name,
                contructed_width,
                -- ST_Length(ST_Intersection(ST_Boundary(barrier), waterarea)) AS linear_width,
                polygon_width,
                angle
              FROM
                (SELECT
                    MIN(b.osm_id) AS osm_id,
                    ST_Collect(b.way) AS barrier,
                    (SELECT
                        ST_Union(w.way)
                      FROM planet_osm_polygon w
                      WHERE
                        (w.waterway IN ('dock', 'riverbank')
                          OR w.landuse IN ('reservoir', 'basin')
                          OR w."natural" IN ('water', 'glacier'))
                        AND w.building IS NULL
                        AND ST_Intersects(w.way, ST_Collect(b.way))
                    ) AS waterarea,
                    l.way AS line,
                    (ST_Dump(ST_Intersection(ST_Boundary(b.way), l.way))).geom AS point,
                    MIN(b.waterway) AS waterway,
                    MIN(l.waterway) AS wtype,
                    MIN(b.name) AS name,
                    MAX(CASE WHEN l.waterway IN ('river', 'canal') THEN
                      (CASE z(!scale_denominator!)
                        WHEN 11 THEN 1.8
                        WHEN 12 THEN 2.2
                        WHEN 13 THEN 3
                        WHEN 14 THEN 4.5
                        WHEN 15 THEN 6
                        WHEN 16 THEN 8
                        WHEN 17 THEN 10
                        ELSE 12
                      END)
                    ELSE
                      (CASE z(!scale_denominator!)
                        WHEN 13 THEN 2.2
                        WHEN 14 THEN 2.5
                        WHEN 15 THEN 3
                        WHEN 16 THEN 3.5
                        WHEN 17 THEN 4
                        ELSE 4.5
                      END)
                    END)*NULLIF(!scale_denominator!*0.001*0.28,0) AS contructed_width,
                    MAX(ST_Length(ST_BoundingDiagonal(b.way))) AS polygon_width,
                    (CASE WHEN MIN(b.waterway) = 'lock_gate' THEN pi()/2.3 ELSE pi()/2 END) AS angle
                  FROM planet_osm_polygon b
                  JOIN planet_osm_line l ON ST_Intersects(ST_Boundary(b.way), l.way)
                  WHERE b.waterway IN ('dam') AND (b.way && !bbox!)
                    AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                  GROUP BY ST_Intersection(ST_Boundary(b.way), l.way), l.way
                ) AS barriers
                ORDER BY osm_id, contructed_width DESC,
                  ST_LineLocatePoint(line, point) ASC
            ) -- end barriers_grouped
            -- large enough polygon - render directly
            SELECT
                barrier AS way,
                waterway,
                'polygon' AS wtype,
                name
              FROM barriers_grouped
              WHERE polygon_width >= 2.5*contructed_width
            UNION ALL
            -- has intersecting water areas and medium size polygon - render linear representation
            (SELECT DISTINCT ON (osm_id)
                way,
                waterway,
                wtype,
                name
              FROM
                (SELECT
                    osm_id,
                    (ST_Dump(ST_CollectionExtract(ST_Intersection(way, line_orig), 1))).geom AS point,
                    line_orig,
                    way,
                    waterway,
                    wtype,
                    name
                  FROM
                    (SELECT
                        osm_id,
                        (ST_Dump(ST_CollectionExtract(ST_Intersection(ST_Boundary(barrier), waterarea), 2))).geom AS way,
                        line_orig,
                        waterway,
                        wtype,
                        name
                      FROM barriers_grouped
                      WHERE (waterarea IS NOT NULL AND polygon_width < 2.5*contructed_width AND polygon_width >= contructed_width)
                    ) AS bparts
                ) AS bparts2
              -- this selects the first part of the intersection between barrier polygon and water area
              -- in waterway direction
              ORDER BY osm_id, ST_LineLocatePoint(line_orig, point) ASC)
            UNION ALL
            -- no intersecting water areas and polygon medium or small - treat as node
            -- has intersecting water areas and polygon small - treat as node
            SELECT
                ST_MakeLine(ARRAY[
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 900913), -angle, point),
                  point,
                  ST_Rotate(
                    ST_SetSRID(ST_MakePoint(
                    ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                    ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
                  ), 900913), angle, point)
                ]) AS way,
                waterway,
                wtype,
                name
              FROM barriers_grouped
                WHERE (waterarea IS NULL AND polygon_width < 2.5*contructed_width)
                  OR (waterarea IS NOT NULL AND polygon_width < contructed_width)
          ) AS bpolys
         UNION ALL
         -- Fifth query: barriers mapped using nodes on a waterway
         SELECT
             ST_MakeLine(ARRAY[
               ST_Rotate(
                 ST_SetSRID(ST_MakePoint(
                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
               ), 900913), -angle, point),
               point,
               ST_Rotate(
                 ST_SetSRID(ST_MakePoint(
                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line),
                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*0.5/ST_Length(line)
               ), 900913), angle, point)
             ]) AS way,
             waterway,
             wtype,
             name
           FROM
             -- outer query: points with either nominal contructed waterway width or riverbank width
             (SELECT
                 point,
                 line,
                 waterway,
                 wtype,
                 name,
                 GREATEST(
                   contructed_width,
                   -- this selects only the center part of the multilinestring returned
                   -- by the inner select (in case of large and complex water polygons)
                   (SELECT
                       ST_Length(geom)
                     FROM
                       -- this selects the part of a line orthogonal to the waterway
                       -- ten times the nominal contructed waterway width that intersects
                       -- the water polygon intersecting the barrier point
                       (SELECT
                           (ST_Dump(ST_Intersection(
                             ST_Union(poly.way),
                             ST_MakeLine(ARRAY[
                               ST_Rotate(
                                 ST_SetSRID(ST_MakePoint(
                                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*5/ST_Length(line),
                                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*5/ST_Length(line)
                               ), 900913), -pi()/2, point),
                               ST_Rotate(
                                 ST_SetSRID(ST_MakePoint(
                                 ST_X(point)+(ST_X(ST_EndPoint(line))-ST_X(ST_StartPoint(line)))*contructed_width*5/ST_Length(line),
                                 ST_Y(point)+(ST_Y(ST_EndPoint(line))-ST_Y(ST_StartPoint(line)))*contructed_width*5/ST_Length(line)
                               ), 900913), pi()/2, point)
                             ])))).geom AS geom
                         FROM planet_osm_polygon poly
                         WHERE (waterway IN ('dock', 'riverbank') OR landuse IN ('reservoir', 'basin') OR "natural" IN ('water'))
                           AND ST_Intersects(poly.way, point) AND (poly.way && !bbox!)
                       ) AS line_segments
                     WHERE ST_DWithin(geom, point, 1) ORDER BY ST_Length(geom) DESC LIMIT 1
                   )
                 ) AS contructed_width,
                 angle
               FROM
                 -- inner query: points with nominal contructed waterway width
                 (SELECT DISTINCT ON (p.osm_id)
                     p.way AS point,
                     ST_LineSubstring(
                       l.way,
                       GREATEST(0.0, ST_LineLocatePoint(l.way, p.way)-1.0/ST_Length(l.way)),
                       LEAST(1.0, ST_LineLocatePoint(l.way, p.way)+1.0/ST_Length(l.way))) AS line,
                     p.waterway AS waterway,
                     l.waterway AS wtype,
                     p.name AS name,
                     (CASE WHEN l.waterway IN ('river', 'canal') THEN
                       (CASE z(!scale_denominator!)
                         WHEN 11 THEN 1.8
                         WHEN 12 THEN 2.2
                         WHEN 13 THEN 3
                         WHEN 14 THEN 4.5
                         WHEN 15 THEN 6
                         WHEN 16 THEN 8
                         WHEN 17 THEN 10
                         ELSE 12
                       END) + (CASE WHEN p.waterway =  'waterfall' THEN 2 ELSE 0 END)
                     ELSE
                       (CASE z(!scale_denominator!)
                         WHEN 13 THEN 2.2
                         WHEN 14 THEN 2.5
                         WHEN 15 THEN 3
                         WHEN 16 THEN 3.5
                         WHEN 17 THEN 4
                         ELSE 4.5
                       END) + (CASE WHEN p.waterway =  'waterfall' THEN 2 ELSE 0 END)
                     END)*NULLIF(!scale_denominator!*0.001*0.28,0) AS contructed_width,
                     (CASE WHEN p.waterway =  'lock_gate' THEN pi()/2.3 ELSE pi()/2 END) AS angle
                   FROM planet_osm_point p
                   JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 1)
                   WHERE p.waterway IN ('dam', 'weir', 'lock_gate', 'waterfall') AND (p.way && !bbox!)
                     AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
                   ORDER BY p.osm_id, contructed_width DESC,
                     ST_LineLocatePoint(l.way, p.way) ASC -- this gives downstream waterways priority
                 ) AS plines
             ) AS plines2
          WHERE line IS NOT NULL
        ) AS water_barriers_line
    properties:
      minzoom: 11
  - id: springs-connected
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
          ST_Difference(ST_Buffer(point, (0.5*width + 1.0*(CASE WHEN width > 4.2 THEN 1.5 ELSE 1 END))*NULLIF(!scale_denominator!*0.001*0.28,0)), ST_Buffer(line, 0.5*width*NULLIF(!scale_denominator!*0.001*0.28,0))) AS way
          FROM ( -- subselect to avoid duplicating the line width
            SELECT
              p.way AS point,
              l.way AS line,
              carto_waterway_line_width(l.waterway, z(!scale_denominator!)) + 1.5 AS width
            FROM planet_osm_point p
            JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 1)
            WHERE p.natural IN ('spring', 'hot_spring') AND (p.way && !bbox!)
              AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')
            ) AS features
        ) AS springs
    properties:
      minzoom: 14
  - id: piers-poly
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_polygon
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers_poly
    properties:
      minzoom: 12
  - id: piers-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, man_made
          FROM planet_osm_line
          WHERE man_made IN ('pier', 'breakwater', 'groyne')
        ) AS piers_line
    properties:
      minzoom: 12
  - id: bridge
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            man_made,
            name
          FROM planet_osm_polygon
          WHERE man_made = 'bridge'
        ) AS bridge
    properties:
      minzoom: 12
  - id: buildings
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            building
          FROM planet_osm_polygon
          WHERE building IS NOT NULL
            AND building != 'no'
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS buildings
    properties:
      minzoom: 13
  - id: tunnels
    class: tunnels-fill tunnels-casing access
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      # This query is quite large, having to deal with both roads, railways and
      # runways. To allow for ways that are both railways and roads, a UNION
      # ALL is present, and to use an ordering different than current osm2pgsql
      # an order is generated in SQL.
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-4, 5) = '_link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            'yes' AS int_tunnel,
            'no' AS int_bridge,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
                AND highway IS NOT NULL -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text 
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes')
                AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select
            ) AS features
          ORDER BY
            layernotnull,
            z_order,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS tunnels
    properties:
      group-by: layernotnull
      minzoom: 10
  - id: landuse-overlay
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            landuse,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE landuse = 'military'
            AND building IS NULL
        ) AS landuse_overlay
    properties:
      minzoom: 7
  - id: line-barriers
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, COALESCE(historic, barrier) AS feature
          FROM (
          -- line barriers without intersecting barrier=entrance nodes
          SELECT way,
            ('barrier_' || (CASE WHEN barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                  'handrail', 'hedge', 'retaining_wall', 'wall') THEN barrier ELSE NULL END)) AS barrier,
            ('historic_' || (CASE WHEN historic = 'citywalls' THEN historic ELSE NULL END)) AS historic
            FROM planet_osm_line l
            WHERE (barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                  'handrail', 'hedge', 'retaining_wall', 'wall')
              OR historic = 'citywalls')
              AND (waterway IS NULL OR waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi'))
              AND (l.way && !bbox!)
              AND NOT EXISTS
                (SELECT 1 FROM planet_osm_point e WHERE ST_Intersects(l.way, e.way)
                  AND e.barrier IN ('entrance'))
          UNION ALL
          -- barriers with entrance nodes cut out
          SELECT
            ST_Difference(
              l.way,
              ST_Union(ST_Buffer(
                e.way,
                (COALESCE(
                  (SELECT
                     carto_highway_line_width(
                       CASE WHEN highway = 'service' AND service IN ('parking_aisle', 'drive-through', 'driveway') 
                         THEN 'service-minor'
                         ELSE highway
                       END, z(!scale_denominator!))
                     FROM planet_osm_line h
                     WHERE ST_Intersects(h.way, e.way) AND highway IN 
                      ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 
                       'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service', 
                       'living_street', 'pedestrian', 'steps', 'road', 'bridleway', 'footway', 'cycleway', 'path', 'track')
                      ORDER BY carto_highway_line_width(
                        CASE WHEN highway = 'service' AND service IN ('parking_aisle', 'drive-through', 'driveway') 
                          THEN 'service-minor'
                          ELSE highway
                        END, z(!scale_denominator!)) DESC LIMIT 1
                  ),
                  carto_highway_line_width('footway', z(!scale_denominator!))
                ) + 2.5 + carto_barrier_line_width(
                      CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE l.barrier END,
                      z(!scale_denominator!)
                ))*0.5*NULLIF(!scale_denominator!*0.001*0.28,0)
              ))
            ) AS way,
            ('barrier_' || (CASE WHEN l.barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                  'handrail', 'hedge', 'retaining_wall', 'wall') THEN l.barrier ELSE NULL END)) AS barrier,
            ('historic_' || (CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE NULL END)) AS historic
            FROM planet_osm_point e
            JOIN planet_osm_line l ON ST_Intersects(l.way, e.way)
            WHERE e.barrier IN ('entrance')
              AND (e.way && ST_Expand(!bbox!, (0.5*(carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.0 +
                   carto_barrier_line_width(
                     CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE l.barrier END,
                     z(!scale_denominator!)
                   ))*NULLIF(!scale_denominator!*0.001*0.28,0))))
              AND (l.barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                  'handrail', 'hedge', 'retaining_wall', 'wall')
                OR l.historic = 'citywalls')
              AND (l.waterway IS NULL OR l.waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi'))
              GROUP BY l.way, l.barrier, l.historic
          ) AS features
        ) AS line_barriers
    properties:
      minzoom: 14
  - id: ferry-routes
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE route = 'ferry'
        ) AS ferry_routes
    properties:
      minzoom: 7
  - id: turning-circle-casing
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT DISTINCT ON (p.way)
            p.way AS way, l.highway AS int_tc_type,
            CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway')
              THEN 'INT-minor'::text
              ELSE 'INT-normal'::text
            END AS int_tc_service
          FROM planet_osm_point p
            JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 0.1) -- Assumes Mercator
            JOIN (VALUES
              ('tertiary', 1),
              ('unclassified', 2),
              ('residential', 3),
              ('living_street', 4),
              ('service', 5)
              ) AS v (highway, prio)
              ON v.highway=l.highway
          WHERE p.highway = 'turning_circle'
            OR p.highway = 'turning_loop'
          ORDER BY p.way, v.prio
        ) AS turning_circle_casing
    properties:
      minzoom: 15
  - id: highway-area-casing
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE((
              'highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'track', 'path', 'platform') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END))
            ) AS feature
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'track', 'path', 'platform')
            OR railway IN ('platform')
          ORDER BY COALESCE(layer,0), way_area DESC
        ) AS highway_area_casing
    properties:
      minzoom: 14
  - id: roads-casing
    class: roads-casing
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-4, 5) = '_link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND NOT(tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones')
                AND highway IS NOT NULL -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text 
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select
            ) AS features
          ORDER BY
            layernotnull,
            z_order,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS roads_casing
    properties:
      minzoom: 10
  - id: highway-area-fill
    # FIXME: No geometry?
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 
                                                    'track', 'path', 'platform', 'services') THEN highway ELSE NULL END)),
              ('railway_' || (CASE WHEN railway IN ('platform') THEN railway ELSE NULL END)),
              (('aeroway_' || CASE WHEN aeroway IN ('runway', 'taxiway', 'helipad') THEN aeroway ELSE NULL END))
            ) AS feature
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'living_street', 'track', 'path', 'platform', 'services')
            OR railway IN ('platform')
            OR aeroway IN ('runway', 'taxiway', 'helipad')
          ORDER BY COALESCE(layer,0), way_area desc
        ) AS highway_area_fill
    properties:
      minzoom: 14
  - id: roads-fill
    class: roads-fill access
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      # This is one of the most complex layers, so it bears explaining in some detail
      # It is necessary to
      # - Have roads and railways in the same layer to get ordering right
      # - Return two linestrings for ways which are both a road and railway
      # - Compute z_order here, rather than rely on osm2pgsql z_order
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-4, 5) = '_link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            'no' AS int_tunnel,
            'no' AS int_bridge,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- begin "features" subselect that contains both roads and rail/aero
            SELECT
                way,
                ('highway_' || highway) AS feature, -- only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') OR leisure IN ('slipway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND NOT(tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones')
                AND highway IS NOT NULL -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text 
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard'  
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                'null' AS surface, -- Should be a SQL NULL?
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE (tunnel IS NULL OR NOT tunnel IN ('yes', 'building_passage'))
                AND (covered IS NULL OR NOT covered = 'yes')
                AND (bridge IS NULL OR NOT bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct'))
                AND (railway IS NOT NULL OR aeroway IS NOT NULL) -- end of rail/aero select
            ) AS features
          ORDER BY
            layernotnull,
            z_order,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END
        ) AS roads_fill
    properties:
      minzoom: 10
  - id: turning-circle-fill
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            DISTINCT on (p.way)
            p.way AS way, l.highway AS int_tc_type,
            CASE WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
              ELSE 'INT-normal'::text END AS int_tc_service
          FROM planet_osm_point p
            JOIN planet_osm_line l
              ON ST_DWithin(p.way, l.way, 0.1)
            JOIN (VALUES
              ('tertiary', 1),
              ('unclassified', 2),
              ('residential', 3),
              ('living_street', 4),
              ('service', 5),
              ('track', 6)
            ) AS v (highway, prio)
              ON v.highway=l.highway
          WHERE p.highway = 'turning_circle' OR p.highway = 'turning_loop'
          ORDER BY p.way, v.prio
        ) AS turning_circle_fill
    properties:
      minzoom: 15
  - id: aerialways
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            aerialway
          FROM planet_osm_line
          WHERE aerialway IS NOT NULL
        ) AS aerialways
    properties:
      minzoom: 12
  - id: roads-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              ('highway_' || (CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway end)),
              ('railway_' || (CASE WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' 
                                   WHEN railway IN ('rail', 'tram', 'light_rail', 'funicular', 'narrow_gauge') THEN railway ELSE NULL END))
            ) AS feature,
            CASE WHEN tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes' THEN 'yes' ELSE 'no' END AS int_tunnel,
            CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes' ELSE 'no' END AS link,
            CASE WHEN bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct') THEN 'yes' ELSE 'no' END AS int_bridge,
            CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                  'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
              WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                  'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
              ELSE NULL
            END AS int_surface
          FROM planet_osm_roads
          WHERE highway IS NOT NULL
            OR (railway IS NOT NULL AND railway != 'preserved'
              AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard')))
          ORDER BY
            z_order
        ) AS roads_low_zoom
    properties:
      minzoom: 5
      maxzoom: 9
  - id: waterway-bridges
    class: water-lines
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            name,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel,
            'yes' AS bridge
          FROM planet_osm_line
          WHERE waterway IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi')
            AND bridge IN ('yes', 'aqueduct')
          ORDER BY COALESCE(layer,0)
        ) AS waterway_bridges
    properties:
      minzoom: 12
  - id: bridges
    class: bridges-fill bridges-casing access
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            (CASE WHEN substr(feature, length(feature)-4, 5) = '_link' THEN substr(feature, 0, length(feature)-4) ELSE feature END) AS feature,
            horse,
            foot,
            bicycle,
            tracktype,
            int_surface,
            'no' AS int_tunnel,
            CASE
              WHEN pass = 'yes' OR pass = 'stepping_stones' THEN 'ford'
              WHEN pass = 'ford_node' THEN 'ford_node'
              WHEN pass = 'mountain_pass' THEN 'mountain_pass'
              ELSE 'yes'
            END AS int_bridge,
            access,
            construction,
            service,
            link,
            layernotnull
          FROM ( -- subselect that contains roads, rail/aero and node based fords
            SELECT
                way,
                ('highway_' || highway) AS feature, --only motorway to tertiary links are accepted later on
                horse,
                foot,
                bicycle,
                tracktype,
                tags->'ford' AS pass,
                CASE WHEN surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                      'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                  WHEN surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                      'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                  ELSE NULL
                END AS int_surface,
                CASE WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE
                  WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                  ELSE 'INT-normal'::text
                END AS service,
                CASE
                  WHEN substr(highway, length(highway)-4, 5) = '_link' THEN 'yes'
                  ELSE 'no'
                END AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE
                (bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
                  OR tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones')
                AND highway IS NOT NULL
                AND way && !bbox! -- end of road select
            UNION ALL
            SELECT
                way,
                COALESCE(
                  ('railway_' || (CASE WHEN railway = 'preserved' AND service IN ('spur', 'siding', 'yard') THEN 'INT-preserved-ssy'::text 
                                       WHEN (railway = 'rail' AND service IN ('spur', 'siding', 'yard')) THEN 'INT-spur-siding-yard' 
                                       WHEN (railway = 'tram' AND service IN ('spur', 'siding', 'yard')) THEN 'tram-service' ELSE railway END)),
                  ('aeroway_' || aeroway)
                ) AS feature,
                horse,
                foot,
                bicycle,
                tracktype,
                NULL AS pass,
                'null',
                CASE
                  WHEN access IN ('destination') THEN 'destination'::text
                  WHEN access IN ('no', 'private') THEN 'no'::text
                  ELSE NULL
                END AS access,
                construction,
                CASE WHEN service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text ELSE 'INT-normal'::text END AS service,
                'no' AS link,
                COALESCE(layer,0) AS layernotnull,
                z_order
              FROM planet_osm_line
              WHERE bridge IN ('yes', 'boardwalk', 'cantilever', 'covered', 'low_water_crossing', 'movable', 'trestle', 'viaduct')
                AND (railway IS NOT NULL OR aeroway IS NOT NULL)
                AND way && !bbox! -- end of rail/aero select
            UNION ALL
            SELECT
                ST_LineSubstring(way, GREATEST(0, position-length*0.5*pass_length), LEAST(1, position+length*0.5*pass_length)) AS way,
                feature,
                horse,
                foot,
                bicycle,
                tracktype,
                pass,
                int_surface,
                access,
                construction,
                service,
                link,
                layernotnull,
                z_order
                FROM
                  (SELECT
                      l.way AS way, -- this is the highway intersecting the ford node
                      ST_LineLocatePoint(l.way, p.way) AS position, -- this is the position along the way
                      NULLIF(!scale_denominator!*0.001*0.28,0)/ST_Length(l.way) AS length, -- this is the pixel size as a fraction of the way length
                      ('highway_' || l.highway) AS feature,
                      l.horse AS horse,
                      l.foot AS foot,
                      l.bicycle AS bicycle,
                      l.tracktype AS tracktype,
                      CASE WHEN (p.tags @> 'mountain_pass=>yes') THEN 'mountain_pass' ELSE 'ford_node' END AS pass,
                      CASE WHEN (p.tags @> 'mountain_pass=>yes') THEN GREATEST(7, carto_highway_line_width(
                        CASE WHEN l.highway = 'service' AND l.service IN ('parking_aisle', 'drive-through', 'driveway') 
                          THEN 'service-minor'
                          ELSE l.highway
                        END, z(!scale_denominator!))) ELSE 5 END AS pass_length,
                      CASE WHEN l.surface IN ('unpaved', 'compacted', 'dirt', 'earth', 'fine_gravel', 'grass', 'grass_paver', 'gravel', 'ground',
                                            'mud', 'pebblestone', 'salt', 'sand', 'woodchips', 'clay') THEN 'unpaved'
                        WHEN l.surface IN ('paved', 'asphalt', 'cobblestone', 'cobblestone:flattened', 'sett', 'concrete', 'concrete:lanes',
                                            'concrete:plates', 'paving_stones', 'metal', 'wood') THEN 'paved'
                        ELSE NULL
                      END AS int_surface,
                      CASE WHEN l.access IN ('destination') THEN 'destination'::text
                        WHEN l.access IN ('no', 'private') THEN 'no'::text
                        ELSE NULL
                      END AS access,
                      l.construction AS construction,
                      CASE
                        WHEN l.service IN ('parking_aisle', 'drive-through', 'driveway') THEN 'INT-minor'::text
                        ELSE 'INT-normal'::text
                      END AS service,
                      CASE
                        WHEN substr(l.highway, length(l.highway)-4, 5) = '_link' THEN 'yes'
                        ELSE 'no'
                      END AS link,
                      COALESCE(l.layer,0) AS layernotnull,
                      l.z_order AS z_order
                    FROM planet_osm_point p
                      JOIN planet_osm_line l ON ST_DWithin(p.way, l.way, 1) -- Assumes Mercator
                    WHERE (p.tags @> 'ford=>yes' OR p.tags @> 'ford=>stepping_stones' OR p.tags @> 'mountain_pass=>yes')
                      AND l.highway IS NOT NULL
                      AND p.way && !bbox! -- end of ford point pseudo-line select
                  ) AS fords
            ) AS features
          ORDER BY
            layernotnull,
            z_order,
            CASE WHEN access IN ('no', 'private') THEN 0 WHEN access IN ('destination') THEN 1 ELSE 2 END,
            CASE WHEN int_surface IN ('unpaved') THEN 0 ELSE 2 END,
            CASE WHEN pass = 'yes' OR pass = 'stepping_stones' THEN 3 WHEN pass = 'ford_node' OR pass = 'mountain_pass' THEN 2 ELSE 1 END
        ) AS bridges
    properties:
      group-by: layernotnull
      minzoom: 10
  - id: guideways
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE highway = 'bus_guideway'
        ) AS guideways
    properties:
      minzoom: 13
  - id: golf-lines
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, geo, golf, ref, name
          FROM
            (SELECT
                way, tags->'golf' AS golf, name, ref, 0 AS prio, 'polygon' AS geo
              FROM planet_osm_polygon
              WHERE (tags->'golf') IS NOT NULL AND way && !bbox!
            UNION ALL
            SELECT
                p.way, p.tags->'golf' AS golf, p.name, coalesce(p.ref,l.ref) AS ref, 0 AS prio, 'point' AS geo
              FROM planet_osm_point p LEFT JOIN planet_osm_line l ON (ST_Intersects(p.way, l.way) AND (l.tags->'golf') IS NOT NULL)
              WHERE p.tags ? 'golf' AND p.way && !bbox!
            UNION ALL
            SELECT
                way, tags->'golf' AS golf, name, ref, 1 AS prio, 'line' AS geo
              FROM planet_osm_line WHERE (tags->'golf') IS NOT NULL AND way && !bbox!
            ) AS golf
          ORDER BY prio
        ) AS golf_lines
    properties:
      minzoom: 16
  - id: necountries
    geometry: linestring
    <<: *extents84
    Datasource:
      file: data/ne_110m_admin_0_boundary_lines_land/ne_110m_admin_0_boundary_lines_land.shp
      type: shape
    properties:
      minzoom: 1
      maxzoom: 3
  - id: admin-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level,
            tags->'maritime' as maritime
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4')
            AND (osm_id < 0 OR (osm_id > 0 AND tags @> 'maritime=>yes'))
          ORDER BY admin_level DESC,
            CASE
              WHEN tags @> 'maritime=>yes' THEN 1
              ELSE 0
            END ASC
        ) AS admin_low_zoom
    properties:
      minzoom: 4
      maxzoom: 10
  - id: admin-mid-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level,
            tags->'maritime' as maritime
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8')
            AND (osm_id < 0 OR (osm_id > 0 AND tags @> 'maritime=>yes'))
          ORDER BY admin_level DESC,
            CASE
              WHEN tags @> 'maritime=>yes' THEN 1
              ELSE 0
            END ASC
        ) AS admin_mid_zoom
    properties:
      minzoom: 11
      maxzoom: 12
  - id: admin-high-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            admin_level,
            tags->'maritime' as maritime
          FROM planet_osm_roads
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
            AND (osm_id < 0 OR (osm_id > 0 AND tags @> 'maritime=>yes'))
          ORDER BY admin_level::integer DESC, -- With 10 as a valid value, we need to do a numeric ordering, not a text ordering
            CASE
              WHEN tags @> 'maritime=>yes' THEN 1
              ELSE 0
            END ASC
        ) AS admin_high_zoom
    properties:
      minzoom: 13
  - id: power-minorline
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE power = 'minor_line'
        ) AS power_minorline
    properties:
      minzoom: 16
  - id: power-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE power = 'line'
        ) AS power_line
    properties:
      minzoom: 14
  - id: tourism-boundary
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            name,
            tourism
          FROM planet_osm_polygon
          WHERE tourism = 'theme_park'
            OR tourism = 'zoo'
        ) AS tourism_boundary
    properties:
      minzoom: 10
  - id: trees
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way, "natural"
          FROM planet_osm_point
          WHERE "natural" = 'tree'
        UNION ALL
        SELECT
            way, "natural"
          FROM planet_osm_line
          WHERE "natural" = 'tree_row'
        ) AS trees
    properties:
      minzoom: 16
  - id: country-names
    class: country
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            name
          FROM planet_osm_polygon
          WHERE boundary = 'administrative'
            AND admin_level = '2'
            AND name IS NOT NULL
            AND way_area > 100*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area DESC
        ) AS country_names
    properties:
      minzoom: 2
  - id: capital-names
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            CASE
              WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER ELSE 0
            END as population,
            round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
          FROM planet_osm_point
          WHERE place IN ('city', 'town', 'village', 'hamlet')
            AND name IS NOT NULL
            AND tags @> 'capital=>yes'
          ORDER BY population DESC
        ) AS capital_names
    properties:
      minzoom: 3
      maxzoom: 15
  - id: state-names
    class: state
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            name,
            ref
          FROM planet_osm_polygon
          WHERE boundary = 'administrative'
            AND admin_level = '4'
            AND name IS NOT NULL
            AND way_area > 100*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area DESC
        ) AS state_names
    properties:
      minzoom: 4
  - id: placenames-medium
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            score,
            CASE
              WHEN (place = 'city') THEN 1
              ELSE 2
            END as category,
            round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
          FROM 
            (SELECT
                osm_id,
                way,
                place,
                name,
                (
                  (CASE
                    WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER
                    WHEN (place = 'city') THEN 100000
                    WHEN (place = 'town') THEN 1000
                    ELSE 1
                  END)
                  *
                  (CASE
                    WHEN (tags @> 'capital=>4') THEN 2
                    ELSE 1
                  END)
                ) AS score
              FROM planet_osm_point
              WHERE place IN ('city', 'town')
                AND name IS NOT NULL
                AND NOT (tags @> 'capital=>yes')
            ) as p
          ORDER BY score DESC, length(name) DESC, name
        ) AS placenames_medium
    properties:
      minzoom: 4
      maxzoom: 15
  - id: placenames-small
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            place,
            name
          FROM planet_osm_point
          WHERE place IN ('village', 'hamlet')
             AND name IS NOT NULL
             AND NOT tags @> 'capital=>yes'
             OR place IN ('suburb', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm')
             AND name IS NOT NULL
          ORDER BY CASE
              WHEN place = 'suburb' THEN 3
              WHEN place = 'village' THEN 4
              WHEN place = 'hamlet' THEN 5
              WHEN place = 'neighbourhood' THEN 6
              WHEN place = 'locality' THEN 7
              WHEN place = 'isolated_dwelling' THEN 8
              WHEN place = 'farm' THEN 9
            END ASC, length(name) DESC, name
        ) AS placenames_small
    properties:
      minzoom: 12
  - id: stations
    class: stations
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            ref,
            railway,
            aerialway,
            CASE railway 
              WHEN 'station' THEN 1 
              WHEN 'subway_entrance' THEN 3
              ELSE 2
            END
              AS prio
          FROM planet_osm_point
          WHERE railway IN ('station', 'halt', 'tram_stop', 'subway_entrance')
            OR aerialway = 'station'
          ORDER BY prio
        ) AS stations
    properties:
      minzoom: 12
  - id: stations-poly
    class: stations
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            ref,
            railway,
            aerialway
        FROM planet_osm_polygon
        WHERE railway IN ('station', 'halt', 'tram_stop')
          OR aerialway = 'station'
        ) AS stations_poly
    properties:
      minzoom: 12
  - id: line-barrier-entrances
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      geometry_table: planet_osm_point
      table: |-
        (SELECT way, COALESCE(historic, barrier) AS feature FROM
          (WITH entrance_lines AS
            (SELECT
              ST_Intersection(
                l.way,
                ST_Buffer(
                  e.way,
                  (COALESCE(
                    (SELECT
                       carto_highway_line_width(
                         CASE WHEN highway = 'service' AND service IN ('parking_aisle', 'drive-through', 'driveway') 
                           THEN 'service-minor'
                           ELSE highway
                         END, z(!scale_denominator!))
                       FROM planet_osm_line h 
                       WHERE ST_Intersects(h.way, e.way) AND highway IN 
                        ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 
                         'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service', 
                         'living_street', 'pedestrian', 'steps', 'road', 'bridleway', 'footway', 'cycleway', 'path', 'track')
                        ORDER BY carto_highway_line_width(
                          CASE WHEN highway = 'service' AND service IN ('parking_aisle', 'drive-through', 'driveway') 
                            THEN 'service-minor'
                            ELSE highway
                          END, z(!scale_denominator!)) DESC LIMIT 1
                    ),
                    carto_highway_line_width('footway', z(!scale_denominator!))
                  ) + 2.5 + carto_barrier_line_width(
                        CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE l.barrier END,
                        z(!scale_denominator!)
                  ))*0.5*NULLIF(!scale_denominator!*0.001*0.28,0)
                )
              ) AS way,
              ('barrier_' || (CASE WHEN l.barrier IN ('chain', 'city_wall', 'ditch', 'fence', 'guard_rail',
                    'handrail', 'hedge', 'retaining_wall', 'wall') THEN l.barrier ELSE NULL END)) AS barrier,
              ('historic_' || (CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE NULL END)) AS historic
              FROM planet_osm_point e
              JOIN planet_osm_line l ON ST_Intersects(l.way, e.way)
              WHERE e.barrier IN ('entrance')
                AND (e.way && ST_Expand(!bbox!, (0.5*(carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.0 +
                     carto_barrier_line_width(
                       CASE WHEN l.historic = 'citywalls' THEN l.historic ELSE l.barrier END,
                       z(!scale_denominator!)
                     ))*NULLIF(!scale_denominator!*0.001*0.28,0))))
                AND (l.barrier IN ('chain', 'city_wall', 'embankment', 'ditch', 'fence', 'guard_rail',
                    'handrail', 'hedge', 'retaining_wall', 'wall')
                  OR l.historic = 'citywalls')
                AND (l.waterway IS NULL OR l.waterway NOT IN ('river', 'canal', 'derelict_canal', 'stream', 'drain', 'ditch', 'wadi'))
                GROUP BY e.way, l.way, l.barrier, l.historic)
           SELECT
               ST_StartPoint(way) AS way,
               historic, barrier
             FROM entrance_lines
           UNION ALL
           SELECT
               ST_EndPoint(way) AS way,
               historic, barrier
             FROM entrance_lines
          ) AS lbe
        ) AS line_barrier_entrances
    properties:
      minzoom: 14
  - id: amenity-points-poly
    class: points
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            COALESCE(
              'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment',
                                                  'hostel', 'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('spring', 'hot_spring', 'geyser') THEN "natural" ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('water_well') THEN man_made ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bbq', 'bicycle_rental', 'bus_station', 'cafe', 'public_bath',
                                                  'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',
                                                  'fuel', 'hospital', 'ice_cream', 'library', 'courthouse', 'townhall', 'parking',
                                                  'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship',
                                                  'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court',
                                                  'fast_food', 'telephone', 'taxi', 'theatre', 'toilets', 'drinking_water',
                                                  'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                  'charging_station', 'arts_centre', 'ferry_terminal', 'marketplace', 'waste_disposal', 'shower', 'bbq',
                                                  'nursing_home', 'childcare', 'driving_school') THEN amenity ELSE NULL END,
              'diplomatic_'|| CASE WHEN tags->'office' IN ('diplomatic') AND tags->'diplomatic' IN ('embassy', 'consulate') THEN tags->'diplomatic' ELSE NULL END,
              'advertising_' || CASE WHEN tags->'advertising' in ('column') THEN tags->'advertising' else NULL END,
              'shop' || CASE WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE '' END,
              'office' || CASE WHEN tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty') OR (tags->'office') IS NULL THEN NULL ELSE '' END,
              'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table',
                                                  'fitness_centre', 'fitness_station', 'firepit', 'sauna', 'beach_resort') THEN leisure ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                             THEN concat_ws('_', historic, CASE WHEN tags->'memorial' IN ('plaque') THEN tags->'memorial' ELSE NULL END)
                             ELSE NULL END,
              'military_'|| CASE WHEN military IN ('bunker') THEN military ELSE NULL END,
              'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
              'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END
            ) AS feature,
            access,
            religion,
            tags->'denomination' as denomination,
            tags->'generator:source' as "generator:source",
            CASE
              WHEN man_made IN ('mast', 'tower') THEN
                CASE
                  WHEN tags->'height' ~ '^-?\d{1,4}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                  ELSE NULL
                END
              ELSE NULL
            END AS height,
            tags->'power_source' as power_source,
            tags->'icao' as icao,
            tags->'iata' as iata,
            tags->'office' as office,
            tags->'recycling_type' as recycling_type,
            tags->'tower:construction' as "tower:construction",
            tags->'tower:type' as "tower:type",
            tags->'castle_type' as castle_type,
            tags->'information' as information,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN amenity = 'drinking_water' OR (tags->'drinking_water') = 'yes' THEN 'yes' ELSE NULL END AS drinking_water,
            CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'bed', 'books', 'butcher', 'clothes', 'computer',
                               'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist',
                               'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet',
                               'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk',
                               'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery',
                               'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery',
                               'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor',
                               'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee', 'tyres', 'pastry', 'chocolate',
                               'music', 'medical_supply', 'dairy', 'video_games') THEN shop
                               ELSE 'other' END AS shop,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE aeroway IN ('helipad', 'aerodrome')
            OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel',
                           'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')
            OR amenity IS NOT NULL -- skip checking a huge list and use a null check
            OR tags->'advertising' IN ('column')
            OR shop IS NOT NULL
            OR (tags->'office') IS NOT NULL
            OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'fitness_centre',
                           'fitness_station', 'firepit', 'sauna', 'beach_resort')
            OR man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'obelisk', 'water_well')
            OR "natural" IN ('spring', 'hot_spring', 'geyser')
            OR historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
            OR tags->'memorial' IN ('plaque')
            OR military IN ('bunker')
            OR highway IN ('bus_stop', 'elevator', 'traffic_signals')
            OR (power = 'generator' AND (tags @> '"generator:source"=>wind' OR tags @> 'power_source=>wind'))
          ORDER BY way_area desc
        ) AS amenity_points_poly
    properties:
      minzoom: 10
  - id: amenity-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
          way,
          'leisure_' || CASE WHEN leisure IN ('slipway') THEN leisure ELSE NULL END AS feature
          FROM planet_osm_line
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE leisure IN ('slipway')
        ) AS amenity_line
    properties:
      minzoom: 16
  - id: amenity-points
    class: points
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            COALESCE(
              'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel',
                                                  'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('spring', 'hot_spring', 'geyser') THEN
                (CASE WHEN EXISTS (SELECT 1 FROM planet_osm_line l WHERE ST_DWithin(p.way, l.way, 1) AND l.waterway IN ('river', 'canal', 'stream', 'ditch', 'drain')) THEN "natural" || '_connected' ELSE "natural" END)
                ELSE NULL
              END,
              'man_made_' || CASE WHEN man_made IN ('water_well', 'water_tap') THEN man_made ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bbq', 'bicycle_rental', 'bus_station', 'cafe', 'public_bath',
                                                  'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',
                                                  'fuel', 'hospital', 'ice_cream', 'library', 'courthouse', 'townhall', 'parking',
                                                  'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship',
                                                  'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court',
                                                  'fast_food', 'telephone', 'taxi', 'theatre', 'toilets', 'drinking_water', 'water_point',
                                                  'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                  'charging_station', 'arts_centre', 'ferry_terminal', 'marketplace', 'shower', 'bbq',
                                                  'nursing_home', 'childcare', 'driving_school') THEN amenity ELSE NULL END,
              'diplomatic_'|| CASE WHEN tags->'office' IN ('diplomatic') AND tags->'diplomatic' IN ('embassy', 'consulate') THEN tags->'diplomatic' ELSE NULL END,
              'advertising_' || CASE WHEN tags->'advertising' in ('column') THEN tags->'advertising' else NULL END,
              'emergency_' || CASE WHEN tags->'emergency' IN ('phone') THEN tags->'emergency' ELSE NULL END,
              'shop' || CASE WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE '' END,
              'office' || CASE WHEN tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty') OR (tags->'office') IS NULL THEN NULL ELSE '' END,
              'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',
                                                  'dog_park', 'fitness_centre', 'fitness_station', 'firepit', 'sauna', 'beach_resort') THEN leisure ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('peak', 'volcano', 'saddle', 'cave_entrance') THEN "natural" ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                             THEN concat_ws('_', historic, CASE WHEN tags->'memorial' IN ('plaque') THEN tags->'memorial' ELSE NULL END)
                             ELSE NULL END,
              'military_'|| CASE WHEN military IN ('bunker') THEN military ELSE NULL END,
              'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway
                                WHEN tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones' THEN 'ford' ELSE NULL END,
              'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END,
              'barrier_' || CASE WHEN barrier IN ('toll_booth') THEN barrier ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('wayside_cross', 'wayside_shrine') THEN historic ELSE NULL END
            ) AS feature,
            access,
            CASE
              WHEN "natural" IN ('peak', 'volcano', 'saddle') THEN
                CASE
                  WHEN tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN (tags->'ele')::NUMERIC
                  ELSE NULL
                END
              ELSE NULL
            END AS score,
            religion,
            tags->'denomination' as denomination,
            tags->'generator:source' as "generator:source",
            CASE
              WHEN man_made IN ('mast', 'tower') THEN
                CASE
                  WHEN tags->'height' ~ '^\d{1,3}(\.\d+)?( m)?$' THEN (SUBSTRING(tags->'height', '^(\d{1,3}(\.\d+)?)( m)?$'))::NUMERIC
                  ELSE NULL
                END
              ELSE NULL
            END AS height,
            tags->'power_source' as power_source,
            tags->'icao' as icao,
            tags->'iata' as iata,
            tags->'office' as office,
            tags->'recycling_type' as recycling_type,
            tags->'tower:construction' as "tower:construction",
            tags->'tower:type' as "tower:type",
            tags->'castle_type' as castle_type,
            tags->'information' as information,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN amenity = 'drinking_water' OR (tags->'drinking_water') = 'yes' THEN 'yes' ELSE NULL END AS drinking_water,
            CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'bed', 'books', 'butcher', 'clothes', 'computer',
                               'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist',
                               'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet',
                               'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk',
                               'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery',
                               'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery',
                               'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor',
                               'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee', 'tyres', 'pastry', 'chocolate',
                               'music', 'medical_supply', 'dairy', 'video_games') THEN shop
                               ELSE 'other' END AS shop,
            NULL AS way_pixels
          FROM planet_osm_point p
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE aeroway IN ('helipad', 'aerodrome')
            OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'hostel',
                           'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')
            OR amenity IS NOT NULL -- skip checking a huge list and use a null check
            OR shop IS NOT NULL
            OR tags->'advertising' IN ('column')
            OR (tags->'office') IS NOT NULL
            OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',
                           'dog_park', 'fitness_centre', 'fitness_station', 'firepit', 'sauna', 'beach_resort')
            OR barrier IN ('toll_booth')
            OR man_made IN ('mast', 'tower', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk', 'water_well', 'water_tap')
            OR "natural" IN ('peak', 'volcano', 'spring', 'hot_spring', 'geyser', 'cave_entrance')
            OR ("natural" = 'saddle' AND NOT(tags @> 'mountain_pass=>yes'))
            OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross', 'fort', 'wayside_shrine', 'castle', 'manor', 'city_gate')
            OR tags->'memorial' IN ('plaque')
            OR military IN ('bunker')
            OR tags @> 'emergency=>phone'
            OR highway IN ('bus_stop', 'elevator', 'traffic_signals')
            OR tags @> 'ford=>yes' OR tags @> 'ford=>stepping_stones'
            OR (power = 'generator' AND (tags @> '"generator:source"=>wind' OR tags @> 'power_source=>wind'))
          ORDER BY score DESC NULLS LAST
          ) AS amenity_points
    properties:
      minzoom: 10
  - id: power-towers
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE power = 'tower'
        ) AS power_towers
    properties:
      minzoom: 14
  - id: power-poles
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE power = 'pole'
        ) AS power_poles
    properties:
      minzoom: 16
  - id: roads-text-ref-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            height,
            width,
            refs
          FROM (
            SELECT
                way,
                osm_id,
                highway,
                array_length(refs,1) AS height,
                (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
                array_to_string(refs, E'\n') AS refs
              FROM (
                SELECT
                    way,
                    osm_id,
                    highway,
                    string_to_array(ref, ';') AS refs
                FROM planet_osm_roads
                  WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary')
                  AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 11
          ORDER BY
            CASE
              WHEN highway = 'motorway' THEN 38
              WHEN highway = 'trunk' THEN 37
              WHEN highway = 'primary' THEN 36
              WHEN highway = 'secondary' THEN 35
              WHEN highway = 'tertiary' THEN 34
              WHEN highway = 'unclassified' THEN 33
              WHEN highway = 'residential' THEN 32
              WHEN highway = 'runway' THEN 6
              WHEN highway = 'taxiway' THEN 5
              ELSE NULL
            END DESC NULLS LAST,
            height DESC,
            width DESC,
            refs,
            osm_id
        ) AS roads_text_ref_low_zoom
    properties:
      minzoom: 10
      maxzoom: 12
  - id: junctions
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            junction,
            ref,
            name
          FROM planet_osm_point
          WHERE highway = 'motorway_junction' OR highway = 'traffic_signals' OR junction = 'yes'
        ) AS junctions
    properties:
      minzoom: 11
  - id: bridge-text
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            man_made,
            name
          FROM planet_osm_polygon
          WHERE man_made = 'bridge'
          ORDER BY way_area DESC
        ) AS bridge_text
    properties:
      minzoom: 11
  - id: roads-text-ref
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            height,
            width,
            refs
          FROM (
            SELECT
                osm_id,
                way,
                highway,
                array_length(refs,1) AS height,
                (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
                array_to_string(refs, E'\n') AS refs
              FROM (
                SELECT
                    osm_id,
                    way,
                    COALESCE(
                      CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') THEN highway ELSE NULL END,
                      CASE WHEN aeroway IN ('runway', 'taxiway') THEN aeroway ELSE NULL END
                    ) AS highway,
                    string_to_array(ref, ';') AS refs
                  FROM planet_osm_line
                  WHERE (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') OR aeroway IN ('runway', 'taxiway'))
                    AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 11
          ORDER BY
            CASE
              WHEN highway = 'motorway' THEN 38
              WHEN highway = 'trunk' THEN 37
              WHEN highway = 'primary' THEN 36
              WHEN highway = 'secondary' THEN 35
              WHEN highway = 'tertiary' THEN 34
              WHEN highway = 'unclassified' THEN 33
              WHEN highway = 'residential' THEN 32
              WHEN highway = 'runway' THEN 6
              WHEN highway = 'taxiway' THEN 5
              ELSE NULL
            END DESC NULLS LAST,
            height DESC,
            width DESC,
            refs,
            osm_id
        ) AS roads_text_ref
    properties:
      minzoom: 13
  - id: roads-area-text-name
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
            highway,
            name
          FROM planet_osm_polygon
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 'track', 'path', 'platform')
            OR railway IN ('platform')
            AND name IS NOT NULL
          ORDER BY way_area DESC
        ) AS roads_area_text_name
    properties:
      minzoom: 15
  - id: roads-text-name
    class: directions
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway END,
            CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,
            construction,
            name,
            CASE
              WHEN oneway IN ('yes', '-1') THEN oneway
              WHEN junction IN ('roundabout') AND (oneway IS NULL OR NOT oneway IN ('no', 'reversible')) THEN 'yes'
              ELSE NULL
            END AS oneway,
            horse, bicycle
          FROM planet_osm_line l
          JOIN (VALUES -- this join is also putting a condition on what is selected. features not matching it do not make it into the results.
              ('motorway', 380),
              ('trunk', 370),
              ('primary', 360),
              ('secondary', 350),
              ('tertiary', 340),
              ('residential', 330),
              ('unclassified', 330),
              ('road', 330),
              ('living_street', 320),
              ('pedestrian', 310),
              ('raceway', 300),
              ('motorway_link', 240),
              ('trunk_link', 230),
              ('primary_link', 220),
              ('secondary_link', 210),
              ('tertiary_link', 200),
              ('service', 150),
              ('construction', 10)
            ) AS ordertable (highway, prio)
            USING (highway)
          WHERE highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary', 
                            'tertiary_link', 'residential', 'unclassified', 'road', 'service', 'pedestrian', 'raceway', 'living_street', 'construction')
            AND (name IS NOT NULL
              OR oneway IN ('yes', '-1')
              OR junction IN ('roundabout'))
          ORDER BY
            z_order DESC, -- put important roads first
            COALESCE(layer, 0), -- put top layered roads first
            length(name) DESC, -- Try to fit big labels in first
            name DESC, -- Force a consistent ordering between differently named streets
            l.osm_id DESC -- Force an ordering for streets of the same name, e.g. dualized roads
        ) AS roads_text_name
    properties:
      minzoom: 13
  - id: paths-text-name
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            name
          FROM planet_osm_line
          WHERE highway IN ('bridleway', 'footway', 'cycleway', 'path', 'track', 'steps')
            AND name IS NOT NULL
        ) AS paths_text_name
    properties:
      minzoom: 15
  - id: text-poly-low-zoom
    class: text-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_pixels,
            feature,
            name,
            is_building
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                COALESCE(
                  'landuse_' || CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END,
                  'natural_' || CASE WHEN "natural" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock') THEN "natural" ELSE NULL END,
                  'place_' || CASE WHEN place IN ('island') THEN place ELSE NULL END
                ) AS feature,
                name,
                'no' AS is_building
              FROM planet_osm_polygon
              WHERE (landuse IN ('forest', 'military')
                  OR "natural" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock')
                  OR "place" IN ('island'))
                AND building IS NULL
                AND name IS NOT NULL
             UNION ALL
             SELECT
                ST_ClosestPoint(oway,ST_PointOnSurface(way)),
                ST_Area(ST_Envelope(oway))/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                'place_archipelago' AS feature,
                name,
                'no' AS is_building
             FROM
               (SELECT
                  (ST_Dump(
                    -- this detects multipolygons extending over the 180 degree meridian to split them
                    CASE WHEN (ST_XMax(way)-ST_XMin(way)) < 20037508 THEN
                      ST_ConvexHull(way)
                    ELSE
                      -- splits the polygon into the two hemisphere parts
                      ST_Collect(
                        ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((-20037508 -20037508, -20037508 20037508, 0 20037508, 0 -20037508, -20037508 -20037508))'), 900913))),
                        ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((0 -20037508, 0 20037508, 20037508 20037508, 20037508 -20037508, 0 -20037508))'), 900913)))
                      )
                    END
                  )).geom AS way,
                  way AS oway,
                  name
                FROM planet_osm_polygon
                WHERE "place" IN ('archipelago')
                  AND building IS NULL
                  AND name IS NOT NULL
              ) AS archipelagos
            ) AS labels
          ORDER BY way_pixels DESC
        ) AS text_poly_low_zoom
    properties:
      minzoom: 4
      maxzoom: 9
  - id: text-poly
    class: text
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      # Include values that are rendered as icon without label to prevent mismatch between icons and labels,
      # see https://github.com/gravitystorm/openstreetmap-carto/pull/1349#issuecomment-77805678
      table: |-
        (SELECT
            way,
            way_pixels,
            feature,
            access,
            name,
            operator,
            icao,
            iata,
            office,
            recycling_type,
            castle_type,
            information,
            ref,
            way_area,
            is_building
          FROM
            (SELECT
                way,
                way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                COALESCE(
                  'aeroway_' || CASE WHEN aeroway IN ('gate', 'apron', 'helipad', 'aerodrome') THEN aeroway ELSE NULL END,
                  'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'camp_site', 'caravan_site',
                                                      'theme_park', 'museum', 'zoo', 'information', 'picnic_site') THEN tourism ELSE NULL END,
                  'natural_' || CASE WHEN "natural" IN ('spring', 'hot_spring', 'geyser') THEN "natural" ELSE NULL END,
                  'man_made_' || CASE WHEN man_made IN ('water_well') THEN man_made ELSE NULL END,
                  'amenity_' || CASE WHEN amenity IN ('pub', 'restaurant', 'food_court', 'cafe', 'fast_food', 'biergarten', 'bar', 'library', 'public_bath',
                                                      'theatre', 'courthouse', 'townhall', 'cinema', 'clinic', 'community_centre', 'parking',
                                                      'bicycle_parking', 'motorcycle_parking', 'police', 'fire_station', 'fountain', 'place_of_worship',
                                                      'grave_yard', 'shelter', 'bank', 'fuel', 'bus_station', 'prison', 'university',
                                                      'school', 'college', 'kindergarten', 'hospital', 'ice_cream', 'pharmacy', 'doctors', 'dentist',
                                                      'atm', 'bicycle_rental', 'car_rental', 'car_wash', 'post_box', 'post_office',
                                                      'recycling', 'telephone', 'toilets', 'taxi', 'drinking_water', 'hunting_stand',
                                                      'nightclub', 'veterinary', 'social_facility', 'charging_station', 'arts_centre',
                                                      'ferry_terminal', 'marketplace', 'shower', 'bbq', 'nursing_home', 'childcare', 'driving_school') THEN amenity ELSE NULL END,
                  'diplomatic_'|| CASE WHEN tags->'office' IN ('diplomatic') AND tags->'diplomatic' IN ('embassy', 'consulate') THEN tags->'diplomatic' ELSE NULL END,
                  'advertising_' || CASE WHEN tags->'advertising' in ('column') THEN tags->'advertising' else NULL END,
                  'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'bed', 'books', 'butcher', 'clothes', 'computer', 'confectionery',
                                                'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre',
                                                'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio',
                                                'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle',
                                                'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys',
                                                'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages',
                                                'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', 'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea',
                                                'coffee', 'tyres', 'pastry', 'chocolate', 'music', 'medical_supply', 'dairy', 'video_games') THEN shop
                                  WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE 'other' END,
                  'office' || CASE WHEN tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty') OR (tags->'office') IS NULL THEN NULL ELSE '' END,
                  'leisure_' || CASE WHEN leisure IN ('swimming_pool', 'water_park', 'miniature_golf', 'golf_course', 'fitness_centre', 'sports_centre', 'stadium', 'track',
                                                      'pitch', 'playground', 'park', 'recreation_ground', 'common', 'garden', 'marina',
                                                      'picnic_table', 'dog_park', 'fitness_station', 'firepit', 'sauna', 'beach_resort') THEN leisure ELSE NULL END,
                  'power_' || CASE WHEN power IN ('plant', 'station', 'generator', 'sub_station', 'substation') THEN power ELSE NULL END,
                  'landuse_' || CASE WHEN landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery',
                                                      'residential', 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farmland',
                                                      'greenhouse_horticulture', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill',
                                                      'construction', 'military', 'plant_nursery', 'religious') THEN landuse ELSE NULL END,
                  'man_made_' || CASE WHEN man_made IN ('lighthouse', 'windmill', 'mast', 'tower', 'water_tower', 'pier', 'breakwater', 'groyne', 'obelisk', 'works') THEN man_made ELSE NULL END,
                  'natural_' || CASE WHEN "natural" IN ('wood', 'water', 'mud', 'wetland', 'bay', 'scree', 'shingle', 'bare_rock', 'sand', 'heath',
                                                        'grassland', 'scrub', 'beach', 'shoal', 'reef', 'glacier') THEN "natural" ELSE NULL END,
                  'place_' || CASE WHEN place IN ('island', 'islet') THEN place ELSE NULL END,
                  'military_' || CASE WHEN military IN ('danger_area', 'bunker') THEN military ELSE NULL END,
                  'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                                 THEN concat_ws('_', historic, CASE WHEN tags->'memorial' IN ('plaque') THEN tags->'memorial' ELSE NULL END)
                                 ELSE NULL END,
                  'highway_' || CASE WHEN highway IN ('services', 'rest_area', 'bus_stop', 'elevator') THEN highway ELSE NULL END,
                  'waterway_' || CASE WHEN waterway IN ('dam', 'dock') THEN waterway ELSE NULL END,
                  'tourism_' || CASE WHEN tourism IN ('viewpoint', 'attraction') THEN tourism ELSE NULL END
                ) AS feature,
                access,
                CONCAT(
                    name,
                    CASE
                      WHEN (tourism = 'alpine_hut' OR amenity = 'shelter') AND tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN
                        CONCAT(E'\n', REPLACE(ROUND((tags->'ele')::NUMERIC)::TEXT, '-', U&'\2212'), U&'\00A0', 'm')
                      ELSE
                        NULL
                    END
                ) AS name,
                tags->'operator' as operator,
                tags->'icao' as icao,
                tags->'iata' as iata,
                tags->'office' as office,
                tags->'recycling_type' as recycling_type,
                tags->'castle_type' as castle_type,
                tags->'information' as information,
                ref,
                way_area,
                CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building
              FROM planet_osm_polygon
              -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
              WHERE (aeroway IN ('gate', 'apron', 'helipad', 'aerodrome')
                  OR tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'camp_site', 'caravan_site', 'theme_park',
                                 'museum', 'viewpoint', 'attraction', 'zoo', 'information', 'picnic_site')
                  OR amenity IS NOT NULL -- skip checking a huge list and use a null check
                  OR tags->'advertising' IN ('column')
                  OR shop IS NOT NULL
                  OR (tags->'office') IS NOT NULL
                  OR leisure IS NOT NULL
                  OR landuse IS NOT NULL
                  OR man_made IN ('lighthouse', 'windmill', 'mast', 'tower', 'water_tower', 'pier', 'breakwater', 'groyne', 'obelisk', 'water_well', 'works')
                  OR "natural" IS NOT NULL
                  OR place IN ('island', 'islet')
                  OR military IN ('danger_area', 'bunker')
                  OR historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                  OR tags->'memorial' IN ('plaque')
                  OR highway IN ('services', 'rest_area', 'bus_stop', 'elevator')
                  OR power IN ('plant', 'station', 'generator', 'sub_station', 'substation')
                  OR boundary IN ('national_park')
                  OR waterway IN ('dam', 'dock'))
                AND (name IS NOT NULL
                     OR (ref IS NOT NULL AND aeroway IN ('gate'))
                    )
             UNION ALL
             SELECT
                ST_ClosestPoint(oway,ST_PointOnSurface(way)),
                ST_Area(ST_Envelope(oway))/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels,
                'place_archipelago' AS feature,
                NULL AS access,
                name,
                NULL AS operator,
                NULL AS icao,
                NULL AS iata,
                NULL AS office,
                NULL AS recycling_type,
                NULL AS castle_type,
                NULL AS information,
                NULL AS ref,
                NULL AS way_area,
                'no' AS is_building
             FROM
               (SELECT
                  (ST_Dump(
                    -- this detects multipolygons extending over the 180 degree meridian to split them
                    CASE WHEN (ST_XMax(way)-ST_XMin(way)) < 20037508 THEN
                      ST_ConvexHull(way)
                    ELSE
                      -- splits the polygon into the two hemisphere parts
                      ST_Collect(
                        ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((-20037508 -20037508, -20037508 20037508, 0 20037508, 0 -20037508, -20037508 -20037508))'), 900913))),
                        ST_ConvexHull(ST_Intersection(way, ST_SetSRID(ST_GeomFromText('POLYGON((0 -20037508, 0 20037508, 20037508 20037508, 20037508 -20037508, 0 -20037508))'), 900913)))
                      )
                    END
                  )).geom AS way,
                  way AS oway,
                  name
                FROM planet_osm_polygon
                WHERE "place" IN ('archipelago')
                  AND building IS NULL
                  AND name IS NOT NULL
              ) AS archipelagos
            ) AS labels
          ORDER BY way_pixels DESC
        ) AS text_poly
    properties:
      minzoom: 10
  - id: text-line
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
          way,
            NULL as way_pixels,
            COALESCE('man_made_' || man_made, 'waterway_' || waterway, 'natural_' || "natural") AS feature,
            access,
            name,
            tags->'operator' as operator,
            ref,
            NULL AS way_area,
            CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building
          FROM planet_osm_line
          WHERE (man_made IN ('pier', 'breakwater', 'groyne', 'embankment')
              OR waterway IN ('dam', 'weir', 'lock_gate')
              OR "natural" IN ('cliff', 'earth_bank'))
            AND name IS NOT NULL
        ) AS text_line
    properties:
      minzoom: 10
  - id: text-point
    class: text
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      # Include values that are rendered as icon without label to prevent mismatch between icons and labels,
      # see https://github.com/gravitystorm/openstreetmap-carto/pull/1349#issuecomment-77805678
      table: |-
        (SELECT
            way,
            way_pixels,
            feature,
            access,
            CONCAT(
                name,
                CASE WHEN name IS NOT NULL AND elevation IS NOT NULL THEN E'\n' ELSE NULL END,
                CASE WHEN elevation IS NOT NULL THEN CONCAT(REPLACE(ROUND(elevation)::TEXT, '-', U&'\2212'), U&'\00A0', 'm') ELSE NULL END
            ) AS name,
            CASE
              WHEN "natural" IN ('peak', 'volcano', 'saddle') OR (mountain_pass = 'yes') THEN elevation
              ELSE NULL
            END AS score,
            operator,
            icao,
            iata,
            office,
            recycling_type,
            castle_type,
            information,
            ref,
            way_area,
            is_building
          FROM
            (SELECT
                way,
                NULL AS way_pixels,
                COALESCE(
                  'aeroway_' || CASE WHEN aeroway IN ('gate', 'apron', 'helipad', 'aerodrome') THEN aeroway ELSE NULL END,
                  'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'camp_site', 'caravan_site',
                                                      'theme_park', 'museum', 'zoo', 'information', 'picnic_site') THEN tourism ELSE NULL END,
                  'natural_' || CASE WHEN "natural" IN ('spring', 'hot_spring', 'geyser') THEN "natural" ELSE NULL END,
                  'man_made_' || CASE WHEN man_made IN ('water_well', 'water_tap') THEN man_made ELSE NULL END,
                  'amenity_' || CASE WHEN amenity IN ('pub', 'restaurant', 'food_court', 'cafe', 'fast_food', 'biergarten', 'bar', 'library', 'theatre',
                                                      'courthouse', 'townhall', 'cinema', 'clinic', 'community_centre', 'parking', 'bicycle_parking', 'public_bath',
                                                      'motorcycle_parking', 'police', 'fire_station', 'fountain', 'place_of_worship', 'grave_yard', 'shelter', 'bank',
                                                      'fuel', 'bus_station', 'prison', 'university', 'school', 'college', 'kindergarten', 'hospital',
                                                      'ice_cream', 'pharmacy', 'doctors', 'dentist', 'atm', 'bicycle_rental', 'car_rental',
                                                      'car_wash', 'post_box', 'post_office', 'recycling', 'telephone', 'toilets', 'taxi',
                                                      'drinking_water', 'water_point', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                      'charging_station', 'arts_centre', 'ferry_terminal', 'marketplace', 'shower', 'bbq',
                                                      'nursing_home', 'childcare', 'driving_school') THEN amenity ELSE NULL END,
                  'diplomatic_'|| CASE WHEN tags->'office' IN ('diplomatic') AND tags->'diplomatic' IN ('embassy', 'consulate') THEN tags->'diplomatic' ELSE NULL END,
                  'advertising_' || CASE WHEN tags->'advertising' in ('column') THEN tags->'advertising' else NULL END,
                  'shop_' || CASE WHEN shop IN ('supermarket', 'bag','bakery', 'beauty', 'bed', 'books', 'butcher', 'clothes', 'computer', 'confectionery', 'fashion',
                                                'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre', 'hairdresser',
                                                'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio', 'photography',
                                                'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle', 'musical_instrument',
                                                'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts',
                                                'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics',
                                                'variety_store', 'wine', 'outdoor', 'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea', 'coffee', 'tyres',
                                                'pastry', 'chocolate', 'music', 'medical_supply','dairy', 'video_games') THEN shop
                                  WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE 'other' END,
                  'office' || CASE WHEN tags->'office' IN ('no', 'vacant', 'closed', 'disused', 'empty') OR (tags->'office') IS NULL THEN NULL ELSE '' END,
                  'leisure_' || CASE WHEN leisure IN ('swimming_pool', 'water_park', 'miniature_golf', 'golf_course', 'fitness_centre', 'sports_centre', 'stadium', 'track',
                                                      'pitch','playground', 'park', 'recreation_ground', 'common', 'garden', 'marina',
                                                      'slipway', 'picnic_table', 'dog_park', 'fitness_station', 'firepit', 'sauna', 'beach_resort') THEN leisure ELSE NULL END,
                  'power_' || CASE WHEN power IN ('plant', 'station', 'generator', 'sub_station', 'substation') THEN power ELSE NULL END,
                  'landuse_' || CASE WHEN landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery',
                                                      'residential', 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farmland',
                                                      'greenhouse_horticulture', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill',
                                                      'construction', 'military', 'plant_nursery') THEN landuse ELSE NULL END,
                  'man_made_' || CASE WHEN man_made IN ('lighthouse', 'windmill', 'mast', 'tower', 'water_tower', 'obelisk', 'works') THEN man_made ELSE NULL END,
                  CASE WHEN (tags @> 'mountain_pass=>yes') THEN 'mountain_pass' ELSE NULL END, -- before saddle since this has precedence in case of double tagging
                  'natural_' || CASE WHEN "natural" IN ('wood', 'peak', 'volcano', 'saddle', 'cave_entrance', 'water', 'mud', 'wetland', 'bay',
                                                        'scree', 'shingle', 'bare_rock', 'sand', 'heath', 'grassland', 'scrub', 'beach', 'glacier', 'tree')
                                                        THEN "natural" ELSE NULL END,
                  'place_' || CASE WHEN place IN ('island', 'islet') THEN place ELSE NULL END,
                  'barrier_' || CASE WHEN barrier IN ('toll_booth') THEN barrier ELSE NULL END,
                  'military_' || CASE WHEN military IN ('danger_area', 'bunker') THEN military ELSE NULL END,
                  'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site', 'fort', 'castle', 'manor', 'city_gate')
                                 THEN concat_ws('_', historic, CASE WHEN tags->'memorial' IN ('plaque') THEN tags->'memorial' ELSE NULL END)
                                 ELSE NULL END,
                  'highway_' || CASE WHEN highway IN ('services', 'rest_area', 'bus_stop', 'elevator') THEN highway ELSE NULL END,
                  'waterway_' || CASE WHEN waterway IN ('dam', 'weir', 'lock_gate', 'dock', 'waterfall') THEN waterway ELSE NULL END,
                  'tourism_' || CASE WHEN tourism IN ('viewpoint', 'attraction') THEN tourism ELSE NULL END,
                  'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
                  'historic_' || CASE WHEN historic IN ('wayside_cross', 'wayside_shrine') THEN historic ELSE NULL END
                ) AS feature,
                access,
                name,
                CASE
                  WHEN "natural" IN ('peak', 'volcano', 'saddle') OR (tags @> 'mountain_pass=>yes')
                    OR tourism = 'alpine_hut' OR (tourism = 'information' AND tags->'information' = 'guidepost')
                    OR amenity = 'shelter' THEN
                    CASE
                      WHEN tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN (tags->'ele')::NUMERIC
                      ELSE NULL
                    END
                  ELSE NULL
                END AS elevation,
                "natural",
                tags->'operator' as operator,
                tags->'icao' as icao,
                tags->'iata' as iata,
                tags->'office' as office,
                tags->'recycling_type' as recycling_type,
                tags->'castle_type' as castle_type,
                tags->'information' as information,
                tags->'mountain_pass' as mountain_pass,
                ref,
                NULL AS way_area,
                CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building
              FROM planet_osm_point
              -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
              WHERE (aeroway IN ('gate', 'apron', 'helipad', 'aerodrome')
                  OR tourism IN ('artwork', 'alpine_hut', 'hotel', 'motel', 'hostel', 'chalet', 'wilderness_hut', 'guest_house', 'apartment', 'camp_site', 'caravan_site', 'theme_park',
                                 'museum', 'viewpoint', 'attraction', 'zoo', 'information', 'picnic_site')
                  OR amenity IS NOT NULL -- skip checking a huge list and use a null check
                  OR tags->'advertising' IN ('column')
                  OR shop IS NOT NULL
                  OR (tags->'office') IS NOT NULL
                  OR leisure IS NOT NULL
                  OR landuse IN ('reservoir', 'basin', 'recreation_ground', 'village_green', 'quarry', 'vineyard', 'orchard', 'cemetery', 'residential',
                                 'garages', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farmland', 'greenhouse_horticulture',
                                 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill', 'construction', 'military', 'plant_nursery')
                  OR man_made IN ('lighthouse', 'windmill', 'mast', 'tower', 'water_tower', 'cross', 'obelisk', 'water_well', 'water_tap', 'works')
                  OR "natural" IS NOT NULL
                  OR tags @> 'mountain_pass=>yes'
                  OR place IN ('island', 'islet')
                  OR barrier IN ('toll_booth')
                  OR military IN ('danger_area', 'bunker')
                  OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross', 'fort', 'wayside_shrine', 'castle', 'manor', 'city_gate')
                  OR tags->'memorial' IN ('plaque')
                  OR highway IN ('bus_stop', 'services', 'rest_area', 'elevator')
                  OR power IN ('plant', 'station', 'generator', 'sub_station', 'substation')
                  OR boundary IN ('national_park')
                  OR waterway IN ('dam', 'weir', 'dock', 'waterfall'))
                AND (name IS NOT NULL
                     OR (tags?'ele' AND ("natural" IN ('peak', 'volcano', 'saddle')
                         OR tourism = 'alpine_hut'
                         OR (tourism = 'information' AND tags->'information' = 'guidepost')
                         OR amenity = 'shelter'))
                     OR (ref IS NOT NULL AND aeroway IN ('gate'))
                    )
              ) AS p
          ORDER BY score DESC NULLS LAST
          ) AS text
    properties:
      minzoom: 10
  - id: building-text
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            name,
            way,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE building IS NOT NULL
            AND building NOT IN ('no')
            AND name IS NOT NULL
          ORDER BY way_area DESC
        ) AS building_text
    properties:
      minzoom: 14
  - id: interpolation
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_line
          WHERE "addr:interpolation" IS NOT NULL
        ) AS interpolation
    properties:
      minzoom: 17
  - id: addresses
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            "addr:housenumber" AS addr_housenumber,
            "addr:housename" AS addr_housename,
            tags->'addr:unit' AS addr_unit,
            way_area/NULLIF(POW(!scale_denominator!*0.001*0.28,2),0) AS way_pixels
          FROM planet_osm_polygon
          WHERE (("addr:housenumber" IS NOT NULL) OR ("addr:housename" IS NOT NULL) OR ((tags->'addr:unit') IS NOT NULL))
            AND building IS NOT NULL
        UNION ALL
        SELECT
            way,
            "addr:housenumber" AS addr_housenumber,
            "addr:housename" AS addr_housename,
            tags->'addr:unit' AS addr_unit,
            NULL AS way_pixels
          FROM planet_osm_point
          WHERE ("addr:housenumber" IS NOT NULL) OR ("addr:housename" IS NOT NULL) OR ((tags->'addr:unit') IS NOT NULL)
          ORDER BY way_pixels DESC NULLS LAST
        ) AS addresses
    properties:
      minzoom: 17
  - id: water-lines-text
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            waterway,
            lock,
            name,
            tags->'intermittent' as intermittent,
            tags->'seasonal' as seasonal,
            CASE WHEN tunnel IN ('yes', 'culvert') THEN 'yes' ELSE 'no' END AS int_tunnel
          FROM planet_osm_line
          WHERE waterway IN ('river', 'canal', 'stream', 'drain', 'ditch', 'wadi')
            AND (tunnel IS NULL or tunnel != 'culvert')
            AND name IS NOT NULL
          ORDER BY COALESCE(layer,0)
        ) AS water_lines_text
    properties:
      minzoom: 13
  - id: ferry-routes-text
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name
          FROM planet_osm_line
          WHERE route = 'ferry'
            AND name IS NOT NULL
        ) AS ferry_routes_text
    properties:
      minzoom: 13
  - id: admin-text
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            name,
            admin_level
          FROM planet_osm_polygon
          WHERE boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
            AND name IS NOT NULL
          ORDER BY admin_level::integer ASC, way_area DESC
        ) AS admin_text
    properties:
      minzoom: 16
  - id: amenity-low-priority
    class: amenity-low-priority
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'highway_' || CASE WHEN highway IN ('mini_roundabout') THEN highway ELSE NULL END,
              'railway_' || CASE WHEN railway IN ('level_crossing', 'crossing') THEN railway ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench',
                            'waste_basket', 'waste_disposal') THEN amenity ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('wayside_cross', 'wayside_shrine') THEN historic ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
              'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log') THEN barrier ELSE NULL END
            )  AS feature,
            access,
            CASE WHEN amenity IN ('waste_basket', 'waste_disposal') THEN 2 ELSE 1 END AS prio
          FROM planet_osm_point p
          WHERE highway IN ('mini_roundabout')
             OR railway IN ('level_crossing', 'crossing')
             OR amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking', 'bench', 'waste_basket', 'waste_disposal')
             OR historic IN ('wayside_cross', 'wayside_shrine')
             OR man_made IN ('cross')
             OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log')
          ORDER BY prio
          ) AS amenity_low_priority
    properties:
      minzoom: 14
  - id: amenity-low-priority-poly
    class: amenity-low-priority
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'amenity_' || CASE WHEN amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking') THEN amenity ELSE NULL END,
              'barrier_' || CASE WHEN barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log') THEN barrier ELSE NULL END
            )  AS feature,
            access
          FROM planet_osm_polygon p
          WHERE amenity IN ('parking', 'bicycle_parking', 'motorcycle_parking')
             OR barrier IN ('bollard', 'gate', 'lift_gate', 'swing_gate', 'block', 'log')
          ) AS amenity_low_priority_poly
    properties:
      minzoom: 14
