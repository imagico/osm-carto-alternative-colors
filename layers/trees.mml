# ---------------------------------------------------------------------------
#  trees.mml
#
#  ac-style trees layer (fairly expensive)
#
#  to be processed with assemble_project.py
#
#  Copyright 2012-2023 by OSM-Carto contributors
#  Copyright 2017-2023 by Christoph Hormann <chris_hormann@gmx.de>
# ---------------------------------------------------------------------------
#  This file is part of the OSM-Carto alternative colors map style.
#
#  OSM-Carto alternative colors is an open design and free software project
#  You can use, modify and/or redistribute it under the terms of the
#  following licenses:
#
#  Design components of the project are subject to the Creative Commons
#  Attribution ShareAlike 4.0 (CC BY-SA 4.0) License.
#
#  Software components of the project are subject to the GNU Affero General
#  Public License published by the Free Software Foundation, either
#  version 3 of the License, or (at your option) any later version.
#
#  OSM-Carto alternative colors is distributed in the hope that it will be
#  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
#  General Public License and the Creative Commons Attribution ShareAlike
#  4.0 (CC BY-SA 4.0) License for more details.
#
#  You should have received a copy of the Creative Commons Attribution
#  ShareAlike 4.0 (CC BY-SA 4.0) License along with OSM-Carto alternative
#  colors. If not, see
#  <https://creativecommons.org/licenses/by-sa/4.0/legalcode>.
#
#  You should have also received a copy of the GNU Affero General Public
#  License. If not, see <https://www.gnu.org/licenses/>.
# ---------------------------------------------------------------------------
  - id: trees
    geometry: polygon
    <<: *extents
    Datasource:
      geometry_table: planet_osm_point
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            type
          FROM
            (WITH tree_points AS
              (SELECT
                  CASE WHEN ((width_px % 2) = 0) THEN
                    ST_SnapToGrid(
                      way,
                      NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                  ELSE
                    ST_SnapToGrid(
                      way,
                      0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                      NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                  END AS point,
                  (SELECT
                      COALESCE(
                        ST_Union(
                          CASE WHEN t2.leaf_type IN ('palm') THEN
                            ST_Buffer(
                              ST_Translate(
                                carto_symbol_from_db(
                                  'tree',
                                  t2.width_px*NULLIF(!scale_denominator!*0.001*0.28,0),
                                  t2.width_px,
                                  t2.leaf_type,
                                  t2.leaf_cycle
                                ),
                                ST_X(t2.way),
                                ST_Y(t2.way)
                              ),
                              (CASE WHEN width_px > 30 THEN 1.6 WHEN width_px < 15 THEN 1.0 ELSE 1.0 + 0.6*(width_px-15)/15.0 END)*NULLIF(!scale_denominator!*0.001*0.28,0)
                            )
                          ELSE
                            St_Buffer(t2.way, (t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)*0.5)
                          END
                        ),
                        ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                      )
                    FROM
                      (SELECT
                          CASE WHEN ((width_px % 2) = 0) THEN
                            ST_SnapToGrid(
                              way,
                              NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                          ELSE
                            ST_SnapToGrid(
                              way,
                              0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                              NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                          END AS way,
                          height,
                          hash,
                          width_px,
                          leaf_type,
                          leaf_cycle
                        FROM
                          (SELECT
                              way,
                              CASE
                                WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                                ELSE 0.0
                              END AS height,
                              osm_id AS hash,
                              GREATEST(
                                carto_barrier_line_width("natural", z(!scale_denominator!)),
                                -- we round the mapped width to integer pixels to possibly get a pixel aligned symbol
                                -- and cap it at 60 pixel to avoid blowing up existing symbols too much
                                LEAST(carto_tree_diameter_mapped(
                                  "natural",
                                  (CASE WHEN "natural" = 'shrub' THEN tags->'width' ELSE tags->'diameter_crown' END),
                                  tags->'height',
                                  tags->'circumference',
                                  tags->'diameter',
                                  !bbox!,
                                  !scale_denominator!), 60)
                              ) AS width_px,
                              carto_leaf_type_classify(tags->'leaf_type', tags->'species', tags->'genus', tags->'family', tags->'taxon', NULL) AS leaf_type,
                              tags->'leaf_cycle' AS leaf_cycle
                            FROM planet_osm_point
                            WHERE "natural" IN ('tree', 'shrub')
                              -- this search radius expansion is based on the upper bound for practical width_px 
                              -- considering there are very few trees with more than 50m crown diameter in reality
                              AND way && ST_Expand(
                                t1.way,
                                0.5*(t1.width_px+GREATEST(t1.width_px,
                                  LEAST(carto_tree_diameter_mapped('tree', '50', NULL, NULL, NULL, !bbox!, !scale_denominator!), 60))+2.0)*
                                  NULLIF(!scale_denominator!*0.001*0.28,0))
                          ) AS _
                      ) AS t2
                    WHERE ((t2.height > t1.height) OR ((t2.height = t1.height) AND (t2.width_px > t1.width_px)) OR ((t2.height = t1.height) AND (t2.width_px = t1.width_px) AND (t2.hash > t1.hash)))
                      AND ST_DWithin(t2.way, t1.way, 0.5*(t1.width_px+t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      AND t2.width_px >= 5
                      AND t1.width_px >= 5
                  ) AS others,
                  carto_leaf_type_classify(leaf_type, species, genus, family, taxon, NULL) AS leaf_type,
                  leaf_cycle,
                  width_px,
                  width_px*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                FROM
                  (SELECT
                      way,
                      CASE
                        WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                        ELSE 0.0
                      END AS height,
                      osm_id AS hash,
                      tags->'leaf_type' AS leaf_type,
                      tags->'leaf_cycle' AS leaf_cycle,
                      tags->'taxon' AS taxon,
                      COALESCE(tags->'family', tags->'taxon:family') AS family,
                      COALESCE(tags->'genus', tags->'taxon:genus') AS genus,
                      COALESCE(tags->'species', tags->'taxon:species') AS species,
                      GREATEST(
                        carto_barrier_line_width("natural", z(!scale_denominator!)),
                        -- we round the mapped width to integer pixels to possibly get a pixel aligned symbol
                        -- and cap it at 60 pixel to avoid blowing up existing symbols too much
                        LEAST(carto_tree_diameter_mapped(
                          "natural",
                          (CASE WHEN "natural" = 'shrub' THEN tags->'width' ELSE tags->'diameter_crown' END),
                          tags->'height',
                          tags->'circumference',
                          tags->'diameter',
                          !bbox!,
                          !scale_denominator!), 60)
                      ) AS width_px
                    FROM planet_osm_point
                    WHERE "natural" IN ('tree', 'shrub') AND way && !bbox!) AS t1
              ),
            tree_rows AS
              (SELECT
                -- this cuts out barrier=entrance nodes - in a width reflecting whatever highway=* intersects
                (ST_Dump(ST_CollectionExtract(ST_Difference(
                  way,
                  COALESCE(
                    (SELECT
                        ST_Union(ST_Buffer(way, width))
                      FROM
                        (SELECT
                            e.way AS way,
                            (COALESCE(
                              (SELECT
                                  GREATEST(
                                    carto_highway_line_width(h.highway, h.service, z(!scale_denominator!)),
                                    carto_highway_line_width_mapped(h.highway, h.tags->'width', h.tags->'lanes', !bbox!, !scale_denominator!))
                                FROM planet_osm_line h
                                WHERE ST_Intersects(h.way, e.way) AND h.highway IN
                                  ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary',
                                   'secondary_link', 'tertiary', 'tertiary_link', 'residential', 'unclassified', 'service',
                                   'living_street', 'pedestrian', 'steps', 'road', 'bridleway', 'footway', 'cycleway', 'path', 'track',
                                   'busway', 'bus_guideway')
                                ORDER BY carto_highway_line_width(h.highway, h.service, z(!scale_denominator!)) DESC LIMIT 1
                              ),
                              carto_highway_line_width('footway', z(!scale_denominator!))
                            ) + 2.5 + l.width_px)*0.5*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                          FROM planet_osm_point e
                          WHERE ST_Intersects(l.way, e.way)
                            AND e.barrier IN ('entrance')
                        ) AS entrances
                      WHERE (way && ST_Expand(!bbox!, (0.5*
                              (carto_highway_line_width('motorway', z(!scale_denominator!)) + 2.0 + l.width_px)*
                              NULLIF(!scale_denominator!*0.001*0.28,0)))
                            )
                    ),
                    ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                  )
                ), 2))).geom AS way,
                feature,
                length,
                height,
                leaf_type,
                leaf_cycle,
                taxon,
                family,
                genus,
                species,
                width_px,
                width
              FROM
                (SELECT
                    way,
                    feature,
                    length,
                    height,
                    leaf_type,
                    leaf_cycle,
                    taxon,
                    family,
                    genus,
                    species,
                    width_px,
                    width_px*NULLIF(!scale_denominator!*0.001*0.28,0) AS width
                  FROM
                    (SELECT
                        way,
                        COALESCE("natural", barrier) AS feature,
                        ST_Length(way)*(CASE WHEN "natural" = 'tree_row' THEN 1000 ELSE 1.0 END) AS length,
                        CASE
                          WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                          ELSE 0.0
                        END AS height,
                        tags->'leaf_type' AS leaf_type,
                        tags->'leaf_cycle' AS leaf_cycle,
                        tags->'taxon' AS taxon,
                        COALESCE(tags->'family', tags->'taxon:family') AS family,
                        COALESCE(tags->'genus', tags->'taxon:genus') AS genus,
                        COALESCE(tags->'species', tags->'taxon:species') AS species,
                        GREATEST(
                          carto_barrier_line_width(COALESCE("natural", barrier), z(!scale_denominator!)),
                          -- we do not round the mapped width here because tree row symbols are not pixel aligned
                          -- we cap it at 60 pixel to avoid blowing up existing symbols too much
                          LEAST(carto_treerow_line_width_mapped(COALESCE("natural", barrier), tags->'width', tags->'height', !bbox!, !scale_denominator!), 60)
                        ) AS width_px
                      FROM planet_osm_line
                      WHERE ("natural" = 'tree_row' OR barrier = 'hedge') AND way && !bbox!
                    ) AS _
                ) AS l
              ),
            row_trees_raw AS
              (SELECT
                  way,
                  others
                FROM
                  (SELECT
                      point,
                      ST_Translate(
                        carto_symbol_from_db(
                          'tree',
                          width,
                          width_px,
                          leaf_type,
                          leaf_cycle
                        ),
                        ST_X(point),
                        ST_Y(point)
                      ) AS way,
                      COALESCE(
                        ST_Union(
                          St_Difference(
                            St_Buffer(prev_next, width*0.5),
                            COALESCE(
                              St_ConvexHull(
                                St_Collect(
                                  St_Intersection(
                                    ST_Boundary(
                                      St_Buffer(prev_next, width*0.5)
                                    ),
                                    ST_Boundary(
                                      St_Buffer(point, width*0.5)
                                    )
                                  ),
                                  St_Buffer(point, width*0.25)
                                )
                              ),
                              ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                            )
                          ),
                          (SELECT
                              COALESCE(
                                ST_Union(way),
                                ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                              )
                            FROM
                              -- these are other single trees
                              (SELECT
                                  St_Buffer(way, (width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)*0.5) AS way
                                FROM
                                  (SELECT
                                      CASE WHEN ((width_px % 2) = 0) THEN
                                        ST_SnapToGrid(
                                          way,
                                          NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                                      ELSE
                                        ST_SnapToGrid(
                                          way,
                                          0.5*NULLIF(!scale_denominator!*0.001*0.28,0), 0.5*NULLIF(!scale_denominator!*0.001*0.28,0),
                                          NULLIF(!scale_denominator!*0.001*0.28,0), NULLIF(!scale_denominator!*0.001*0.28,0))
                                      END AS way,
                                      width_px
                                    FROM
                                      (SELECT
                                          way,
                                          GREATEST(
                                            carto_barrier_line_width("natural", z(!scale_denominator!)),
                                            -- we round the mapped width to integer pixels to possibly get a pixel aligned symbol
                                            -- and cap it at 60 pixel to avoid blowing up existing symbols too much
                                            LEAST(carto_tree_diameter_mapped(
                                              "natural",
                                              (CASE WHEN "natural" = 'shrub' THEN tags->'width' ELSE tags->'diameter_crown' END),
                                              tags->'height',
                                              tags->'circumference',
                                              tags->'diameter',
                                              !bbox!,
                                              !scale_denominator!), 60)
                                          ) AS width_px
                                        FROM planet_osm_point
                                        WHERE "natural" IN ('tree', 'shrub')
                                          -- this search radius expansion is based on the upper bound for practical width_px 
                                          -- considering there are very few trees with more than 50m crown diameter in reality
                                          AND way && ST_Expand(
                                            t1.point,
                                            0.5*(t1.width_px+GREATEST(t1.width_px,
                                              LEAST(carto_tree_diameter_mapped('tree', '50', NULL, NULL, NULL, !bbox!, !scale_denominator!), 60))+2.0)*
                                              NULLIF(!scale_denominator!*0.001*0.28,0))
                                      ) AS _
                                  ) AS t2
                                WHERE ST_DWithin(t2.way, t1.point, 0.5*(t1.width_px+t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                                  AND t2.width_px >= 5
                                  AND t1.width_px >= 5
                              UNION ALL
                              -- these are other tree rows/hedges - treated as whole (buffered) lines
                              SELECT
                                  St_Buffer(way, (width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0)*0.5) AS way
                                FROM
                                  (SELECT
                                      way,
                                      ST_Length(way)*(CASE WHEN "natural" = 'tree_row' THEN 1000 ELSE 1.0 END) AS length,
                                      CASE
                                        WHEN tags->'height' ~ '^-?\d{1,3}(\.\d+)?$' THEN (tags->'height')::NUMERIC
                                        ELSE 0.0
                                      END AS height,
                                      tags->'leaf_type' AS leaf_type,
                                      tags->'leaf_cycle' AS leaf_cycle,
                                      tags->'taxon' AS taxon,
                                      COALESCE(tags->'family', tags->'taxon:family') AS family,
                                      COALESCE(tags->'genus', tags->'taxon:genus') AS genus,
                                      COALESCE(tags->'species', tags->'taxon:species') AS species,
                                      GREATEST(
                                        carto_barrier_line_width(COALESCE("natural", barrier), z(!scale_denominator!)),
                                        -- we do not round the mapped width here because tree row symbols are not pixel aligned
                                        -- we cap it at 60 pixel to avoid blowing up existing symbols too much
                                        LEAST(carto_treerow_line_width_mapped(COALESCE("natural", barrier), tags->'width', tags->'height', !bbox!, !scale_denominator!), 60)
                                      ) AS width_px
                                    FROM planet_osm_line
                                    WHERE ("natural" = 'tree_row' OR barrier = 'hedge')
                                      -- based on both tree rows always being drawn at the same width
                                      AND way && ST_Expand(
                                        t1.point,
                                        (t1.width_px+1.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                                  ) AS t2
                                WHERE ((t2.height > t1.height) OR ((t2.height = t1.height) AND (t2.width_px > t1.width_px)) OR ((t2.height = t1.height) AND (t2.width_px = t1.width_px) AND (t2.length > t1.length)))
                                  AND ST_DWithin(t2.way, t1.point, 0.5*(t1.width_px+t2.width_px+2.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                                  AND t2.width_px >= 5
                                  AND t1.width_px >= 5) AS o
                          )
                        ), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)
                      ) AS others,
                      point_index,
                      is_closed,
                      length,
                      height,
                      leaf_type,
                      leaf_cycle,
                      width,
                      width_px
                    FROM
                      (SELECT
                          point,
                          point_index,
                          prev_next,
                          line,
                          is_closed,
                          length,
                          height,
                          carto_leaf_type_classify(leaf_type, species, genus, family, taxon, point_index) AS leaf_type,
                          leaf_cycle,
                          width,
                          width_px
                        FROM
                          (SELECT
                              (way_points).geom AS point,
                              (way_points).path[1] AS point_index,
                              (CASE WHEN carto_leaf_type_classify(leaf_type, species, genus, family, taxon, 0) IS NULL THEN
                                ST_Union(
                                  COALESCE(ST_PointN(way_seg, CASE WHEN (way_points).path[1] = 1 THEN -1 ELSE (way_points).path[1]-1 END), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)),
                                  COALESCE(ST_PointN(way_seg, (way_points).path[1]+1), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857))
                                )
                              ELSE
                                -- ST_PointN(way_seg, CASE WHEN (way_points).path[1] = 1 THEN -1 ELSE (way_points).path[1]-1 END)
                                ST_Union(
                                  COALESCE(ST_PointN(way_seg, CASE WHEN (way_points).path[1] = 1 THEN -1 ELSE (way_points).path[1]-1 END), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857)),
                                  COALESCE(ST_PointN(way_seg, (way_points).path[1]+1), ST_SetSRID('GEOMETRYCOLLECTION EMPTY'::geometry, 3857))
                                )
                              END) AS prev_next,
                              line,
                              is_closed,
                              length,
                              height,
                              leaf_type,
                              leaf_cycle,
                              taxon,
                              family,
                              genus,
                              species,
                              width,
                              width_px
                            FROM
                              (SELECT
                                  ST_DumpPoints(way_seg) AS way_points,
                                  start_point,
                                  way_seg,
                                  line,
                                  is_closed,
                                  length,
                                  height,
                                  leaf_type,
                                  leaf_cycle,
                                  taxon,
                                  family,
                                  genus,
                                  species,
                                  width,
                                  width_px
                                FROM
                                  (SELECT
                                      ST_Segmentize(way, 0.75*width) AS way_seg,
                                      ST_StartPoint(way) AS start_point,
                                      way AS line,
                                      ST_IsClosed(way) AS is_closed,
                                      length,
                                      height,
                                      leaf_type,
                                      leaf_cycle,
                                      taxon,
                                      family,
                                      genus,
                                      species,
                                      width,
                                      width_px
                                    FROM tree_rows
                                    WHERE width_px >= 5
                                  ) AS tree_rows_seg_raw
                              ) AS tree_rows_seg
                            -- we skip the first point for closed ways to avoid a duplicate position
                            WHERE CASE WHEN is_closed THEN NOT(ST_Equals((way_points).geom, start_point)) ELSE TRUE END
                          ) AS t1a
                        -- we can speed things up quite a bit at the higher zoom levels by dropping points outside the bounding box
                        -- for tree rows/hedges much larger than the bounding box
                        WHERE point && ST_Expand(!bbox!,(width_px+1.0)*NULLIF(!scale_denominator!*0.001*0.28,0))
                      ) AS t1
                  ) AS _
              ),
            row_trees AS
              (SELECT
                  ST_Difference(
                    way,
                    others
                  ) AS way,
                  'row_tree' AS type
                FROM row_trees_raw
              ),
            single_trees AS
              (SELECT
                  ST_Difference(
                    ST_Translate(
                      carto_symbol_from_db(
                        'tree',
                        width,
                        width_px,
                        leaf_type,
                        leaf_cycle
                      ),
                      ST_X(point),
                      ST_Y(point)
                    ),
                    others
                  ) AS way,
                  'tree' AS type
                FROM tree_points
                WHERE width_px >= 5
              ),
            trees_small AS
              (SELECT
                  St_Buffer(point, width*0.5) AS way,
                  'tree_small' AS type
                FROM tree_points
                WHERE width_px < 5
              UNION ALL
              SELECT
                  St_Buffer(way, width*0.5) AS way,
                  feature AS type
                FROM tree_rows
                WHERE width_px < 5)
            SELECT
                way,
                type
              FROM single_trees
            UNION ALL
            SELECT
                way,
                type
              FROM row_trees
            UNION ALL
            SELECT
                way,
                type
              FROM trees_small
            ) AS _
        ) AS trees
    properties:
      minzoom: 16
